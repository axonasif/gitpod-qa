[["0",{"pageContent":"Configure Gitpod\nYou can open any repository in Gitpod by prefixing the full repository URL with gitpod.io/#.\nFor example: https://gitpod.io/#https://github.com/nodejs/node\n“Note: For Self-Hosted, substitute gitpod.io for the domain of your installation.”\nTo get the most out of Gitpod, commit a .gitpod.yml to the root of your project to give instructions to Gitpod about what packages to install, which process to start, and much more.\nWorkspaces\nWorkspaces are the developer environments where you code in Gitpod.\nWorkspaces can be created on their own, or as part of a Project.\nWorkspace Image\nTasks\nPorts\nCollaboration\nMulti-repo\nWorkspace Classes\nUser Settings\nUser settings allow you to customize your own personal Gitpod experience.\nBrowser Extension\nBrowser Settings\nBrowser Bookmarklet\nDotfiles\nSSH\nAccess Tokens\nProjects\nProjects are the connection between Gitpod and one or more git repositories and allow you to manage Prebuilds. Projects can be associated with your personal account, or associated with Organizations.\nPrebuilds\nIncremental Prebuilds\nLast Successful Prebuild\nEnvironment Variables\nOrganizations\nOrganizations in Gitpod allow","metadata":{"source":"https://gitpod.io/docs/configure/index"}}],["1",{"pageContent":"you to share projects and their settings amongst many organization individuals.\nAuthentication\nGitLab\nGitHub\nBitBucket\nGitHub Enterprise\nBitbucket Server","metadata":{"source":"https://gitpod.io/docs/configure/index"}}],["2",{"pageContent":"Help\nBuilding Gitpod\nTroubleshooting","metadata":{"source":"https://gitpod.io/docs/help/index"}}],["3",{"pageContent":"Troubleshooting\nIf you cannot find your issue here or in the documentation, please contact Gitpod via our Support page.\nGitpod logs in VS Code Browser and Desktop\nThese logs contain information about the workspace, the session, and the Visual Studio Code environment. They are useful for diagnosing connection issues and other unexpected behavior.\nOpen the Visual Studio Code Command Palette (CtrlCmd + Shift + P) and type Export logs, select Gitpod: Export all logs from the list to download a zip file containing all of the logs.\nImportant: The content of these logs should NOT be shared publicly as they could contain sensitive information about your workspace. Instead, send them to &#116;&#x72;&#111;&#117;&#98;&#108;&#x65;&#115;&#104;&#111;&#111;&#116;&#x69;&#110;&#x67;&#64;&#103;&#105;&#x74;&#x70;&#x6f;&#100;&#46;&#x69;&#111; along with a link to a corresponding GitHub issue if needed.\nGitpod logs in JetBrains Gateway\nThese logs contain information about the workspace, the session, and the JetBrains Gateway. They are useful for diagnosing issues when connecting to a workspace, issues from Gateway Plugins and issues preventing the JetBrains Client to open.\nOpen the","metadata":{"source":"https://gitpod.io/docs/help/troubleshooting"}}],["4",{"pageContent":"Help menu and select Collect Logs and Diagnostic Data option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.\nImportant: The content of these logs should NOT be shared publicly as they could contain sensitive information about your workspace. Instead, send them to &#116;&#x72;&#111;&#x75;&#x62;&#x6c;&#101;&#x73;&#x68;&#111;&#x6f;&#116;&#x69;&#110;&#103;&#x40;&#103;&#x69;&#116;&#112;&#111;&#100;&#x2e;&#105;&#x6f; along with a link to a corresponding GitHub issue if needed.\nNote: Ensure you are using the latest version of JetBrains Gateway and Gitpod JetBrains Gateway plugin, as issues from older versions might have already been fixed.\nGitpod logs in JetBrains Client\nThese logs contain information about the workspace, the session, and the JetBrains IDE. They are useful for diagnosing connection issues, issues from IDE Plugins, and any unexpected behavior from the client and the server.\nOpen the Help menu and select Collect Host and Client logs option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has","metadata":{"source":"https://gitpod.io/docs/help/troubleshooting"}}],["5",{"pageContent":"been saved.\nImportant: The content of these logs should NOT be shared publicly as they could contain sensitive information about your workspace. Instead, send them to &#116;&#114;&#111;&#117;&#98;&#108;&#101;&#115;&#x68;&#x6f;&#x6f;&#116;&#105;&#x6e;&#x67;&#x40;&#103;&#x69;&#x74;&#112;&#111;&#x64;&#46;&#x69;&#111; along with a link to a corresponding GitHub issue if needed.\nNote: Ensure you are using the latest version of both JetBrains Gateway and Gitpod JetBrains Gateway plugin, as issues from older versions might have already been fixed.\nWhy doesn&#39;t the &quot;ClearURLs&quot; browser extension work with Gitpod?\nThe ClearURLs browser extension for Google Chrome and Mozilla Firefox inhibits Gitpod workspaces from initialising and the problem manifests with the following symptoms:\nThe dark theme doesn&#39;t load\nThe bottom left Gitpod button is missing\nThe VS Code Marketplace does not load\nSettings Sync does not work\nThis issue can be resolved by disabling &quot;ETag filtering&quot; in ClearURLs’ settings. An issue has been created that requests to whitelist Gitpod by default and we would appreciate your upvotes on the issue.\nWhat should I do if","metadata":{"source":"https://gitpod.io/docs/help/troubleshooting"}}],["6",{"pageContent":"JetBrains Gateway and Gitpod aren&#39;t working?\nEnsure you are using the latest version of JetBrains Gateway\nEnsure you are using the latest version of the Gitpod JetBrains Gateway plugin\nWhat can I do if I have unsynced data inside a workspace but it&#39;s not starting?\nWhile this is a very critical issue, our workspace-team would eventually look into why it&#39;s happening but on the other hand you might not be able to wait while things get fixed. As an user you can try and get your workspace data yourself:\nGo to the Gitpod Dashboard\nFind your workspace from the list\nDownload your workspace like so:\nDownload a workspace\nYou can now either try opening a new workspace or use your local machine for a while.\nThe downloaded workspace is a tar file which can be extracted with tar -xf &lt;your-workspace-filename-here&gt; command on a new Gitpod workspace or in your Linux/MacOS machine. You can use 7-zip to extract if you&#39;re on windows and don&#39;t have tar.","metadata":{"source":"https://gitpod.io/docs/help/troubleshooting"}}],["7",{"pageContent":"Integrations\nTailscale\nJetBrains Gateway","metadata":{"source":"https://gitpod.io/docs/integrations/index"}}],["8",{"pageContent":"JetBrains Gateway\n“{title} is currently in Beta · Send feedback.”\nJetBrains Gateway is your single entry point to all remote development environments when using JetBrains IDE&#39;s. JetBrains Gateway is a compact desktop app that allows you to work remotely with a JetBrains IDE without downloading the full IDE. Gitpod works with JetBrains Gateway via a custom Gitpod JetBrains Gateway plugin.\nUsing JetBrains Gateway on Desktop with Gitpod, allows you to:\nCreate a new Gitpod workspace\nView and open your 20 latest Gitpod workspaces\nAll without leaving needing to leave your desktop.\nJetBrains IDE support\nJetBrains Gateway is the underlying technology which enables the Gitpod integration. Support for JetBrains IDEs will be rolled out incrementally. The JetBrains Gateway plugin is a standalone feature, so its release cycle is independent individual JetBrains IDE support.\nIntelliJ\nGoLand\nPhpStorm\nPyCharm\nRubyMine\nWebStorm\nRider\nCLion\nGetting started\nyoutube: 8djaRYT2FAY\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll","metadata":{"source":"https://gitpod.io/docs/integrations/jetbrains-gateway"}}],["9",{"pageContent":"see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select your preferred JetBrains IDE on the Gitpod preferences page which will set your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open your preferred JetBrains IDE for that workspace.\nHow does JetBrains and Gitpod work?\nOn Gitpod workspace start, a JetBrains IDE is loaded into your workspace according to your preferences. When you start a workspace the JetBrains Gateway application downloads a thin client which then connects to your Gitpod workspace.\nSince JetBrains Gateway downloads the thin client for you, you do not need to download, open or modify your JetBrains IDE directly. JetBrains licensing still applies, but is applied to the connecting thin client, not the backend running in your Gitpod workspace.\nSetting a JetBrains IDE as a preference\nTo start a workspace using JetBrains from your browser, you need to first set your","metadata":{"source":"https://gitpod.io/docs/integrations/jetbrains-gateway"}}],["10",{"pageContent":"preferred JetBrains IDE as your user preference.\nOpening a JetBrains IDE from Gitpod\nWhen starting a new workspace from Gitpod in the browser (with a JetBrains IDE set as your preference) you will see a prompt to open JetBrains Gateway. Clicking the prompt will immediately launch JetBrains Gateway and begin downloading the IDE thin client. The downloaded thin client will exactly match the IDE running in your Gitpod workspace.\nUpdating the Gitpod plugin in JetBrains Gateway\nSince Gitpod and JetBrains works via JetBrains Gateway, you do not need to download a JetBrains IDE. Also, you do not need to alter your plugin settings in your JetBrains IDE. All setup and configuration for Gitpod and JetBrains is completed within JetBrains Gateway.\nOpening a JetBrains IDE from JetBrains Gateway\nYou can also start, and connect to Gitpod workspaces directly from JetBrains Gateway. Click Gitpod in the left-hand side of JetBrains Gateway, and paste a source control context URL directly to start a new workspace, or click connect on a running or stopped workspace.\nConfiguring the JetBrains Gateway Host\nBy default the JetBrains Gateway Gitpod plugin points to gitpod.io as the default host for listing,","metadata":{"source":"https://gitpod.io/docs/integrations/jetbrains-gateway"}}],["11",{"pageContent":"opening and managing Gitpod workspaces.\nIf you&#39;re using Gitpod Self-Hosted, to update the host:\nOpen JetBrains Gateway\nNavigate to &quot;preferences&quot; (OSX) or &quot;settings&quot; (Windows/Linux)\nSearch for &quot;Gitpod&quot; (or find it under &quot;tools&quot;)\nModify the Gitpod Host field\nConfiguring JetBrains Gateway Networking\nThe following diagram details how the JetBrains Gateway client connects and communicates with Gitpod workspaces, for situations such as configuring corporate networking requirements.\nJetBrains.com - The JetBrains IDE thin client images are downloaded dynamically from JetBrains Gateway to match the exact IDE that is running in Gitpod. Access to jetbrains.com must be granted for an air-gapped Gitpod installation with JetBrains Gateway configuration to work.\nJetBrains Gateway - The JetBrains Gateway client is the component which fetches information about Gitpod workspaces, pulled from the Gitpod API via HTTPS.\nJetBrains Thin Client - The thin client connects to the Gitpod workspace via SSH, routed via the workspace proxy (&quot;ws-proxy&quot;). The SSH server (SSH Gateway) runs in the workspace proxy, not in the workspace","metadata":{"source":"https://gitpod.io/docs/integrations/jetbrains-gateway"}}],["12",{"pageContent":"directly.\nJetBrains networking setup\nJetBrains networking setup\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Gateway\nGitpod logs in JetBrains Client","metadata":{"source":"https://gitpod.io/docs/integrations/jetbrains-gateway"}}],["13",{"pageContent":"Tailscale\nWith Tailscale you can automatically and securely connect your Gitpod workspace to other development resources, whether in the cloud or on prem, such as a production database behind your company’s firewall. You can also spin up several Gitpod workspaces that can talk to each other.\nTailscale is built on top of the point-to-point open-source WireGuard protocol which powers an encrypted mesh network or tailnet. At Gitpod we are big fans of their product and recently announced an official partnership with them.\nIntegration\n“Note: Using Tailscale ssh to a workspace is not supported right now and from requires Tailscale 1.32 or later. If your workspace image was created before 1.32 was available you can force a rebuild without having to update your .gitpod.Dockerfile.”\nIf you’re already using Tailscale, the following steps need to be done (see https://github.com/gitpod-io/demo-tailscale-with-gitpod for a working example):\nInstall tailscale through a custom .gitpod.Dockerfile by adding the following layer to it.\nUSER root\n\n# Install jq (if not done already). Required for the .gitpod.yml tasks below.\n\nRUN curl -fsSL","metadata":{"source":"https://gitpod.io/docs/integrations/tailscale"}}],["14",{"pageContent":"https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo apt-key add - \\\n     && curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | sudo tee /etc/apt/sources.list.d/tailscale.list \\\n     && apt-get update \\\n     && apt-get install -y tailscale jq \\\n     && update-alternatives --set ip6tables /usr/sbin/ip6tables-nftStart tailscale on workspace start and maintain the machine state across workspaces by adding the following tasks to your .gitpod.yml.\ntasks:\n  - name: tailscaled\n    command: |\n      if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n        # restore the tailscale state from gitpod user's env vars\n        sudo mkdir -p /var/lib/tailscale\n        echo \"${TAILSCALE_STATE_MYPROJECT}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n      fi\n      sudo tailscaled\n  - name: tailscale\n    command: |\n      if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n        sudo -E tailscale up\n      else\n        sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n        # store the tailscale state into gitpod user\n        gp env TAILSCALE_STATE_MYPROJECT=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n      fiThis configuration will register a","metadata":{"source":"https://gitpod.io/docs/integrations/tailscale"}}],["15",{"pageContent":"Tailscale node based on the following name scheme: gitpod-{user-name}-{repo-name}. On first workspace start you will get asked to login through the terminal. When this was successful a Tailscale machine state will be stored in your Gitpod&#39;s account. On subsequent starts of workspaces on this project this machine state will be restored.\nIF you enable Tailscale&#39;s Magic DNS you get a stable domain for your project&#39;s services that you can reach from any other Tailscale node (e.g. another workspace or your local machine).\n“Warning: Be aware that starting and connecting multiple workspaces for the same project in parallel results in unreliable network connections.”","metadata":{"source":"https://gitpod.io/docs/integrations/tailscale"}}],["16",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Explore our docs to learn how to set up and configure your cloud developer environment. Quickstart. Getting started. Configure. Develop. IDEs. Editors. Integrations. Self-Hosted. Supply Chain Security.&quot;,\n    title: &quot;Gitpod Documentation - Educate, Configure, Develop&quot;,\n    keywords: &quot;documentation, how to, education, learn&quot;,\n  }}\n/&gt;\nLatest updates\nTo see all updates view our changelog","metadata":{"source":"https://gitpod.io/docs/introduction/index"}}],["17",{"pageContent":"Compatibility\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis page shows you what components and services Gitpod is and is not compatible with. It is aimed at both individual developers that use Gitpod as well as admins that install and maintain a Gitpod Self-Hosted instance. You can filter the table to show only what is relevant to you.\n“Note: It is required to have at least one of each category. SaaS users can ignore the self-hosted specific categories (see filter)”","metadata":{"source":"https://gitpod.io/docs/references/compatibility"}}],["18",{"pageContent":"Gitpod CLI\nGitpod supports a command line interface that is available in each workspace terminal called gp:\nCommand line interface for Gitpod\n\nUsage:\n  gp [command]\n\nAvailable Commands:\n  docs                Open Gitpod Documentation in default browser\n  env                 Controls user-defined, persistent environment variables.\n  help                Help about any command\n  info                Display workspace info, such as its ID, class, etc.\n  init                Create a Gitpod configuration for this project.\n  open                Opens a file in Gitpod\n  ports               Interact with workspace ports.\n  preview             Opens a URL in the IDE's preview\n  rebuild             Re-builds the workspace image (useful to debug a workspace custom image)\n  snapshot            Take a snapshot of the current workspace\n  stop                Stop current workspace\n  sync-await          Awaits an event triggered using gp sync-done\n  sync-done           Notifies the corresponding gp sync-await calls that this event has happened\n  tasks               Interact with workspace tasks\n  timeout             Interact with workspace timeout configuration\n  top                 Display workspace resource (CPU and memory usage)\n  url                 Prints the URL of this workspace\n  version             Prints the version of the CLI\n\nFlags:\n  -h, --help   help for gp\n\nUse \"gp [command] --help\" for more information about a command.init\nGitpod","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["19",{"pageContent":"workspaces can be configured - see Configuring Workspaces for more details. gp init generates a default .gitpod.yml file. You can customize it to match your requirements.\nAlternatively, gp init -i is an interactive guide which helps create the .gitpod.yml configuration file based on a few questions you answer.\nExample to start a interactive guide of .gitpod.yml configuration file:\ngp init -iopen\nModern editors/IDE&#39;s support command line tooling to open a file (e.g. VS Code code foo.txt). In Gitpod, this can be done using gp open &lt;filename&gt;.\nWe also added common aliases for gp open: code and open.\nExample to open the README.md file in the current directory:\ngp open README.mdpreview\ngp preview opens a URL. The default is to show the URL in a preview pane within the editor or IDE directly. Alternatively, you can show the preview a new tab with the --external flag.\nMake sure you provide a valid URL, i.e. including the protocol. For example, http://localhost:8080.\nYou can also use gp preview &lt;url&gt; --external to open the URL in a new browser tab.\nExample opening a gitpod workspace port 3000 as a tab using gp url and gp preview:\ngp preview $(gp url 3000) --externalurl\nGitpod","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["20",{"pageContent":"workspaces can expose services to the internet. gp url provides the URL which points to a service served from a Gitpod workspace. For example gp url 8080 prints the URL which points to the service listening on port 8080 in this current workspace.\nYou can combine the preview and the url command to open a certain path instead of the default URL.\nFor instance:\ngp preview $(gp url 3000)/my/path/index.htmlIf you put this into the .gitpod.yml to open the a certain page on startup, make sure you ignore the default action when the port opens.\nenv\nWith gp env API_ENDPOINT=https://api.example.com you can set an API_ENDPOINT environment variable that is accessible for this project, even if you stop the workspace and start a new one.\nTo delete or unset an environment variable, you use gp env -u API_ENDPOINT.\nPlease refer to the help output provided by gp env --help for more use cases of the gp env command.\nFor instance, you can use following to get your all Gitpod environment variables:\ngp envsync-await\nIn situations where you work with multiple terminals and one depends on a task in another terminal to complete, gp sync-await &lt;name&gt; waits until you call gp sync-done &lt;name&gt; in another","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["21",{"pageContent":"terminal.\nSee Start Tasks for a real-world example.\nsync-done\nTo notify a gp sync-await &lt;name&gt; call (see previous chapter), you can call gp sync-done &lt;name&gt;.\nA common use case is the following where we have three terminals:\nTerminal 1: A build process takes several minutes to complete. At the end, you call gp sync-done build.\nTerminal 2: You use gp sync-await build &amp;&amp; npm run start-database to wait for the build to complete before you start a database\nTerminal 3: You use gp sync-await build &amp;&amp; npm run dev to wait for the build to complete before you start the dev server.\nSee Start Tasks for a real-world example.\nsnapshot\nFor sharing a complete clone of a workspace with others, gp snapshot is basically the CLI method for getting a snapshot URL. To learn more about snapshots, see Collaboration &amp; Sharing of Workspaces\ngp snapshotstop\ngp stop is the CLI method of stopping a workspace.\nExample to stop the current gitpod workspace using gitpod CLI:\ngp stoptasks\nProgrammatically view and interact with workspace tasks as defined in the project&#39;s .gitpod.yml. Useful when using the command line, such as ssh&#39;ing into a workspace or after accidentally","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["22",{"pageContent":"losing view of a terminal and it&#39;s output.\nlist\nReturns a table-formatted list of tasks, their name, state and the ID of the terminal in which the task is executed.\n“Tip: You can see the task you are currently attached to highlighted in green.”\ngp tasks listUse gp tasks list --no-color to disable colors for the output. It also respects the NO_COLOR &amp; GP_NO_COLOR environment variable.\nattach\nCreates a connection from a user terminal to a given workspace&#39;s task terminal. The session is interactive. Once attached, both stdin and stdout are streamed between the user and the remote terminal. Allowing the user to run commands directly in the task terminal.\nRun without arguments to get a selection prompt. When only one task is running, attach will skip the prompt and automatically connect.\ngp tasks attachAlternatively, specify the Terminal ID that you can see with gp tasks list:\ngp tasks attach <id>stop\nInterrupts one or more running tasks and automatically closes their terminals. Useful when you don&#39;t need a certain task anymore, when authoring the .gitpod.yml file or when you start a workspace for projects with several tasks but you don&#39;t need them and want to save time and","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["23",{"pageContent":"resources.\nRun without arguments to get a selection prompt. Only running tasks will be offered as a choice.\ngp tasks stopSpecify the Terminal ID that you can see with gp tasks list.\ngp tasks stop <id>Run with the --all flag to stop all running tasks.\ngp tasks stop --alltimeout\nInteract with workspace timeout configuration. You can learn more in Life of a Workspace.\ngp timeout show“Note: You can only have one workspace with extended timeout at a time.”\nThe default timeout, and the ability to extend a workspace timeout depends on your billing configuration.\nset\nSets the current workspace&#39;s timeout to the given value. The value must be a positive integer followed by a unit of time. The unit of time can be one of m, h for minutes and hours, respectively. The maximum workspace timeout is 24 hours.\ngp timeout set 300mshow\nShows the current workspace&#39;s timeout.\ngp timeout showextend\nExtends the current workspace timeout from the default, or currently set value to 180 minutes.\ngp timeout extendinfo\nDisplays information about the current workspace (such as the workspace ID and URL) and also the workspace class.\ngp infoUse gp info --json to get the output in JSON format for programmatic use","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["24",{"pageContent":"in (e.g. in shell scripts).\nports\nProvides a way to manage a workspace&#39;s ports. Applies to both: ports defined in .gitpod.yml and ports that are undeclared but are opened during the lifetime of the workspace.\nlist\nOutputs a table-formatted list of ports along with their status, URL, name and description.\ngp ports listUse gp ports list --no-color to disable colors for the output. It also respects the NO_COLOR &amp; GP_NO_COLOR environment variable.\nexpose\nIn Gitpod, services/servers running on a port need to be exposed before they become accessible from the internet. This process only works with services listening on 0.0.0.0 and not just localhost.\nSometimes it is not possible to make a server listen on 0.0.0.0, e.g. because it is not your code and there are simply no means of configuration.\nIn that case, gp ports expose &lt;port&gt; can be used to forward all traffic form a socket listing on all network interfaces to your process listening on localhost only.\ngp ports expose <port>await\nWhen writing tasks to be executed on workspace start, one sometimes wants to wait for an http service to be available. gp ports await does that.\nHere&#39;s an example that will open a certain path once a","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["25",{"pageContent":"service is a available:\ngp ports await 3000 && gp preview $(gp url 3000)/my/path/index.htmlvisibility\nYou can change a port&#39;s visibility to make it only available for users with workspace access (private) or everyone who knows the port&#39;s URL (public). A port&#39;s default visibility is always private, unless configured differently from within .gitpod.yml.\nHere&#39;s an example which will make port 3000 public:\ngp ports visibility 3000:publicHere&#39;s an example which will make port 3000 private:\ngp ports visibility 3000:privatetop\nDisplays the current workspace&#39;s class info along with the used and available CPU and memory.\ngp topUse gp top --json to get the output in JSON format for programmatic use in (e.g. in shell scripts).\n\nUse gp top --no-color to disable colors for the output. It also respects the NO_COLOR &amp; GP_NO_COLOR environment variable.\n\ndocs\nOpens the Gitpod documentation in a new browser tab.\ngp docsrebuild\n“gp rebuild is currently in Beta · Send feedback.”\nRuns a debug workspace inside an existing Gitpod workspace. You can use this to quickly iterate on/debug your .gitpod.yml properties such as tasks or a custom workspace image.\ngp rebuild","metadata":{"source":"https://gitpod.io/docs/references/gitpod-cli"}}],["26",{"pageContent":"Gitpod public API\n“Access Tokens are currently in Alpha · Send feedback.”\nThe Gitpod Public API grants direct access to Gitpod data for use cases such as integration into other 3rd party applications.\nAuthentication\nTo authenticate requests, the Gitpod API utilises Access Token. In the Gitpod Settings, you can view and manage your PAT Tokens (Private Beta).\nKeep in mind that your access tokens have a lot of power, so protect them carefully! Avoid disclosing your private Access Tokens in areas that are open to the public, such as GitHub, client-side code, and so forth.\nTo Authenticate you will need to pass an Access Token as an Authorization request header bearer token in the format Bearer &lt;YOUR_ACCESS_TOKEN&gt;.\nExample cURL command:\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'API Reference\nResource: Workspaces\nList all workspaces\nLists all the workspaces belongs to the authenticated user. Currently, it returns only the first page of the results.\ncurl","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["27",{"pageContent":"'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/ListWorkspaces' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'func ExampleListWorkspaces() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Workspaces.ListWorkspaces(context.Background(), connect.NewRequest(&v1.ListWorkspacesRequest{}))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to list workspaces %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved workspaces %v\", response.Msg.GetResult())\n}{\n  \"result\": [\n    {\n      \"workspaceId\": \"<WORKSPACE_ID>\",\n      \"ownerId\": \"<USER_ID>\",\n      \"context\": {\n        \"contextUrl\": \"https://github.com/gitpod-io/empty\",\n        \"git\": {\n          \"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n        }\n      },\n      \"description\": \"gitpod-io/empty \",\n      \"status\": {\n        \"instance\": {\n          \"instanceId\": \"<INSTANCE_ID>\",\n          \"workspaceId\": \"<WORKSPACE_ID>\",\n          \"createdAt\": \"2022-12-19T08:36:47.254Z\",\n          \"status\": {","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["28",{"pageContent":"\"statusVersion\": \"<STATUS_VERSION>\",\n            \"phase\": \"PHASE_STOPPED\",\n            \"conditions\": {},\n            \"url\": \"https://<WORKSPACE_ID>.ws-us79.gitpod.io\",\n            \"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n          }\n        }\n      }\n    }\n  ]\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\npageSize (Coming Soon)It is maximum number of results we expectInt32false\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nnextPageTokenNext Page Tokenstring\n\nworkspaceIdWorkspace Idstring\n\nownerIdUser Idstring\n\nprojectIdProject Idstring\n\ncontextcontextUrl with details of git or prebuild or snapshotstring\n\nstatuswill return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assignedstring\n\nGet a workspace\nReturns a single workspace.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/GetWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'func ExampleGetWorkspace() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr,","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["29",{"pageContent":"\"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Workspaces.GetWorkspace(context.Background(), connect.NewRequest(&v1.GetWorkspaceRequest{\n        WorkspaceId: \"<WORKSPACE_ID>\",\n    }))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to get workspace %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved workspace %v\", response.Msg.GetResult())\n}{\n  \"result\": {\n    \"workspaceId\": \"<WORKSPACE_ID>\",\n    \"ownerId\": \"<USER_ID>\",\n    \"context\": {\n      \"contextUrl\": \"https://github.com/gitpod-io/empty\",\n      \"git\": {\n        \"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n      }\n    },\n    \"description\": \"gitpod-io/empty \",\n    \"status\": {\n      \"instance\": {\n        \"instanceId\": \"<INSTANCE_ID>\",\n        \"workspaceId\": \"<WORKSPACE_ID>\",\n        \"createdAt\": \"2022-12-22T07:43:16.152Z\",\n        \"status\": {\n          \"statusVersion\": \"<STATUS_VERSION>\",\n          \"phase\": \"PHASE_RUNNING\",\n          \"conditions\": {\n            \"firstUserActivity\": \"2022-12-22T07:43:21.732Z\"\n          },\n          \"url\": \"https://<WORKSPACE_ID>.ws-us80.gitpod.io\",\n          \"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n        }\n      }\n    }\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nworkspaceIdWorkspace","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["30",{"pageContent":"Idstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nworkspaceIdWorkspace Idstring\n\nownerIdUser Idstring\n\nprojectIdProject Idstring\n\ncontextcontextUrl with details of git or prebuild or snapshotstring\n\nstatuswill return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assignedstring\n\nCreate Workspace (Coming Soon)\nCreates a new workspace from any context URL (Repository, Issues, Pull Requests, Files, etc.)\nStart workspace (Coming Soon)\nStarts an older workspace (instance).\nUsage: StartWorkspace()\nRequest Parameters:\n\nParameterDescriptionTypeRequired\n\n\nworkspaceIdWorkspace Id that needs to be stoppedstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\ninstanceIdInstance Idstring\n\nworkspaceUrlURL of the started workspacestring\n\nStop workspace\nStops a running workspace (instance).\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/StopWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'Request","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["31",{"pageContent":"Parameters:\n\nParameterDescriptionTypeRequired\n\n\nworkspaceIdWorkspace Id that needs to be stoppedstringtrue\n\nResponse: It stops the requested workspace.\nDelete workspace\nIt deletes the workspace &amp; also stops the workspace if it is running.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/DeleteWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nworkspaceIdWorkspace Id that needs to be deletedstringtrue\n\nResponse: It deletes the requested workspace.\n\nResource: Teams\nCreate a team\nCreates a team.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/CreateTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"name\":\"<TEAM_NAME>\"}'{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\": \"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["32",{"pageContent":"\"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nnameTeam namestringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nidUUID of Teamstring\n\nnameName of teamstring\n\ncreationTimeCreation time of teamstring\n\nmembersList of members in a teamarray\n\nGet a team\nReturns a single team.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/GetTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'func ExampleGetTeam() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Teams.GetTeam(context.Background(), connect.NewRequest(&v1.GetTeamRequest{\n        TeamId: \"<TEAM_ID>\",\n    }))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to get team %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved team %v\", response.Msg.GetTeam())\n}{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\":","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["33",{"pageContent":"\"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_MEMBER\",\n        \"memberSince\": \"2022-12-22T08:05:20.465Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>'s Bot\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      },\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nteamIdTeam Idstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nidUUID of Teamstring\n\nnameName of teamstring\n\ncreationTimeCreation time of teamstring\n\nmembersList of members in a teamarray\n\nList all teams\nLists all the teams belongs to the authenticated user.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'func ExampleListTeams() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n    gitpod, err :=","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["34",{"pageContent":"client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n    ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n    defer cancel()\n    response, err := gitpod.Teams.ListTeams(ctx, connect.NewRequest(&v1.ListTeamsRequest{}))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}{\n  \"teams\": [\n    {\n      \"id\": \"<TEAM_ID>\",\n      \"name\": \"<TEAM_NAME>\",\n      \"members\": [\n        {\n          \"userId\": \"<USER_ID>\",\n          \"role\": \"TEAM_ROLE_OWNER\",\n          \"memberSince\": \"2022-09-26T04:33:17.557Z\",\n          \"avatarUrl\": \"<USER_AVATAR_URL>\",\n          \"fullName\": \"<USER_FULL_NAME>\",\n          \"primaryEmail\": \"<USER_EMAIL>\"\n        }\n      ],\n      \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n    },\n    {\n      \"id\": \"<TEAM_ID>\",\n      \"name\": \"<TEAM_NAME>\",\n      \"members\": [\n        {\n          \"userId\": \"<USER_ID>\",\n          \"role\": \"TEAM_ROLE_OWNER\",\n          \"memberSince\": \"2022-09-25T15:41:41.352Z\",\n          \"avatarUrl\": \"<USER_AVATAR_URL>\",\n          \"fullName\": \"<USER_FULL_NAME>\",\n          \"primaryEmail\": \"<USER_EMAIL>\"\n        }\n      ],\n      \"teamInvitation\": { \"id\":","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["35",{"pageContent":"\"<TEAM_INVITATION_ID>\" }\n    }\n  ]\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\npageSizeIt is maximum number of results we expectInt32false\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nteamsList of teams of a userarray\n\nJoin a team\nJoins a team.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/JoinTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"invitationId\":\"<TEAM_INVITATION_ID>\"}'{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\": \"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\ninvitationIdTeam Invitation IDstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nidUUID of Teamstring\n\nnameName of teamstring\n\ncreationTimeCreation time of teamstring\n\nmembersList of members in a teamarray\n\nReset team","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["36",{"pageContent":"invitation\nResets the team invitation.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ResetTeamInvitation' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'{\n  \"teamInvitation\": {\n    \"id\": \"<TEAM_INVITATION_ID>\"\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nteamIdTeam Invitation IDstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\ninvitationIdnew Invitation Id of Teamstring\n\nUpdate a team member role\nUpdates a team member role\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/UpdateTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMember\": {\"userId\":\"<USER_ID>\", \"role\":\"TEAM_ROLE_OWNER\"}}'{\n  \"teamMember\": {\n    \"userId\": \"<USER_ID>\",\n    \"role\": \"TEAM_ROLE_OWNER\"\n  }\n}Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nteamIdTeam namestringtrue\n\nuserIdUser ID of a team member being updatedstringtrue\n\nroleRole of a team member: TEAM_ROLE_OWNER or","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["37",{"pageContent":"TEAM_ROLE_MEMBERstringtrue\n\nResponse Parameters:\n\nParameterDescriptionType\n\n\nuserIdUser ID of team memberstring\n\nroleNew role of teamstring\n\nDelete team member\nDeletes a team member.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMemberId\": \"<USER_ID>\"}'Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nteamIdTeam namestringtrue\n\nteamMemberIdId of team member being updatedstringtrue\n\nResponse: It deletes the team member from the team.\nDelete a team\nDeletes a team.\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'Request Parameters:\n\nParameterDescriptionTypeRequired\n\n\nteamIdTeam namestringtrue\n\nResponse: It deletes the requested team.\nAPI language clients\nGo\nThe following is an example of how to use the Go client library with the Public API for retrieving teams data. Replace the","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["38",{"pageContent":"environment variable PERSONAL_PAT with your own personal access token, for example: export PERSONAL_PAT=&lt;your-personal-pat&gt;\n// Download the helper library using go get -u github.com/gitpod-io/gitpod/components/public-api/go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/bufbuild/connect-go\"\n    \"github.com/gitpod-io/gitpod/components/public-api/go/client\"\n    v1 \"github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1\"\n)\n\nfunc main() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Teams.ListTeams(context.Background(), connect.NewRequest(&v1.ListTeamsRequest{}))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}TypeScript\n“🚧 Under development”","metadata":{"source":"https://gitpod.io/docs/references/gitpod-public-api"}}],["39",{"pageContent":".gitpod.yml\nThe .gitpod.yml file at the root of your project is where you tell Gitpod how to prepare &amp; build your project, start development servers and configure continuous prebuilds for GitHub.\nBelow is a full reference of all available properties. To see the underlying schema, please refer to gitpod-io/gitpod in the gitpod-io/gitpod","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["40",{"pageContent":"repository.\n.gitpod.ymladditionalRepositories\ncheckoutLocation\ncoreDump\ngitConfig\ngithubprebuilds.addBadge\nprebuilds.addCheck\nprebuilds.addComment\nprebuilds.addLabel\nprebuilds.branches\nprebuilds.master\nprebuilds.pullRequests\nprebuilds.pullRequestsFromForks\n\nimageimage.file\nimage.context\n\njetbrainsjetbrains.plugins\njetbrains.[product]\njetbrains.[product].plugins\njetbrains.[product].prebuilds\njetbrains.[product].vmoptions\n\nportsports[n].name\nports[n].description\nports[n].onOpen\nports[n].port\nports[n].visibility\n\ntaskstasks[n].before\ntasks[n].command\ntasks[n].env\ntasks[n].init\ntasks[n].name\ntasks[n].openIn\ntasks[n].openMode\ntasks[n].prebuild\n\nmainConfiguration\nvscodevscode.extensions\n\nworkspaceLocation\n\nadditionalRepositories\n“additionalRepositories is currently in Beta. Send feedback.”\nDefines additional source control repositories to clone and where the repository is cloned under /workspaces\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nDemo\n\nExample\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    #","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["41",{"pageContent":"checkoutLocation is optional and relative to /workspaces.\n    # by default the location defaults to the repository name.\n    checkoutLocation: backendWhen the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\nIf you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t exist Gitpod checks out the default branch.\nThe contents of the branch is cloned under /workspaces/\nThe contents of https://github.com/gitpod-io/demo-multi-repo-backend is cloned to /workspaces/backend\nAfter all of the source control repositories have been cloned then the before, init and command tasks are executed as per normal.\nIf you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory to the use configured or default checkoutLocation location using the before task.\nExample\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    # checkoutLocation is","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["42",{"pageContent":"optional and relative to /workspaces.\n    # by default the location defaults to the repository name.\n    checkoutLocation: backend\n\ntasks:\n  - name: backend\n    # change working directory as per configured in `checkoutLocation`\n    # which is configured above as `/workspaces/backend`\n    before: |\n      cd ../backend\n    init: |\n      echo npm install\n    command: |\n      echo npm run dev\n\n    # changing of working directory is not required as these tasks will\n    # by default by executed in `/workspaces/demo-multi-repo-frontend`\n  - name: frontend\n    init: |\n      echo npm install\n      echo npm run build\n    command: |\n      echo npm run devcheckoutLocation\nDefine where Gitpod checks out the project&#39;s code, relative to /workspace.\nIn most cases, this is not needed. If you work on an older Go project, please see the Go Language Page for more details.\n\nTypeDefault\n\n\nstring/workspace\n\nExample\ncheckoutLocation: \"go/src/github.com/demo-apps/go-gin-app\"coreDump\nDefine workspace core dump behavior.\nFor most cases, setting the coreDump property is not required. However, it can be a valuable feature to debug C++, or when debugging add-ons in Rust, Python, or node.js.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nExample\ncoreDump:","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["43",{"pageContent":"enabled: trueYou can also set custom size values for the generated core files using the softLimit and hardLimit values (see example below). The setting softLimit configures the upper limit on the size of the core dump file that will be produced if a process receives a core dump signal, while hardLimit allows setting a hard limit to act as a ceiling for the soft limit.\ncoreDump:\n  enabled: true\n  softLimit: <bytes>\n  hardLimit: <bytes>For more details, please see the Linux man page for getrlimit\ngitConfig\nDefine a workspace&#39;s git configuration as key-value pairs.\nPlease refer to https://git-scm.com/docs/git-config#_values for a list of accepted values.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nExample\ngitConfig:\n  alias.st: status\n  core.autocrlf: inputgithub\nConfigure the GitHub Gitpod app. At this time, the following configuration is used to configure continuous prebuilds for GitHub repositories.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nExample\ngithub:\n  prebuilds:\n    master: true\n    branches: true\n    pullRequests: true\n    pullRequestsFromForks: true\n    addCheck: false\n    addComment: false\n    addBadge: trueprebuilds.addBadge\nGitpod can modify the description of a pull","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["44",{"pageContent":"request to add an “Open in Gitpod” button. This approach produces fewer GitHub notifications than adding a comment, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\nAn Open in Gitpod badge in a PR description\n\nTypeDefault\n\n\nbooleanfalse\n\nprebuilds.addCheck\nConfigure whether Gitpod registers itself as a status check to pull requests - much like a continuous integration system would do. By default a failing prebuild would not make the check fail. Set prevent-merge-on-error to block PR merging when prebuilds failed.\nTo learn more about status checks, please see the GitHub documentation about status checks.\nGitpod status check in a pull request\n\nTypeDefaultValues\n\n\nstringprevent-merge-on-errortrue, false, prevent-merge-on-error\n\nprebuilds.addComment\nGitpod can add a comment with an “Open in Gitpod” button to your pull requests. Alternatively, you could add a badge to the pull request&#39;s description.\nAn Open in Gitpod badge in a PR comment\n\nTypeDefault\n\n\nbooleanfalse\n\nprebuilds.addLabel\nDeprecated.\nprebuilds.branches\nDefine whether Gitpod creates prebuilds for all","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["45",{"pageContent":"branches.\n\nTypeDefault\n\n\nbooleanfalse\n\nprebuilds.master\nDefine whether Gitpod creates prebuilds for the default branch.\n\nTypeDefault\n\n\nbooleantrue\n\nprebuilds.pullRequests\nDefine whether Gitpod creates prebuilds for pull requests from the original repository.\n\nTypeDefault\n\n\nbooleantrue\n\nprebuilds.pullRequestsFromForks\nDefine whether Gitpod creates prebuilds for pull requests from forks.\n\nTypeDefault\n\n\nbooleanfalse\n\nimage\nDefine a custom Docker image to be used for workspaces. To learn more, please review Custom Docker Image.\nPublic images are hosted on Docker Hub and can be referenced by their name, e.g. ubuntu:latest.\nTo see a list of Gitpod-provided images, please see gitpod-io/workspace-images.\n\nTypeDefault\n\n\nobject or stringgitpod/workspace-full\n\nExamples\nWith a public image\nimage: ubuntu:latestWith a custom image\nimage:\n  file: .gitpod.DockerfileWith an optional context\nimage:\n  file: .gitpod.Dockerfile\n  context: ./docker-contentimage.file\nTo define a custom Docker image, you can use the following configuration:\nFor a list of examples, please see","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["46",{"pageContent":"https://github.com/gitpod-io/workspace-images.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\nimage.context\nOptionally, you can set the image.context. This is useful when you want to copy files into the Docker image. The Docker docs describe this in more detail.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\njetbrains\n“JetBrains is currently in Beta · Send feedback.”\nDefine the integration between Gitpod and JetBrains IDEs.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\njetbrains.plugins\n“JetBrains plugin support (via gitpod.yml) is currently in Beta · Send feedback.”\nDefine a list of plugins which should be installed for all compatible JetBrains IDEs when starting a workspace. To find the plugin identifier, from the JetBrains Marketplace, find the desired plugin, open the &#39;Versions&#39; tab, select any version and copy the &#39;Plugin ID&#39; (like ${publisher}.${name}).\n\nTypeDefault\n\n\narray&lt;empty&gt;\n\njetbrains.[product]\n“JetBrains is currently in Beta · Send feedback.”\nDefine the integration between Gitpod and a specific JetBrains IDE. Install plugins and configure prebuilds to speed up the IDE indexing.\nSpecify the &#39;product&#39; with one of the","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["47",{"pageContent":"following values:\nintellij\ngoland\npycharm\nphpstorm\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\njetbrains.[product].plugins\n“JetBrains plugin support (via gitpod.yml) is currently in Beta · Send feedback.”\nDefine a list of plugins which should be installed for the given JetBrains IDE when starting a workspace. To find the plugin identifier, from the JetBrains Marketplace, find the desired plugin, open the &#39;Versions&#39; tab, select any version and copy the &#39;Plugin ID&#39; (like ${publisher}.${name}).\n\nTypeDefault\n\n\narray&lt;empty&gt;\n\nExample\njetbrains:\n  intellij:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsjetbrains.[product].prebuilds\n“JetBrains prebuilds support (via gitpod.yml) is currently in Alpha · Send feedback.”\nDefine whether Gitpod enables prebuilds for a specific JetBrains IDE.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nExample\njetbrains:\n  intellij:\n    prebuilds:\n      version: stableThe version is defined as follows:\n\nTypeDefaultValues\n\n\nstringstablestable, latest, both\n\njetbrains.[product].vmoptions\n“Configuration of JVM options (via gitpod.yml) is currently in Alpha · Send feedback.”\nConfigure","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["48",{"pageContent":"JVM options for a specific JetBrains IDE.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\nExample\njetbrains:\n  intellij:\n    vmoptions: \"-Xmx4g\"ports\nConfigure how Gitpod treats various ports your application may listen on. You can learn more about this in the Exposing Ports documentation.\n\nTypeDefault\n\n\narray&lt;empty&gt;\n\nExample\nports:\n  - name: Website\n    port: 3000\n    onOpen: open-preview\n  - name: VNC\n    description: full GUI Virtual Desktop\n    port: 6080\n    onOpen: open-browser\n  - name: Server\n    port: 10000\n    onOpen: ignoreports[n].name\nDefine a name for the port, which will be shown as a column in the output of gp ports list and in the Port column inside of the ports list in VS Code Browser and Desktop.\nMore detail\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\nports[n].description\nAdds a description to the port, which will be shown as a column in the output of gp ports list.\nYou can find the port&#39;s description in the ports view table column, following the Address field (the same description can be found in the Remote Explorer as a tooltip [on hover] of the port).\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\nports[n].onOpen\nDefine what to do when Gitpod detects a given port is being listened","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["49",{"pageContent":"on.\n\nTypeDefaultValues\n\n\nstring&lt;empty&gt;open-browser,open-preview,notify,ignore\n\nPlease note: For JetBrains IDEs connected to Gitpod via JetBrains Gateway open-preview will behave exactly the same as open-browser, as there is no functionality for a web preview in the JetBrains IDE.\nports[n].port\nDefine a single port or a range of ports, e.g. 3000-3100.\n\nTypeDefault\n\n\nnumber or string&lt;empty&gt;\n\nports[n].visibility\nDefine whether to expose the port publicly or keep it private.\nA public port allows you to share a URL for a given port with team members, for example if you want to get their feedback on a new feature you develop.\n\nTypeDefaultValues\n\n\nstringprivateprivate,public\n\ntasks\nDefine how Gitpod prepares &amp; builds your project and how it can start the project&#39;s development server(s). To learn more, please visit Start Tasks. Each array element opens in its own terminal.\n\nTypeDefault\n\n\narray&lt;empty&gt;\n\nExample\ntasks:\n  - before: sh ./scripts/setup.sh\n    init: npm install\n    command: npm run dev\n  - name: Database\n    init: sh ./scripts/seed-database.sh\n    command: npm start-db\n    env:\n      DB_HOST: localhost:3306\n      DB_USER:","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["50",{"pageContent":"readOnlyUsertasks[n].before\nA shell command to run before init and the main command. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.\nLearn more about Start Tasks in the docs.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\ntasks[n].command\nThe main shell command to run after before and init. This command is executed last on every start and doesn&#39;t have to terminate.\nLearn more about Start Tasks in the docs.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\ntasks[n].env\nDefine environment variables that will be available in the workspace.\nLearn more about Environment Variables in the docs.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\ntasks[n].init\nA shell command to run between before and the main command.\nThis task is executed only once. When you start a workspace that does not have a prebuild, init is executed at workspace start. When you start a workspace that has a prebuild, init executes as part of the prebuild, but does NOT execute again at workspace start.\nThis task is expected to terminate. If it fails, the command property will not be executed.\nLearn more about Start Tasks in the","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["51",{"pageContent":"docs.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\ntasks[n].name\nA name for the task, also shown on the terminal tab.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\ntasks[n].openIn\nDeprecated. This does not have an impact in VS Code.\ntasks[n].openMode\nConfigure how the terminal should be opened relative to the previous task.\n\nTypeDefaultValues\n\n\nstring&lt;empty&gt;tab-after,tab-before,split-right,split-left\n\nNote: split-top and split-bottom are deprecated values.\ntasks[n].prebuild\nDeprecated. Please use the init task instead.\nmainConfiguration\n“mainConfiguration is currently in Beta. Send feedback.”\nDefines the repository with the main .gitpod.yml file and makes it possible to open the same workspace from any issue, branch or other context URL from any repository defined in a multi repository configuration.\n\nTypeDefault\n\n\nstring&lt;empty&gt;\n\nDemo\n\nExample\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontendvscode\nConfigure the VS Code editor.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nvscode.extensions\nDefine a list of extensions which should be installed for users of this workspace. The identifier of an extension is","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["52",{"pageContent":"always ${publisher}.${name}. For example: &#39;vscodevim.vim&#39;.\nPlease note, Gitpod uses the Open VSX registry to find extensions. If you cannot find an extension you know exists in your local VS Code, please get in touch with us or open a new PR in the open-vsx/publish-extensions repository to add the extension to Open VSX 🙏.\n\nTypeDefault\n\n\nobject&lt;empty&gt;\n\nBy default, extensions will use the latest available version unless you use a specific version number. The version number must use semantic versioning rules. If you are interested in importing an extension that is not published on the Open VSX registry you can directly use the full URL.\nExample\nvscode:\n  extensions:\n    - svelte.svelte-vscode\n    - bradlc.vscode-tailwindcss@0.6.11\n    - https://example.com/abc/releases/extension-0.26.0.vsixworkspaceLocation\nDefine which path Gitpod considers the project&#39;s workspace directory, relative to /workspace.\nIn most cases, this is not needed. If you work on an older Go project, please see the Go Languages page for more details.\n\nTypeDefault\n\n\nstring/workspace\n\nExample\nworkspaceLocation: \".\"","metadata":{"source":"https://gitpod.io/docs/references/gitpod-yml"}}],["53",{"pageContent":"References\nBelow are links to Gitpod reference material you may find helpful:\nProduct Compatibility Matrix\n.gitpod.yml\nCommand Line Interface\nRoadmap\nGitpod Releases\nSecurity FAQ","metadata":{"source":"https://gitpod.io/docs/references/index"}}],["54",{"pageContent":"Bitbucket Server\nGitpod works with public, private, or internal repositories on your own instance of Bitbucket Server v7.20 or later. Setting this up requires 2 steps.\nA one-time registration of the Bitbucket server instance with Gitpod.\nEach Gitpod user connects their account to Bitbucket server the first time they start a workspace.\nRegistering a Bitbucket Server\nThe Bitbucket Server Admin can register the Bitbucket Server in their own Gitpod account settings.\nStart by creating a New Integration and entering the Provider Host Name of Bitbucket Server.\nGitpod New Git Integration form\nCopy the Redirect URL from the form above.\nOpen your Bitbucket Server Administration settings in another browser tab, and create a new incoming link for an external application.\nBitbucket Server new OAuth2 application link\nConfigure the link with the required fields, including the redirect URL copied above, and choose &quot;Projects Admin&quot; permissions.\nBitbucket Server configure OAuth2 application link\nSaving the configuration opens a settings page where you can copy the OAuth Client ID and a Client secret.\nBitbucket Server new OAuth client ID and secret\nCopy the Client ID and Secret","metadata":{"source":"https://gitpod.io/docs/configure/authentication/bitbucket-server"}}],["55",{"pageContent":"into the corresponding fields in the new Gitpod integration form, and activate the integration.\nRefreshing the integration settings page should show a new Git provider connection to your Bitbucket Server in addition to the Git Integration registration below that.\nBitbucket Server integration and connection in Gitpod settings\nConnecting Gitpod accounts to Bitbucket Server\nOther Bitbucket Server users need to connect their own Gitpod account to their own Bitbucket Server account by starting a workspace.\nTo start a workspace, paste the URL of a Bitbucket Server repository into the New Workspace popup (CtrlCmd + O) in Gitpod, or prefix the repository URL as described in Getting started.\nOpen in Gitpod form\nThe first time you do this, you&#39;ll be prompted to authorize with your Bitbucket Server instance.\nPrompt to authorize with Bitbucket Server\nThe Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.\nOAuth confirmation from Bitbucket Server\nOnce confirmed, the connection will be saved, and the workspace should open. Subsequent workspaces with repositories from the same Bitbucket Server instance should open without","metadata":{"source":"https://gitpod.io/docs/configure/authentication/bitbucket-server"}}],["56",{"pageContent":"reconnecting.\nCreating a project in Gitpod\nTo create a new project with a Bitbucket Server repository in Gitpod, select your Bitbucket Server instance from the list of git providers.\nNew project with Bitbucket Server\nYou should see your own repositories and those for all projects to which you have access. Use the dropdown to switch between your personal account and other projects.\nNew project select Bitbucket Server repo\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.","metadata":{"source":"https://gitpod.io/docs/configure/authentication/bitbucket-server"}}],["57",{"pageContent":"Bitbucket\nGitpod works with any public or private repository on Bitbucket.\nTo start a workspace from a Bitbucket project, prefix the Bitbucket project URL with gitpod.io/# as described in Getting started or use the browser extension to add a convenient Gitpod button to every Bitbucket page.\nEnable Prebuilds\nAll prebuilds require a Gitpod project for the repository.\nTo enable prebuilt workspaces for your Bitbucket project, you need to grant the webhook permission in Gitpod&#39;s Integration Settings page. This allows Gitpod to install a webhook which creates a new prebuild for every push event.","metadata":{"source":"https://gitpod.io/docs/configure/authentication/bitbucket"}}],["58",{"pageContent":"GitHub Enterprise\nGitpod works with public, private, or internal repositories on your own instance of GitHub Enterprise (GHE). Setting this up requires 2 steps.\nA one-time registration of the GHE server with Gitpod.\nEach Gitpod user connects their account to GHE the first time they start a workspace.\nRegistering a GitHub Enterprise Server\nThe GHE Admin can register the GHE server in their own Gitpod account settings.\nStart by creating a New Integration and entering the Provider Host Name of GHE server.\nGitpod New Git Integration form\nCopy the Redirect URL from the form above.\nCreate a new OAuth application in your GHE developer settings, and fill in the Authorization callback URL with the copied value.\nGitHub Enterprise register new OAuth application form\nPopulate the remaining fields and register the application in GHE. This opens a settings page where you can copy the OAuth Client ID and a Client Secret.\nGitHub Enterprise new OAuth client ID and secret\nCopy the Client ID and Secret into the corresponding fields in Gitpod and activate the integration.\nConnecting Gitpod accounts to GHE\nGHE users connect their Gitpod account to their GHE account by starting a workspace.\nTo start a","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github-enterprise"}}],["59",{"pageContent":"workspace, paste the URL of a GHE repository into the New Workspace popup (CtrlCmd + O) in Gitpod, or prefix the repository URL as described in Getting started.\nOpen in Gitpod form\nThe first time you do this, you will be prompted to authorize with your GHE instance.\nPrompt to authorize with GitHub Enterprise\nThe GHE OAuth window will appear, showing the name of the registered Gitpod OAuth app.\nOAuth confirmation from GitHub Enterprise\nIf you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.\nPrivate repo OAuth authorization from GitHub Enterprise\nValidating your GHE connection with Gitpod\nYou should see the connection to your GHE instance, with your GHE account ID, in your Gitpod integration settings\nGitHub Enterprise connection in Gitpod integration settings\nIf necessary, you can modify your GHE OAuth permissions to allow private repository access using the context menu on the right.\nGitpod settings for GitHub integration permissions\nCreating a project in Gitpod\nTo create a new project with a GHE repository in Gitpod, select the your GHE instance from the list of git providers.\nNew project","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github-enterprise"}}],["60",{"pageContent":"with GitHub Enterprise\nYou should see your own repositories and those for all organizations to which you have access. Use the dropdown to switch between your personal account and other organization accounts. No additional GitHub app installation is required for each organization.\nNew project select GitHub Enterprise repo\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.\nNew project on internal GitHub Enterprise repository","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github-enterprise"}}],["61",{"pageContent":"GitHub\nGitpod works well with public or private repositories from github.com.\nThe first time you login to Gitpod with GitHub, you will be prompted to &quot;Authorize Gitpod&quot; to access your GitHub account. This creates a connection between Gitpod and your GitHub account, and installs an OAuth App in your GitHub settings.\nGitpod uses the name and email from your GitHub account ID to create a new Gitpod user account. This is sufficient to start a Gitpod workspace on a public repository.\nGitHub prompt for Gitpod OAuth App permissions with user:email scope\nStarting Workspaces\nTo start a new workspace after logging into Gitpod, use CtrlCmd + O or click on the New Workspace button in https://gitpod.io/workspaces. This will prompt for a repository URL, or suggest recent repositories opened with your account.\nYou can also start a Gitpod workspace using a GitHub repository URL. Simply point your browser to the repository URL prefixed with gitpod.io/# as described in Getting started.\nGranting additional GitHub OAuth permissions\nGitHub requires repo scope permissions to open a workspace on a private repository, or to push code changes from a workspace back to your repository.\nYou can grant","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github"}}],["62",{"pageContent":"these additional permissions for GitHub at https://gitpod.io/integrations using the context menu on the right.\nGitpod settings for GitHub integration permissions\nAuthorizing GitHub webhooks\nThe first time you create a new Gitpod project you will need to configure our GitHub App to watch your repositories and trigger prebuilds.\n“NOTE: Installing the GitHub App for webhooks is only required for github.com, not for GitHub Enterprise or other git providers.”\nGitpod new project prompt for GitHub App authorization\nThe App must be installed on every GitHub user or organization account with repositories used in a Gitpod project. This allows you to grant permissions for all repositories or select repo-by-repo.\nGitHub App repo authorization\nErrors with private repositories on GitHub orgs\nIf you encounter errors setting up a Gitpod project on a private repository in a GitHub org, you may need to approve the Gitpod OAuth app for 3rd party access to the org.\nIn https://github.com/settings/connections/applications/484069277e293e6d2a2a.\nLook for the org in question in the lower section of the page under &#39;Organization access&#39;.\nClick on the Grant button.\nFor more details, see","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github"}}],["63",{"pageContent":"Issue #8076.","metadata":{"source":"https://gitpod.io/docs/configure/authentication/github"}}],["64",{"pageContent":"GitLab\nGitpod works nicely with GitLab: You can start Gitpod workspaces directly from the web pages of your GitLab repositories, and you can configure Gitpod to automatically prebuild these workspaces such that you can start coding on any branch in no time.\nTo use Gitpod on GitLab repositories, you have to link your GitLab account to Gitpod. Gitpod redirects you to GitLab&#39;s authentication workflow when needed. Alternatively, you might want to connect your GitLab account manually.\nAll of this is already pre-configured for GitLab.com (the SaaS version), and can easily be set up for self-hosted GitLab installations.\nStarting Workspaces\nYou can start a Gitpod workspace directly from the web pages of a GitLab repository. Simply click on the dropdown arrow next to the Web IDE split button on the project or merge request page, and choose Gitpod. The Gitpod workspace will open in a new browser tab. The next time you visit a GitLab page, the last used action will be pre-selected.\nGitLab Integration\nTo launch new Gitpod workspaces for issues, branches, specific commits, etc. you can also prefix any GitLab URL with gitpod.io/# as described in the Getting started page, or use the browser extension to","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["65",{"pageContent":"add a convenient Gitpod button to every GitLab page.\nEnabling Prebuilds\nAll prebuilds require a Gitpod project for the repository.\nTo automatically create a prebuilt workspace for each commit, Gitpod needs access to install a webhook. To allow this, go to Gitpod&#39;s Integrations page, scroll to the &quot;Git Providers&quot; section, click on the three dot button that pops up when you hover over the &quot;GitLab&quot; entry. Then choose Edit Permissions from the popup menu.\nGitLab integration actions menu\nIn the &quot;Edit Permissions&quot; dialog, make sure that api is checked such that Gitpod is allowed to install the webhook.\nModal Edit Permissions of GitLab in the Gitpod settings\nConnecting Your GitLab Account\nTo use Gitpod on a GitLab repository, you have to connect your GitLab account with your Gitpod account. In the following, we assume that you already have a valid account on the GitLab instance you want to connect to.\nGitpod supports the following use cases:\nGitLabStarting Workspaces\nEnabling Prebuilds\nConnecting Your GitLab AccountConnecting Your GitLab.com Account\nConnecting Your Self-Hosted GitLab Account\nDisconnecting Your GitLab Account\n\nRegistering A","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["66",{"pageContent":"Self-Hosted GitLab Installation\n\nConnecting Your GitLab.com Account\nIf you have initially logged into Gitpod using GitLab, your Gitpod account is already connected to your GitLab.com account and you can skip this section.\nIf you have logged into Gitpod with a different provider, you can manually add your GitLab account as follows:\nOpen the integrations page. Scroll to the section about &quot;Git Providers&quot; and click on the three dot button that pops up when you hover over the GitLab item. Select Connect from the popup menu.\nGitLab integration connect menu item\nYou will be redirected to GitLab&#39;s login page. Log in with your username and password or choose one of the OAuth providers from the list.\n\nOnce logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click Authorize.\n\nGitLab: Authorize Gitpod\nYou&#39;ll be directed back to Gitpod&#39;s settings page. A green bullet left to GitLab signals you&#39;ve successfully linked your GitLab account with Gitpod.\nGitLab integration connected\nConnecting Your Self-Hosted GitLab Account\nA Self-Hosted GitLab installation has to be registered to Gitpod before","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["67",{"pageContent":"it can be used. Once that&#39;s done, you can link your GitLab account on that installation to GitPod using the following steps:\nMake sure you are logged into Gitpod.\nIn the same browser, open a new tab and navigate to a repository of the GitLab installation.\nStart a new Gitpod workspace on this repository.\nDisconnecting Your GitLab Account\nTo disconnect a GitLab account from your Gitpod account:\nOpen the integrations page. Scroll to the section about &quot;Git Providers&quot; and click on the three dot button that pops up when you hover over the item of the GitLab provider you want to disconnect. Select Disconnect from the popup menu.\nThis will only invalidate the current access token in Gitpod. To disable access for good you have to revoke the access to Gitpod on the GitLab side.\nRegistering A Self-Hosted GitLab Installation\nThe SaaS service GitLab.com is already pre-configured in Gitpod. But if you are using a Self-Hosted GitLab installation, you have to register it in Gitpod before it can be used.\n“Note that the registration has to be done by one Gitpod user only, and that the GitLab account of this user is automatically connected. All other users of the same GitLab installation should just","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["68",{"pageContent":"link to their GitLab accounts.”\nHere is how to register your Self-Hosted GitLab installation:\nIn your GitLab installation, enable the native Gitpod integration as described in the GitLab docs. This needs administrator privileges on the GitLab installation.\n\nHead over to the integrations page on Gitpod. Scroll to the section about Git Integrations and click on the &quot;New Integration&quot; button.\n\nGit Integrations section in the Gitpod settings\nIn the pop-up window, choose GitLab as the provider type and enter the URL of the GitLab installation you want to use.\nNew Git integration dialog\nThe next field in the form is the redirect URL that you need to register Gitpod on the GitLab side. Copy the redirect URL to your clipboard using the button on the right.\n\nGo to /profile/applications on your GitLab installation to create an OAuth app. Type in a name (e.g. &quot;Gitpod&quot;) and paste the redirect URL in the corresponding text area. Check the scopes api and read_user. Click the button Save Application below.\n\nCopy the Application ID and the Secret in the corresponding form fields (Client ID resp. Client Secret) of your Gitpod installation.\nPress Connect and go through the GitLab","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["69",{"pageContent":"authentication flow to connect your user account.","metadata":{"source":"https://gitpod.io/docs/configure/authentication/gitlab"}}],["70",{"pageContent":"Authentication\nGitpod comes with integrations for GitLab, GitHub, and Bitbucket projects. It also provides a browser extension or a browser bookmarklet for Chromium-based browsers (Chrome, Edge, Brave) and Firefox.\nyoutube: nXMlnMEP784\nFAQs\n&quot;Email address already used in another account&quot; when trying to login into Gitpod\nSend us a message through the contact form with your Gitpod account email. After you reach out, we will delete your account so that you can sign up again, which should resolve your issue.\nHow to get SCM API token from Gitpod&#39;s GitLab, GitHub or Bitbucket integration as environment variable\nRun gp init on your terminal or manually create a file called .gitpod.yml\nPut the following line in your .gitpod.yml:\nimage:\n  file: .gitpod.DockerfileCreate a file called .gitpod.Dockerfile and put the following content in it:\nFROM gitpod/workspace-full\n\nRUN file=\"$HOME/.bashrc.d/770-scm_token.sh\" \\\n    && printf '%s\\n' 'if [[ \"${GITPOD_WORKSPACE_CONTEXT_URL:-}\" == *gitlab* ]]; then : \"gitlab\"; else : \"github\"; fi; scm_name=\"$_\"' > \"${file}\" \\\n    && printf 'export SCM_TOKEN=\"$(%s)\"\\n' \"gp credential-helper get <<<host=\\${scm_name}.com | sed -n","metadata":{"source":"https://gitpod.io/docs/configure/authentication/index"}}],["71",{"pageContent":"'s/^password=//p'\" >> \"${file}\"Follow see in action\nNow you can use $SCM_TOKEN environment variable after you commit and create a new workspace, this variable will contain an API token based on the Git context (i.e. Gitlab/GitHub/Bitbucket)\nHow to use a private GitHub email or custom email for Git commits\nAt the variables page, create two variables[1] called:\nGIT_COMMITTER_EMAIL\nGIT_AUTHOR_EMAIL\nand set the custom email address as the value and */* as the scope.\nNow all of your new workspaces should use them for Git commits. If you have a workspace running, you can restart it or run eval &quot;$(gp env -e)&quot; in it.","metadata":{"source":"https://gitpod.io/docs/configure/authentication/index"}}],["72",{"pageContent":"Billing\nGitpod charges for usage based on how long workspaces run, and the resources consumed by different workspace classes. Metered usage also includes prebuilds.\nAs an individual user, you receive a free usage allowance so that you can try Gitpod without a billing account. A personal billing account is required for additional usage beyond that.\nOrganization billing accounts provide a way to pay for organization members&#39; usage when they run workspaces on organization projects.\nCredits\nGitpod usage is measured in credits.\nLarger workspace classes use credits at a faster rate. E.g. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\nYour invoice will show the total amount of credits consumed in a billing period.\nConfigure personal billing\nThe personal billing page is located in your account settings.\n“💡 If you do not see &quot;Billing&quot; in your settings, cancel your existing plan or organization plan first.”\nThe Gitpod Free plan comes with 500 free credits, renewed monthly. These credits can be used for all workspace classes. Unused credits expire at the end of each month.\nConfiguring a Personal billing plan in your user billing","metadata":{"source":"https://gitpod.io/docs/configure/billing/index"}}],["73",{"pageContent":"settings will increase your monthly credit allowance from 500 to 1000. Additional usage will be charged at the pay-as-you-go rate.\nConfigure Personal billing\nYou can add a payment method with credit card details in Euros or Dollars.\nAdd payment details\nOnce billing has been configured, use the &quot;Manage Plan&quot; button to modify your payment details or cancel.\nActive Personal billing\nIf you are a member of an organization with billing, you can select the organization to pay for all your personal usage under &quot;Default Billing Account&quot;.\nSelect default billing account\nConfigure organization billing\nOrganization owners can configure billing for an organization in their organization settings.\n“💡 You may need to cancel your existing Professional or Unleashed organization-billing plan first.”\nConfigure Team Billing\nOnce organization billing is configured, Gitpod will charge the organization billing account for usage by organization members, when they start workspaces on organization projects, and for prebuild usage on organization projects.\nActive Team billing\nConfigure a usage limit\nThe usage limit prevents workspaces from starting once the limit has","metadata":{"source":"https://gitpod.io/docs/configure/billing/index"}}],["74",{"pageContent":"been reached. It will not stop running workspaces.\nTo change the usage limit, look for &quot;Update limit&quot; in the BALANCE section of your personal or organization billing settings, after you have configured billing.\nActive Team billing\nView usage details\nYou can see the details of your personal usage when you click on &quot;View Usage →&quot; in your personal billing settings. Organization owners can view usage details for their organization.\nActive Team billing\nOld pricing plans\nUsers with old paid plans, may need to cancel those plans before configuring their personal or organization billing accounts.\nOrganization plans\nOrganization billing\nFAQs\nHow can I limit or optimize prebuild costs?\nThere are a few built-in Gitpod features that can optimize your prebuild costs, such as:\nSkip prebuilds every X commits and use last successful prebuild\n\nStop prebuilds for all branches, PRs and etc. when on GitHub. See this page. (might not be necessary)\n\nWith prebuilds enabled, does every push to my repository cost me credits?\nIt depends on how you configured prebuilds. Prebuilds run on headless Gitpod workspaces and the cost depends on how long they run when triggered.","metadata":{"source":"https://gitpod.io/docs/configure/billing/index"}}],["75",{"pageContent":"Organization billing\n“The plans below have been superseded by our new billing model.”\n“This page is for users who are looking to manage or cancel their existing organization billing plans.”\nOrganization billing allows you to pay for your whole organization with a single subscription. You can choose between the Organization Professional plan, or the Organization Unleashed plan.\nWith Organization billing, all plan seats will be managed automatically, by auto-subscribing new members, and unsubscribing members who leave.\nOrganization billing can be accessed under Organization Settings if you are an organization owner.\nTeam billing New\nOnce a plan is active, Organization billing will auto-subscribe new members, and the count will update automatically.\nLook for the green button to manage your payment details or to cancel your subscription.\nTeam billing New\nGood to know\nan organization can only have one active Organization billing plan.\nWith Organization billing, all organization members, including owners, are auto-subscribed to the plan.\nNew members are added using a shared invite URL which can be reset.\nWhen new members join in the middle of a billing period, you will be","metadata":{"source":"https://gitpod.io/docs/configure/billing/org-billing"}}],["76",{"pageContent":"billed pro-rata for the remaining fraction of the month.\nSee Organizations &amp; Projects to create a new Organization.","metadata":{"source":"https://gitpod.io/docs/configure/billing/org-billing"}}],["77",{"pageContent":"Organization plans\n“The organization plans below have been superseded by our new billing model.”\n“This page is for users who are looking to manage or cancel their existing organization plans.”\nOrganization plans allow you to pay for your whole organization with a single subscription.\nOrganization plans are accessed from gitpod.io/orgs/ in your user settings.\nYou can choose between the Organization Professional plan, or the Organization Unleashed plan, and you can specify how many seats you want for each organization. Each member of the Organization Plan will then be able to use Gitpod as if they had purchased their own Professional or Unleashed plan.\nNew Team Plan\nOnce the payment process is complete, you can manage organization members, add more organization seats, and also invite organization members using a unique public URL.\n\nOrganization Plan BillingManage Organization Plan Members\n\n\nTeam Plan BillingManage Team Plan Members\n\nYou can either directly assign a seat by entering your organization member&#39;s GitHub, GitLab, or Bitbucket username, or use the Invite Members link from the more actions button to get a shareable link. Send the link to your organization so they can","metadata":{"source":"https://gitpod.io/docs/configure/billing/org-plans"}}],["78",{"pageContent":"claim a seat.\n\nManage an organizationInvite Members\n\n\nNew TeamNew Team\n\nGood to know\nYou won&#39;t be assigned to a seat in your new organization plan when it is first created. Add yourself just like other members.\nIf you add seats in the middle of a monthly billing period, you will be charged for the whole period.","metadata":{"source":"https://gitpod.io/docs/configure/billing/org-plans"}}],["79",{"pageContent":"Organizations\nOrganizations are used to share Projects amongst organization members.\nThere are two roles within a Gitpod organization organization owners and organization members. Organization members and owners can view branches and prebuilds for the projects within an organization. Organization members can open new workspaces directly from a branch in the dashboard. Organization owners can manage other organization members, reset user invite URLs, and manage Organization billing.\nTo collaborate with others on projects you can create a Organization and invite others as organization members.\nView organizations\nTo view all your organizations, click on the scope selector on the left of the top bar.\nCreate an organization\nTo create a new organization:\nOn the top bar, click on the scope selector and select New Organization.\nNext, you will be asked for an organization name that will serve also as the organization slug.\nAdd members to an organization\nOnce you create an organization you can invite members by using the unique invite URL from the Members page within an organization.\nChange member permissions\nNew members will join with a Member role which you can later change if needed","metadata":{"source":"https://gitpod.io/docs/configure/orgs/index"}}],["80",{"pageContent":"from the Members list using the more actions button. See Roles below.\nRemove a member from an organization\nYou can remove an organization member form the Members list using the more actions button while hovering over the user entry.\nFilter members in an organization\nOn the Members page you can filter users by membership role using the filters above the Members list.\nLeaving an organization\nYou can leave an organization using the more actions button in the Members list while hovering over your user entry.\nRoles\n\nPermissionOwnerMember\n\n\nManage Organization MembersYesNo\n\nEdit Organization SettingsYesNo\n\nManage Organization BillingYesNo\n\nView Organization UsageYesNo\n\nEdit Project SettingsYesYes\n\nEdit Project VariablesYesYes\n\nInvite Organization MembersYesYes\n\nAdd ProjectsYesYes\n\nRemove ProjectsYesYes\n\nAdd ProjectsYesYes\n\nView BranchesYesYes\n\nView PrebuildsYesYes\n\nTrigger PrebuildsYesYes","metadata":{"source":"https://gitpod.io/docs/configure/orgs/index"}}],["81",{"pageContent":"Environment Variables\nYou can pass environment variables into your workspace and use them in your code as usual. Please refer to the documentation of your programming language of choice for details on that.\nyoutube: dehln1E8ylY\nDefault Environment Variables\nBelow are some environment variables which are set automatically by Gitpod and are guaranteed to exist:\nGITPOD_WORKSPACE_ID: The Universally Unique Identifier (UUID) associated with the workspace.\nGITPOD_WORKSPACE_URL: The unique URL of the workspace.\nGITPOD_REPO_ROOT: Path to the directory where your git repository was cloned inside the workspace.\n“Tip: Try running env | grep GITPOD_ on a workspace terminal to see all the Gitpod specific environment variables. These can be useful for scripting a dynamic workspace behavior.”\nReserved Prefix\nEnvironment variables beginning with the prefix GITPOD_ are reserved for internal use by Gitpod and are overridden on every workspace startup. This means that a user-defined variable set with the name GITPOD_FOOBAR will be ignored and not accessible in the workspace.\nUser-Specific Environment Variables\nGitpod supports encrypted, user-specific environment","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["82",{"pageContent":"variables.\nThey are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces.\nThe DOCKERD_ARGS environment variable can be used to specify additional arguments to the docker installation running in your workspace. Currently\nmapping a user in your container to the gitpod user in your workspace is supported. This helps if you are using an unprivileged user with your containers\n(e.g. user 1000 in a node image) but need to edit files with vscode that have been created within the container. The content of the environment variable\nshould look like this:\n{ \"remap-user\": \"1000\" }Ways of setting user-specific environment variables\nUsing the command line: gp env\nThe gp CLI prints and modifies the persistent environment variables associated with your user for the current repository.\nTo set the persistent environment variable foo to the value bar use:\ngp env foo=barBeware that this does not modify your current terminal session, but rather persists this variable for the next workspace on this repository.\ngp can only interact with the persistent environment variables for this repository, not the environment","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["83",{"pageContent":"variables of your terminal.\nIf you want to set that environment variable in your terminal, you can do so using -e:\neval $(gp env -e foo=bar)If you&#39;re using fish shell:\neval (gp env -e foo=bar)To update the current terminal session with the latest set of persistent environment variables, use:\neval $(gp env -e)If you&#39;re using fish shell:\neval (gp env -e)To delete a persistent environment variable use:\ngp env -u foo\n\n# And if you want to remove it from your shell session too:\nunset fooNote that you can delete/unset variables if their repository pattern matches the repository of this workspace exactly. I.e. you cannot\ndelete environment variables with a repository pattern of /foo, foo/ or /.\nUsage:\n  gp env [flags]\n\nFlags:\n  -e, --export   produce a script that can be eval'ed in Bash\n  -h, --help     help for env\n  -u, --unset    deletes/unsets persisted environment variablesUsing the account settings\nYou can also configure and view the persistent environment variables in your account settings.\nEnvironment Variables in Account Settings\nYou can add as many environment variables as you wish.\nThe repository pattern of each variable determines in what workspace it will be","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["84",{"pageContent":"available.\nRepository patterns follow the owner/repository pattern. You can use a wildcard on either of the two, e.g. gitpod-io/* would make that variable available in all repositories owned by gitpod-io.\nConversely */vscode would make that variable available on all repositories called vscode; this is especially useful for forks.\nSubsequently */* makes that variable available in every workspace.\n“Beware: while the variable values are stored encrypted, they are available as plain text inside a workspace. Be careful when sharing your live workspace or when using */* as repository pattern.”\nProject-Specific Environment Variables\nEnvironment variables which are defined in project settings will be visible in prebuilds, and optionally also in workspaces. This is useful for prebuilds to access restricted services.\nImportant notes:\nProject-Specific Environment Variables will take precedence over User-Specific Environment Variables\nThe gp env command is only linked with User-Specific Environment Variables but not Project-Specific Environment Variables. That means, if you set an environment variable with the gp env command, it will be saved in your account","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["85",{"pageContent":"settings.\n“Warning: Care should be taken with secrets. Allowing secrets to be accessed from workspaces will expose those secrets to anyone who can open the workspace.”\nTask terminal-specific Environment Variables\nYou can set environment variables for a Gitpod task terminal by setting the env property within the task definition in your .gitpod.yml. Please note that such environment variables will be limited to the task terminal and are not globally set across the workspace.\nUsing the env keyword\ntasks:\n  - name: Example of setting an environment variable for a task terminal\n    env:\n      PRINT_ME: \"Hello World!\"\n    command: echo \"$PRINT_ME\"Note: The values should be a static string or integer, you can&#39;t refer to an existing variable via env keyword.\nUsing the task SHELL\ntasks:\n  - name: Example of starting yarn with a custom environment variable set\n    command: |\n      # Example for referring to the existing system variables\n      export API_URL=\"$HOSTNAME\"\n\n      # Print out the environment variable\n      echo \"$API_URL\"\n\n      yarn start\n\n  - name: Example of updating PATH environment variable inside a task shell\n    command: |\n      # Download and install `fzf` binary to ~/.local/bin/\n      mkdir -p ~/.local/bin\n      curl -sL","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["86",{"pageContent":"\"https://github.com/junegunn/fzf/releases/download/0.35.1/fzf-0.35.1-linux_amd64.tar.gz\" | tar -C ~/.local/bin -xpz\n\n      # Update PATH variable\n      export PATH=\"$HOME/.local/bin:$PATH\"\n\n      # Now `fzf` can be called without full path from the task shell\n      ls / | fzfNote: You can use this method when you need to refer to other variables or want to use scripting to set them conditionally.\nSee .gitpod.yml for more details.\nProviding one-time environment variables via URL\n“❗️ This feature is great for setting one-time environment variables for dynamic workspace configurations or setups but is not appropriate for configuring sensitive information, such as passwords or long-lived API tokens. Gitpod and the Open Web Application Security Project recommends that you do not pass sensitive information through query strings. Refer to CWE-598 to learn more about this recommendation.”\nIn addition to user-specific environment variables, Gitpod also allows passing in variables through the gitpod.io/# URL.\nThe syntax for that is:\nhttps://gitpod.io/#var=value,var2=value2/https://github.com/my-org/repo-to-work-onThe values are URL encoded to allow any non-ascii characters in","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["87",{"pageContent":"values.\nIn case of a conflict, e.g. in the example above if the user already had a variable var2 set, the user&#39;s value would be used.\nExporting all the Gitpod environment variables that you created\nYou can run the following command in your Gitpod Workspace terminal to save your environment variables (which you have configured in Gitpod Environment Variables) in a different file (e.g.: gitpod.env):\ngp env > gitpod.env","metadata":{"source":"https://gitpod.io/docs/configure/projects/environment-variables"}}],["88",{"pageContent":"Incremental Prebuilds\nSimilar to last successful prebuild, incremental prebuilds leverage older prebuilds in order to create new prebuilds faster.\nEnable Incremental Prebuilds\nAn incremental prebuild is based on an older prebuild that was built for an older commit, in order to reuse pre-existing build artifacts. This is achieved by:\nLoading the older prebuild\nUpdating the source code to the latest commit\nRunning any before, prebuild, and init tasks again (incremental rebuild)Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant\nHow is a base prebuild selected?\nWhen incremental prebuilds are enabled for a project, and a new prebuild is being triggered, Gitpod will do the following:\nRetrieve the commit history of the current commit to be built (up to 100 ancestor commits)\nFor each ancestor commit, check if there exists a corresponding prebuild that can be used as a &quot;base&quot;:A suitable &quot;base prebuild&quot; must have been successful (i.e. failed, canceled, or timed out prebuilds are not reused)\nIt must be a recent, direct ancestor of the current commit (i.e. not a commit from a different unrelated branch)\nIt must be","metadata":{"source":"https://gitpod.io/docs/configure/projects/incremental-prebuilds"}}],["89",{"pageContent":"based on the same project configuration as the current commit (for example, if the Docker image or the init tasks have recently been changed, older prebuilds are no longer relevant or useful and cannot be used as a &quot;base&quot;)\n\nIf a suitable base prebuild is found, Gitpod will load it; update the checkout to the latest commit; and then re-run any before, prebuild and init task on top of itIf no suitable base prebuild is found, Gitpod will build the new prebuild from scratch (i.e. a non-incremental prebuild)\n\nWhen are incremental prebuilds useful?\nIncremental prebuilds can significantly speed up most of your prebuilds, especially if:\n(time_to_load_older_prebuild + incremental_rebuild_duration) < full_prebuild_durationTypically, enabling incremental prebuilds makes sense if:\nYour project&#39;s build system benefits from incremental rebuilds (i.e. rebuilds are significantly faster than your initial build)\nYour regular prebuilds take longer than 5 minutes (the longer they take, the bigger the potential speedup is)","metadata":{"source":"https://gitpod.io/docs/configure/projects/incremental-prebuilds"}}],["90",{"pageContent":"Projects\nProjects live under a Gitpod organization. They connect Gitpod to a git repository. A Gitpod project can only have one git repository, and a git repository can only belong to one project.\nA project is required in order to trigger prebuilds on a repository. Organization members use the project to configure and view prebuilds.\nWith organization billing, all project usage such as workspaces and prebuilds, may be billed to the organization.\nProjects have a static URL based on the organization and project name, for example:\nhttps://gitpod.io/t/&lt;team&gt;/&lt;project&gt;\nView projects\nThe Projects page for a organization shows a card for each project.\nCards show the name, repository URL, quick links to project branches and prebuilds, and the branch and timestamp of the latest prebuild.\nAdd a new project\nTo add a new project, click on New Project on the Projects page for the organization, and select a repository from the list.\nThe list will show repositories from one of your git providers. Select a different provider if necessary. You may also be prompted to configure our GitHub app, the first time a project is created for a GitHub account. The new project will be associated with the","metadata":{"source":"https://gitpod.io/docs/configure/projects/index"}}],["91",{"pageContent":"current organization selected in the dashboard.\nConfigure a project\nOrganization members can configure Prebuilds, and set the workspace class used for project workspaces, in project settings.\nProject Settings\nRemove a project\nYou can remove a project using the &quot;Remove project&quot; action from a project card.\nFAQs\nNew Project page is stuck at fetching repositories\nTo identify the problem: check browser console logs.\nPossible solution(s):\nTry to disconnect Git(Hub/Lab) or Bitbucket from https://gitpod.io/integrations, then reconnect.\nMake sure correct scopes are set for those Git integration providers as well.","metadata":{"source":"https://gitpod.io/docs/configure/projects/index"}}],["92",{"pageContent":"Last Successful Prebuild\n“{title} is currently in Alpha · Send feedback.”\nSimilar to incremental prebuilds, last successful prebuild leverages older prebuilds in order to create new workspaces faster.\nUse Last Successful Prebuild\nWhen enabled, new workspaces may start based on a prebuild that was built for an older commit, in order to reuse any existing build artifacts. This is achieved by:\nLoading the older prebuild\nUpdating the source code to the latest commit\nRunning any before, prebuild, and init tasks again interactively (incremental rebuild)Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant\nThus, your new workspace will both:\nload quickly: no waiting, even if a newer prebuild is still being computed (i.e. you&#39;ll never see the &quot;Prebuild in Progress&quot; screen again ⏩)\nand it will be ready quickly: your IDE Terminal will run either no build at all (if none is needed), or just a quick incremental rebuild (faster than a full build ♻️)\nSkip Prebuilds\nWhen Gitpod can leverage older prebuilds to start your workspaces faster, you no longer necessarily need to create a new prebuild for every commit that is pushed to your","metadata":{"source":"https://gitpod.io/docs/configure/projects/last-successful-prebuild"}}],["93",{"pageContent":"repository.\nThis is where the ability to skip prebuilds becomes helpful: For example, you could decide to only trigger a new prebuild every 5 commits, or every 10 commits.\nThe ideal number depends on your project. For example:\nIf you push new commits to your repository very frequently, you may want a higher number (especially if your prebuilds also take a long time to build)\nOn the other hand, if your prebuilds finish quickly, and you typically don&#39;t push new commits very often, it may be fine to not skip any prebuild (i.e. skip prebuilds = 0)\nPlease feel free to adjust and experiment with this value.","metadata":{"source":"https://gitpod.io/docs/configure/projects/last-successful-prebuild"}}],["94",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Learn how to configure prebuilds for your Gitpod projects.&quot;,\n    title: &quot;Gitpod Prebuilds&quot;,\n    keywords: &quot;prebuilds, Gitpod, faster workspace start, faster workspace init, faster workspace creation&quot;,\n  }}\n/&gt;\nPrebuilds\nPrebuilds reduce wait time, by installing dependencies or running builds before you start a new workspace.\nyoutube: DwkoOz1GSVg\n.gitpod.yml\nPrebuilds are typically configured using an init task in your gitpod.yml.\nIn the example below, the init task installs npm packages into the node_modules directory of the workspace. The command task runs &#39;npm start&#39; on every workspace startup.\ntasks:\n  - init: |\n      npm install\n  - command: |\n      npm startEnable prebuilds on your repository project\nUse the following steps to enable prebuilds on your repository:\nCreate a project for the repository.\nDefine the prebuild steps in an init task in your gitpod.yml.\nSince prebuilds are included in all our metered pay-as-you-go plans, configuring prebuild settings in your project should help with managing prebuild usage.\nProjects and prebuilds\nFor prebuilds to run automatically, you also need a","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["95",{"pageContent":"project for your repository.\nTo create a new project:\nClick on New Project in the Projects page of one your organizations.\n\nIf necessary, you will be prompted for additional authorization to install and configure the Gitpod GitHub app,\nso that Gitpod can watch your repositories and trigger prebuilds.\n\nSelect the repository for your project.\n\nView prebuilds\nYou can find a list of recent prebuilds under the Prebuilds tab for your project.\nRecent prebuilds list for an example project\nFrom here, you may also trigger a new prebuild based on the last commit in the project. Selecting a prebuild will open the details page showing the current status as well as additional logs. From the prebuild details page, you may rerun the selected prebuild or start a new workspace based on it.\nRerun a prebuild\nPrebuilds can be triggered again which can be particularly useful when debugging an unexpected failure.\nTo rerun a prebuild:\nNavigate to your project and select the Prebuilds tab.\nSelect the prebuild you wish to rerun.\nSelect Rerun Prebuild.\nStart workspace based on existing prebuild\nTo start a workspace using an existing prebuild:\nNavigate to your project and select the Prebuilds tab.\nSelect the","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["96",{"pageContent":"prebuild you wish to start a workspace on top of.\nSelect New Workspace (with this prebuild).\nPrebuilds are shared\nGitpod can trigger a prebuild whenever there is a commit to a repository. That prebuild will then be used for all new workspaces opened on that branch. This is ideal for working together on branches for testing or code reviews.\nPrebuild users will see a message in their workspace terminal like this:\n🤙 This task ran as a workspace prebuildWorkspace directory only\nPrebuilds save only the workspace directory. Other directories like the home directory are not saved by prebuilds.\nTo use global installs like &#39;npm install -g&#39;, we suggest using a custom Dockerfile or a before task, which runs before the init task, and runs again before the command task.\nProject environment variables\nEnvironment variables which are defined in project settings will be visible in prebuilds. This is useful for prebuilds to access restricted services.\nWARNING\nCare should be taken with secrets in prebuilds. Do not save secrets in a way which could leak into workspaces. This especially true for public repositories.\nConfiguring prebuilds manually\nAll prebuilds require a Gitpod project for the","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["97",{"pageContent":"repository.\nFor a GitLab or Bitbucket repository, allow Gitpod to install repository webhooks, by granting api permissions in your git provider integrations\nFor GitLab, if you want to trigger new Gitpod prebuilds for specific branches only, you can configure this in your GitLab project settings.\nBy default, Gitpod prepares prebuilt workspaces for all changes on the default branch and for pull/merge requests coming from the same repository.\n“Note: Prebuilds are executed as the user who enabled them. This means that if you want to use\nprebuilds on a private repository, you must give Gitpod access to private repositories.”\nPrebuilds are configured in your repository&#39;s .gitpod.yml file with the following start tasks:\nbefore\ninit\nNote the absence of the command task. Since this task may potentially run indefinitely, e.g. if you start a dev server, Gitpod does not execute the command task during prebuilds.\nPrebuilds have a timeout of 1 hour. If your before and init tasks combined exceed 1 hour, your prebuild will fail. Subscribe to this issue for updates when this limit will be lifted.\nEach prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["98",{"pageContent":"prebuilds.\nIncremental Prebuilds use an earlier, successful Prebuild as the base. This can reduce the duration of your Prebuilds significantly, especially if they normally take more than ten minutes to complete. Incremental Prebuilds can be found under the project settings in your Gitpod dashboard.\nGitHub-specific configuration\nThe github prebuilds section in the .gitpod.yml file configures when prebuilds are run.\nBy default, prebuilds are run on push to the default branch and for each pull request coming from the same repository.\nAdditionally, you can enable prebuilds for all branches (branches) and for pull requests from forks (pullRequestsFromForks).\n“Note: The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.”\ngithub:\n  prebuilds:\n    # enable for the default branch (defaults to true)\n    master: true\n    # enable for all branches in this repo (defaults to false)\n    branches: false\n    # enable for pull requests coming from this repo (defaults to true)\n    pullRequests: true\n    # enable for pull requests coming from forks (defaults to false)\n    pullRequestsFromForks: false\n    # add a check to pull requests (defaults to true)","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["99",{"pageContent":"addCheck: true\n    # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)\n    addComment: false\n    # add a \"Review in Gitpod\" button to the pull request's description (defaults to false)\n    addBadge: falseAdditional GitHub integration\nOnce the GitHub app is installed, Gitpod can add helpful annotations to your pull requests.\nChecks\nBy default, Gitpod registers itself as a check to pull requests - much like a continuous integration system would do.\nThe default behavior, however, would not make the checks fail when the prebuild failed.\nThis can be enabled with the following snippet:\ngithub:\n  prebuilds:\n    addCheck: prevent-merge-on-errorYou can disable this behaviour in the .gitpod.yml file in your default branch:\ngithub:\n  prebuilds:\n    addCheck: falseComment\nGitpod can add a comment with an &quot;Open in Gitpod&quot; button to your pull requests.\nYou can enable this behaviour in the .gitpod.yml file in your default branch:\ngithub:\n  prebuilds:\n    addComment: trueBadge\nInstead of adding a comment, Gitpod can also modify the description of a pull request to add the &quot;Open in Gitpod&quot; button.\nThis approach produces fewer GitHub notifications, but can also","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["100",{"pageContent":"create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\nYou can enable this behaviour in the .gitpod.yml file in your default branch:\ngithub:\n  prebuilds:\n    addBadge: trueThe addComment and addBadge behaviours are not mutually exclusive (i.e. enabling one does not disable the other).\nIf you don&#39;t want the comments to be added, disable them using addComment: false.\nUser specific environment variables in prebuilds\nIt is not necessarily best practice to have user specific environment variables in a prebuild init block, but sometimes there are build time requirements that mean certain tokens need setting or files need creating. Environment variables defined within your Gitpod Variables preferences are not imported by default, but they can be accessed with the following command within a before or init block:\ntasks:\n  - init: |\n      eval $(command gp env -e)\n      echo \"Hello ${MY_VAR}\"After that, the available environment variables will be installed into the rest of you shell script and can be accessed normally.","metadata":{"source":"https://gitpod.io/docs/configure/projects/prebuilds"}}],["101",{"pageContent":"Access Tokens\n“Access Tokens are currently in Beta · Send feedback.”\nAccess Tokens are secrets that allow you to interact with Gitpod through Gitpod APIs. When you use an Access Token, all actions performed with the token assume the same level of authorization of the Access Token user.\nCreate Access Token\nPermissions (Scopes)\nEach Access Token either has:\nNo Access.\nFull Access to Resources and APIs which the token owner also has access to.\nBy default, an Access Token has No Access. You need to explicitly select Full Access to succesfully authorize.\nIn the future, we will expand Access Tokens with fine grained permissions.\nExpiration\nAll Access Tokens have an expiration time. When a token expires, requests made with the token will fail with Unathorized. When a token expires, you can regenerate it.\nManaging Access Tokens\nListing Access Tokens\nYou can list your Access Tokens in your user Settings, or by going to gitpod.io/tokens.\nList Access Tokens\nCreating an Access Token\nYou can create an Access Token by navigating to gitpod.io/tokens or through Settings &gt; Access Tokens. Clicking New Access Token will prompt you to specify details of the token.\nYour access tokens will","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/access-tokens"}}],["102",{"pageContent":"automatically expire after the specified duration.\nOnce you create an Access Token, it will be shown to you once. Make sure you store it in a secure place, you will not be able to retrieve it again.\nUpdating an Access Token\nAccess Token can be updated. You can update the following properties on a token:\nName\nPermission scopes\nWhen you update a token, the token secret remains unaffected and you can continue to use it, until it expires.\nRegenerating Access Tokens\nAccess Token can be regenerated. Regenerating a token will:\nCreate a new token secret, which you&#39;ll need to store in a secure place and replace your old one.\nThe new token will have a new expiration time.\nThe old token will no longer be valid and will receive Unathorized when interacting with APIs.\nDeleting Access Tokens\nPersonal Access token can be deleted. Once deleted, the token is no longer valid for interaction with APIs.","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/access-tokens"}}],["103",{"pageContent":"Browser Bookmarklet\nCreating a workspace is as easy as prefixing any GitHub URL with gitpod.io/#.\nFor convenience, we developed a Gitpod browser bookmarklet as an alternative to installing our browser extension that does the\nprefixing for you - as simple as that.\nDrag the following image to your bookmark bar.\nOpen in Gitpod\nSelect all of the code below and then copy it to your clipboard.\njavascript: (() => {\n  \"use strict\";\n  (function () {\n    for (\n      var t = document.getElementsByTagName(\"meta\"), n = 0;\n      n < t.length;\n      n++\n    ) {\n      var o = t[n];\n      if (o.content.toLowerCase().includes(\"gitlab\")) return !0;\n      if (\"hostname\" === o.name && o.content.includes(\"github\")) return !0;\n      if (\n        \"application-name\" === o.name &&\n        o.content.toLowerCase().includes(\"bitbucket\")\n      )\n        return !0;\n    }\n    return !1;\n  })() &&\n    window.open(\n      (\"https://gitpod.io\",\n      \"https://gitpod.io/#\" +\n        (window.location.protocol + \"//\" + window.location.host) +\n        window.location.pathname)\n    );\n})();Right-click edit the bookmark and replace the contents of the URL field with the code that is in your clipboard:\nBrowser Extension\nDone! Next time you are viewing a repository on GitHub, GitLab or Bitbucket press the","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-bookmarklet"}}],["104",{"pageContent":"bookmarklet to open the repository in Gitpod.\nUse with Gitpod Self-Hosted\nIf you are using Gitpod Self-Hosted you can still use the browser bookmarklet by configuring it with your self-hosted URL by replacing the gitpod.io URL with your self-hosted URL in the bookmarklet code.\nwindow.open((\"https://gitpod.io\",\"https://gitpod.io/#Source Code\nGitpod&#39;s browser bookmarklet is open source. You can check out its source code, or even open it in Gitpod:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-bookmarklet"}}],["105",{"pageContent":"Browser Extension\nCreating a workspace is as easy as prefixing any GitHub URL with gitpod.io/#.\nFor convenience, we developed a Gitpod browser extension. It adds a button to GitHub, GitLab or Bitbucket that does the\nprefixing for you - as simple as that.\nBrowser Extension\nWe provide the extension for:\nChrome - also works for Edge, Brave and other Chromium-based browsers.\nFirefox\nAccess the extension settings\nRight-click on the Gitpod extension icon.\nSelect Options for chrome based browsers. For Firefox, select Manage Extension and then Preferences.\nUse a custom Gitpod instance URL\nIf you are using custom Gitpod instance (e.g. dedicated) you can still use the browser extension by configuring it with your instance URL\nAfter you have installed the extension go to the options panel and enter your custom Gitpod instance URL.\nOpen repositories with . (dot) keybind\nToggle on the Enable . keybind to open repositories in Gitpod option in the Gitpod extension preferences/options. After doing this, whenever you hit . on GitHub or GitLab, the current repository will open in Gitpod.\nSource Code\nGitpod&#39;s browser extension is open source. You can check out its source code, or even open it in","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-extension"}}],["106",{"pageContent":"Gitpod:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-extension"}}],["107",{"pageContent":"Browser Settings\nFor the best experience when working with Gitpod, we recommend you whitelist the .gitpod.io domain in your browser for the following permissions:\nPaste content from your clipboard to a Gitpod workspace\nPop-ups, to preview your dev server in a new tab\nEach browser handles this slightly differently:\nChrome\nEdge\nBrave\nFirefox\nSafari\nChrome\nClipboard\nNavigate to the Clipboard site permissions at chrome://settings/content/clipboard.\nTo the right of the &quot;Allowed to see your clipboard&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nPop-ups\nNavigate to the Pop-ups site permissions at chrome://settings/content/popups.\nTo the right of the &quot;Allowed to send pop-ups and use redirects&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nEdge\nClipboard\nNavigate to the Clipboard site permissions at edge://settings/content/clipboard.\nTo the right of the &quot;Allow&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nPop-ups\nNavigate to the","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-settings"}}],["108",{"pageContent":"Pop-ups site permissions at edge://settings/content/popups.\nTo the right of the &quot;All&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nBrave\nClipboard\nNavigate to the Clipboard site permissions at brave://settings/content/clipboard.\nTo the right of the &quot;Allowed to see your clipboard&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nPop-ups\nNavigate to the Pop-ups site permissions at brave://settings/content/popups.\nTo the right of the &quot;Allowed to send pop-ups and use redirects&quot; heading, click the &quot;Add&quot; button.\nPaste [*.]gitpod.io in the Site field and click &quot;Add&quot;.\nFirefox\nClipboard\nIt works by default.\nPop-ups\nNavigate to the Pop-ups site permissions at about:preferences#privacy.\nTo the right of the &quot;Block pop-up windows&quot; checkbox, click the &quot;Exceptions&quot; button.\nPaste gitpod.io in the Address of website field and click &quot;Allow&quot;.\nClick &quot;Save Changes&quot;.\nSafari\nClipboard\nIt works by default.\nPop-ups\n🤷‍♂️ We can&#39;t find a","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-settings"}}],["109",{"pageContent":"solution to whitelist all Gitpod workspaces. If we missed anything, please do let us know through the feedback widget below 🙏.","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/browser-settings"}}],["110",{"pageContent":"Dotfiles\nDotfiles are a way to customize your developer environment according to your personal needs.\nTo configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a dotfiles repository in your user preferences.\nyoutube: 00dif9QWXNU\nCustom installation script\nGitpod will recognize and run one of the following install scripts from your dotfiles repository.\ninstall.sh\ninstall\nbootstrap.sh\nbootstrap\nscript/bootstrap\nsetup.sh\nsetup\nscript/setup\nNote: Your installation script will be terminated if it exceeds 120 seconds.\nMake sure to make your installation script executable with chmod 755 &lt;install-script-name&gt;.sh before committing and pushing to your dotfiles repository.\nIf there is no install script, your dotfiles will be symlinked into /home/gitpod.\nExample\n“You can refer this demo-dotfiles template to bring your dotfiles to Gitpod.”\nThe example below has just one dotfile called .bash_aliases. If this file is present in a workspace home directory, it will be found by the &#39;.bashrc&#39; startup script in the Gitpod default image, so no additional install script is required.\n.bash_aliases\necho Hello Gitpod\necho Here is my","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/dotfiles"}}],["111",{"pageContent":".bash_aliases dotfile\n\nalias gitsha='git rev-parse HEAD'Troubleshooting\nThe dotfiles repository installation logs are saved to /home/gitpod/.dotfiles.log and can be viewed via\ncat /home/gitpod/.dotfiles.logFAQs\nHow to debug or test dotfiles changes inside an existing workspace without creating a new one each time?\nIf you want to quickly test out dotfiles inside an existing workspace created from your dotfiles repository, you can run the below command snippet in your terminal as a workaround:\ngitpod_evars=\"${!GITPOD_*}\" gp_evars=\"${!GP_*}\"; for k in ${gitpod_evars:-} ${gp_evars:-}; do dargs+=(-e \"${k}\"); done; docker run \"${dargs[@]}\" --net=host --rm -v $PWD:/home/gitpod/.dotfiles -v /workspace:/workspace -v /ide:/ide -v /usr/bin/gp:/usr/bin/gp:ro -v /.supervisor:/.supervisor -v /var/run/docker.sock:/var/run/docker.sock --privileged -it gitpod/workspace-full bash -c 'trap \"echo -e \\\"=== Run \\033[1;32mexit\\033[0m command to leave debug workspace\\\"; exec bash -li\" EXIT ERR; echo \"PROMPT_COMMAND=\\\"echo -n \\\\\\\"[debug-workspace] \\\\\\\"; \\$PROMPT_COMMAND\\\"\" >> $HOME/.bashrc; eval \"$(gp env -e)\"; dot_path=\"${HOME}/.dotfiles\"; for s in install","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/dotfiles"}}],["112",{"pageContent":"setup bootstrap; do if p=\"${dot_path}/${s}\" && test -x \"${p}\" || p=\"${p}.sh\" && test -x \"${p}\"; then set +m; \"$p\"; set -m; exit; fi; done; while read -r file; do rf_path=\"${file#\"${dot_path}\"/}\"; target_file=\"${HOME}/${rf_path}\"; target_dir=\"${target_file%/*}\"; if test ! -d \"$target_dir\"; then mkdir -p \"$target_dir\"; fi; ln -sf \"$file\" \"$target_file\"; done < <(find \"${dot_path}\" -type f);'This will simulate a fake minimal workspace inside your existing Gitpod workspace using docker, where your dotfiles will be installed so you can easily test.\nFor convenience, you can create a file called debug.sh in your dotfiles repository and paste the snippet there. You could then run bash debug.sh to use it.\nHow to install symlinks from dotfiles when using a custom installation script?\nWhen you commit a custom script such as install.sh in your dotfiles repository, Gitpod will no longer auto symlink your dotfiles under $HOME for you. It is by design so that you can have full control of how your dotfiles gets installed. An example of setting up a symlinking step is described below:\nCreate a directory called home_files inside your dotfiles repository. You can place your .dotfiles in the home_files","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/dotfiles"}}],["113",{"pageContent":"directory, that means you could put files like .zshrc, .tmux.conf, .config/nvim/ and etc. in there.\nIn your custom installation script (e.g. install.sh), use/append the below snippet:\ncurrent_dir=\"$(cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd)\"\ndotfiles_source=\"${current_dir}/home_files\"\n\nwhile read -r file; do\n\n    relative_file_path=\"${file#\"${dotfiles_source}\"/}\"\n    target_file=\"${HOME}/${relative_file_path}\"\n    target_dir=\"${target_file%/*}\"\n\n    if test ! -d \"${target_dir}\"; then\n        mkdir -p \"${target_dir}\"\n    fi\n\n    printf 'Installing dotfiles symlink %s\\n' \"${target_file}\"\n    ln -sf \"${file}\" \"${target_file}\"\n\ndone < <(find \"${dotfiles_source}\" -type f)It it possible to cache the dotfiles installation?\nIf your dotfiles installation relies on some heavy dependencies, that can take some time to install by nature.\nSo, everytime you start a workspace, you may have to wait for the dotfiles installation to complete before you can enter the workspace.\nFor some cases, you can start the commands in background from your install.sh, by adding &amp; disown at the end of a command:\nsudo apt install qemu-user-static & disownThis is a good workaround, so","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/dotfiles"}}],["114",{"pageContent":"your workspace can start early and the long-running commands from your dotfiles installation script can happen in parallel.\nBut it may not work if you are installing a SHELL (e.g. zsh) or a dependency of something else that has to start before your dotfiles can get installed.\nSee #7592 for more info, please upvote and share your feedback on this issue.","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/dotfiles"}}],["115",{"pageContent":"User settings\nUser settings allow you to customize your own personal Gitpod experience.\nBrowser Extension\nBrowser Settings\nBrowser Bookmarklet\nDotfiles\nSSH\nAccess Tokens","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/index"}}],["116",{"pageContent":"SSH\nSecure Shell Protocol (SSH) is the basis for connecting to your Gitpod workspace when using VS Code Desktop, JetBrains Gateway, or accessing via the command-line from a local machine.\nSee command-line editors &amp; IDEs documentation for more.\nManage your SSH Keys\nInstalling a supported SSH client\nHow to install a local SSH client depending on your operating system.\n\nOSInstructions\n\n\nWindows 10 1803+ / Server 2016/2019 1803+Install the Windows OpenSSH Client.\n\nEarlier WindowsInstall Git for Windows.\n\nmacOSComes pre-installed.\n\nDebian / Ubuntu / MintRun sudo apt-get install openssh-client\n\nRHEL / Fedora / CentOSRun sudo yum install openssh-clients\n\nArch / ManjaroComes pre-installed.\n\n“❗️ PuTTY for Windows is not a supported client”\nCreate an SSH key\nCheck to see if you already have an SSH key on your local machine. The key is typically located at ~/.ssh/id_ed25519.pub on macOS / Linux, and the .ssh directory in your user profile folder on Windows (for example C:\\Users\\your-user\\.ssh\\id_ed25519.pub).\nIf you do not have a key, run the following command in a local terminal / PowerShell to generate an SSH key pair:\nssh-keygen -t ed25519You will then be prompted to enter a","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/ssh"}}],["117",{"pageContent":"secure passphrase, but you can leave that blank. You should now have a id_ed25519.pub file which contains your new public SSH key.\n“Note: If you are using a legacy system that doesn&#39;t support the Ed25519 algorithm, you can use rsa instead: ssh-keygen -t rsa -b 4096”\n“Tip: Don&#39;t have ssh-keygen? Install a supported SSH client.”\nSSH file and folder permissions\nmacOS / Linux:\nOn your local machine, make sure the following permissions are set:\n\nFolder / FilePermissions\n\n\n.ssh in your user folderchmod 700 ~/.ssh\n\n.ssh/config in your user folderchmod 600 ~/.ssh/config\n\n.ssh/id_ed25519.pub in your user folderchmod 600 ~/.ssh/id_ed25519.pub\n\nAny other key filechmod 600 /path/to/key/file\n\nWindows:\nThe specific expected permissions can vary depending on the exact SSH implementation you are using. We recommend using the out of box Windows 10 OpenSSH Client.\nIn this case, make sure that all of the files in the .ssh folder for your remote user on the SSH host is owned by you and no other user has permissions to access it. See the Windows OpenSSH wiki for details.\nFor all other clients, consult your client&#39;s documentation for what the implementation expects.\nUpload an SSH key to","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/ssh"}}],["118",{"pageContent":"Gitpod\nOnce you&#39;ve created an SSH key pair, you can upload your public SSH key to Gitpod, by navigating to gitpod.io/keys where you can upload one or more public SSH keys.\nSSH page of the Gitpod dashboard\nSSH page of the Gitpod dashboard\nPaste your public key, and give your key a memorable title so that you can remember the name of the public key later if you choose to add multiple keys, e.g. &quot;Gitpod Bastion Host SSH Key&quot;\nAdding an SSH Key to Gitpod\nAdding an SSH Key to Gitpod\nEdit an SSH key in Gitpod\nGitpod doesn&#39;t support editing an SSH key.\nTo update an SSH key, delete the key and re-upload the SSH key to Gitpod.\nDelete an SSH key from Gitpod\nTo delete an SSH key, click the kebab menu to the right of the SSH key in the dashboard and select &quot;delete&quot;.\nDeleting an SSH key from Gitpod\nDeleting an SSH key from Gitpod\nSSH Gateway\nSSH Gateway facilitates connection via SSH for direct SSH access using uploaded public keys, and using the workspace owner token. Both the VS Code Desktop and JetBrains integrations use SSH Gateway to connect to Gitpod workspaces.\nWhat is SSH Gateway?\nSSH Gateway is an intermediary service within Gitpod that proxies incoming SSH requests to the","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/ssh"}}],["119",{"pageContent":"appropriate running workspaces.\nSSH Gateway architecture in Gitpod\nSSH Gateway architecture in Gitpod\nSSH Gateway in Self-Hosted\nIf you are running a Self-Hosted Gitpod installation, you will need to ensure that:\nThe installation has the SSH Gateway component configured and deployed\nYour networking and firewalls are configured to allow SSH traffic via port 22.\nSee the Self-Hosted Reference Architectures for more.\nTroubleshooting\nVS Code Desktop and SSH explained blog has a bunch of good troubleshooting notes, you may check them out.\nunix_listener: path &quot;/somewhere/xyz&quot; too long for Unix domain socket\nOpen your SSH config file in a text editor. (i.e. ~/.ssh/config or /etc/ssh/ssh_config[1])\nAppend the following to it:\nHost *.gitpod.io\n     ControlPath /tmp/%r-gitpodSave the file.\nNow try connecting via SSH or VSCode-Desktop again.","metadata":{"source":"https://gitpod.io/docs/configure/user-settings/ssh"}}],["120",{"pageContent":"Collaboration &amp; Sharing of Workspaces\nThere are currently two ways to share a Gitpod workspace, either by creating a workspace snapshot, a &quot;point in time&quot; capture of a workspace state that can be then opened by another user. Or, by sharing a running workspace which shares access to a single running workspace to multiple users.\nyoutube: HcKlXfKpolM\nWorkspace Snapshots\nSnapshotting a workspace is useful when you want to create reproducible workspace state for reporting support issues, or when giving training, or presentations. You can create up to three snapshots from any workspace.\nYou can create a snapshot URL of your workspace to share your workspace files with others. Following a Gitpod snapshot URL starts a new workspace, but under the account of the user who followed that original snapshot URL.\nThere are a few important things to note about workspace snapshots:\nSnapshots behave like workspace restarts - All workspace state, including files changed since the original workspace start are preserved in a snapshot. Any tasks or processes typically launched via a workspace start will not run for a workspace snapshot.\n\nAccess to secret information - Snapshotted workspaces","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/collaboration"}}],["121",{"pageContent":"do not grant access to Gitpod environment variables, Gitpod authentication or Git credentials within a snapshot. However, you should use caution that you did not store any secret or private information in any files of a workspace snapshot before generating a snapshot URL.\n\nDeleting and managing snapshots - If you want to remove any created snapshot URLs, deleting the workspace directly removes any created snapshot URLs associated with that workspace.\n\nUsers must have repository access - Each workspace snapshot creates a new unique URL. Access to a snapshot is based on the access rules on the repository the workspace is based on. This means snapshots based on private repositories can only be opened by those with access to the repository. Public repository snapshots can be accessed without authentication.\n\n“Note: Caution should always be taken when sharing potentially sensitive information, including Gitpod workspace snapshots. If you are concerned you have accidentally shared sensitive information, we suggest you follow best practices such as immediately rotating credentials and adhere to your typical security response process.”\nHow To Take a Snapshot URL\nTo create a snapshot, run","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/collaboration"}}],["122",{"pageContent":"&quot;Gitpod: Share Workspace Snapshot&quot; from the Backend Control Center, or from the JetBrains IDE search. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\nTo create a snapshot, run &quot;Gitpod: Share Workspace Snapshot&quot; from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\nTo create a snapshot, run &quot;Gitpod: Share Workspace Snapshot&quot; from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\nYou can run `gp snapshot` from any workspace to generate a snapshot URL.Sharing Running Workspaces\nSharing running workspaces makes it possible to quickly look at a workspace together with a (remote) colleague. It is similar to collaborating on Google Docs, in that you can see who is online and look at the same code and processes.\nTo share your workspace, navigate to the workspaces page at https://gitpod.io/workspaces. From there:\nMove your mouse over the","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/collaboration"}}],["123",{"pageContent":"workspace you want to share (change the filter to All if you don&#39;t see your workspace).\nClick the three dots menu to the right of the highlighted workspace.\nClick Share\nThis marks your workspace as shared. When you open it, you can copy &amp; share its URL.\n“Note: You can join shared workspaces only by using VS Code Browser. If you prefer to use another editor, please consider using external collaboration plugins.”\n“Security note:\nBeware, anybody with this URL and a Gitpod account will be able to access the workspace as long as\nit is shared and running.\nEvery action involving Git in a shared workspace happens on behalf of the workspace owner&#39;s account without further authorization. This includes access to secrets used in a shared workspace.\nIt is highly recommended to give workspace URLs only to trusted users and unshare workspaces as soon as sharing them is no longer necessary.\nA running Gitpod workspace really is your personal machine.\nAt present, this feature cannot be disabled. If this is something you are interested in, please let us know in this issue.”\nExternal Collaboration Plugins\nWith Gitpod you can also use the following third-party integrations for real-time","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/collaboration"}}],["124",{"pageContent":"collaboration:\nCode Together - Works on VS Code Desktop, VS Code Browser, and via JetBrains or Eclipse.\nGitLive - Works on VS Code Desktop, VS Code Browser, and via JetBrains.\nDuckly - Works on VS Code Desktop and VS Code Browser.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/collaboration"}}],["125",{"pageContent":"Workspaces\nWorkspaces are the developer environments where you code in Gitpod.\nWorkspaces can be created on their own, or as part of a Project.\nWorkspace Lifecycle\nWorkspace Image\nTasks\nPorts\nCollaboration\nMulti-repo\nWorkspace Classes","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/index"}}],["126",{"pageContent":"Multi-repo\n“{title} is currently in Beta · Send feedback.”\nIf your software project is comprised of multiple source control repositories it is possible to configure Gitpod to clone these additional repositories through the configuration keys of additionalRepositories and mainConfiguration in the .gitpod.yml file which removes the need to run multiple workspaces, and makes it easier to configure services which need to be aware of each other.\nCloning additional repositories\nThe additionalRepositories key is an array of repositories which contains two properties which define the source control url to clone and the checkoutLocation of where the repository is cloned is under /workspaces\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    # checkoutLocation is relative to /workspaces\n    checkoutLocation: backendWhen the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\nIf you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/multi-repo"}}],["127",{"pageContent":"exist Gitpod checks out the default branch.\nThe contents of https://github.com/gitpod-io/demo-multi-repo-frontend is cloned to /workspaces/demo-multi-repo-frontend\nThe contents of https://github.com/gitpod-io/demo-multi-repo-backend is cloned to /workspaces/backend\nAfter all of the source control repositories have been cloned then the before, init and command tasks are executed as per normal. If you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory the checkoutLocation location using the before task.\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    checkoutLocation: backend\n\ntasks:\n  - name: backend\n    # change working directory as per configured in `checkoutLocation`\n    # which is configured above as `/workspaces/backend`\n    before: |\n      cd ../backend\n    init: |\n      echo npm install\n    command: |\n      echo npm run dev\n\n    # changing of working directory is not required as these tasks will\n    # by default by executed in","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/multi-repo"}}],["128",{"pageContent":"`/workspaces/demo-multi-repo-frontend`\n  - name: frontend\n    init: |\n      echo npm install\n      echo npm run build\n    command: |\n      echo npm run devTry it out at https://github.com/gitpod-io/demo-multi-repo-frontend\nDelegating configuration\nThe optional mainConfiguration configuration key when configured in additional repositories points to the repository with the main .gitpod.yml file and makes it possible to open the same workspace from any issue, branch or other context URL from any of the participating repositories. Since the main configuration is used for prebuilds, those will show up under the main project.\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-backend\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontendTry it out at https://github.com/gitpod-io/demo-multi-repo-backend\nAdding additional repo folders to VSCode Explorer\nVSCode workspace folders\nYou might want to see the additionalRepositories on your VSCode.\nTo do so:\nCreate a file called main.code-workspace (for example) on your main(e.g. frontend) repository that everyone is expected to open via Gitpod.\nNow you can define the folder paths:\n{\n  //","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/multi-repo"}}],["129",{"pageContent":"All paths are relative to your main repo\n  // The additional repos are cloned inside /workspace dir\n    \"folders\": [\n        {\n            \"path\": \".\" // Main repo that you will open in Gitpod (e.g. frontend)\n        },\n        {\n            \"path\": \"../backend\" // Additional repo\n        },\n        {\n            \"path\": \"../db\" // Additional repo\n        },\n    ],\n\n}Specify your .code-workspace file path on .gitpod.yml:\nworkspaceLocation: frontend/main.code-workspace # Relative to /workspace dirSee it in action!\nFAQs\nSingle repo but instances of multiple branches\nIf you want to create multiple instances of one repository with different branches, you could use such a method:\ntasks:\n  - name: Multi branch\n    before: |\n      # Get primary repo dir path and name\n      main_repo_dir=\"${GITPOD_REPO_ROOT}\"\n      primary_repo_name=\"${main_repo_dir##*/}\"\n\n      # Array for BRANCH name(s).\n      extra_clone_branches=(\n          backend\n          docs\n          next\n      )\n\n      for reference in \"${extra_clone_branches[@]}\"; do {\n          dir=\"${main_repo_dir}-${reference}\"\n\n          if test ! -e \"${dir}\" && git -C \"${main_repo_dir}\" show-ref --quiet \"refs/heads/${reference}\"; then {\n            printf 'INFO: %s\\n' \"Duplicating ${primary_repo_name} to ${dir} with ${reference} branch\"\n            cp -ra \"${main_repo_dir}\" \"${dir}\"\n            git -C","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/multi-repo"}}],["130",{"pageContent":"\"${dir}\" checkout \"${reference}\" 2>&1 | grep -v \"Switched to branch '${reference}'\"\n          } fi\n      } done\n\n      # Send signal to awaiting task(s)\n      gp sync-done multi_branch\n\n  - name: Some other task\n    command: |\n      # Wait for multi_branch to avoid race condition\n      gp sync-await multi_branch\n\n      echo hello\n      true 'something'And to have such a feature built-in, please react with a &quot; 👍 &quot; on this issue: https://github.com/gitpod-io/gitpod/issues/15608","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/multi-repo"}}],["131",{"pageContent":"Ports\nGitpod supports exposing HTTP ports via a custom domain that is associated with your workspace. You can also use port forwarding, so that you do not need to update your application if it already references the localhost hostname. You can forward all ports using the local companion, natively in both VS Code Desktop, JetBrains and also via the command-line using SSH.\nDefault port behaviors\nBy default, when a port is opening in a Gitpod workspace, Gitpod will:\nDirect HTTP traffic - When an application starts listening to an HTTP port, Gitpod detects the port and exposes it on a URL that requires authentication. Setting the port to &quot;public&quot; would make the port URL accessible to anyone on the internet (or the installed network if using self-hosted Gitpod).\nNotify the user - Gitpod sends the user a popup notification in their IDE or editor to let the user know that a port has been detected.\nAccessing port URLs\nYou can access the dedicated port URL by pre-pending the port number to the workspace URL.\ne.g 3000-yourworkspace.ws-eu45.gitpod.io\nYou can also print the port URL using the gp url command (e.g. gp url 3000).\nAnd if you prefer listing all open ports URLs at once, use gp ports list","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/ports"}}],["132",{"pageContent":"command.\nConfiguring port behaviors\nTo modify or change default port behaviors, update the ports section of your .gitpod.yml.\nAll changes to port behaviors take effect immediately, not requiring a workspace restart.\nNote: Some actions (e.g. setting a port public/private) can be taken via the IDE or editor.\nConfigure port opening\nThe port open event is triggered when a new port is detected as open within the workspace.\nPort opening behavior can only be set via the .gitpod.yml\nThe property onOpen configures port opening behaviors:\nnotify (default) - Show a notification for newly detected ports.\nopen-preview - Open the port URL in a preview within the editor or IDE.\nopen-browser - Open the port URL in a browser tab.\nignore - Ignore default behavior (notify).\nExample: Open a browser tab for port 8080\nports:\n  - name: Web App\n    description: The main application web server\n    port: 8080\n    onOpen: open-browserSpecify port names &amp; descriptions\nYou can give ports a name and a description (both optional). These properties will help you to add context about what the port is being used for.\nThe property visibility configures who can access a port:\nprivate (default) - Only allow users with","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/ports"}}],["133",{"pageContent":"workspace access to access the port.\npublic - Allows everyone with the port URL to access the port.\nConfigure port visibility\nPort visibility can be set in .gitpod.yml, changed via the Gitpod CLI, or manually changed within the IDE or editor.\nConfigure port ranges\nAll port configurations can be applied to ranges as well as single ports.\nExample: Prevent notifications for ports between 3000 and 8999.\nPorts won&#39;t be shown in VS Code&#39;s PORTS view or in the Gitpod CLI until they are opened.\nports:\n  - port: 3000-8999\n    onOpen: ignorePorts ordering\nPorts are ordered according to their definition in .gitpod.yml. Any undefined ports are sorted numerically in ascending order. Port ordering rules apply to all ports views, for example, when using gp ports list or viewing ports in VS Code or JetBrains.\nPort forwarding\nThere are two types of port forwarding: local and remote.\nLocal port forwarding allows you to forward a port running in your Gitpod workspace to access via your localhost hostname. Remote port forwarding exposes a locally running process to use in your workspace. Remote port forwarding is not currently supported.\nLocal port forwarding\n<figure>\n<img class=\"shadow-medium","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/ports"}}],["134",{"pageContent":"w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">\n    <figcaption>Port forwarding in VS Code Desktop</figcaption>\n</figure>Local port forwarding via SSH\nUsing SSH command-line access to your workspace, ports can also be forwarded manually using tools such as the OpenSSH remote login client.\nExample: Forwarding port 3000 to localhost:3000\nssh -L 3000:localhost:3000 &lt;workspace-ssh-connection&gt;\nCross-Origin Resource Sharing (CORS)\nIf you start a server on a private port, let&#39;s say 5001, and want to connect to it from your web application which runs on a different port, e.g. 3000, you have to configure your requests. This is necessary because Gitpod requires credentials for private ports. Without credentials, Gitpod cannot verify that the request is made by an authorized user.\nConfigure your web application\nTo make this work, your web application&#39;s fetch request needs to have the credentials: &quot;include&quot; option set. See the MDN doc&#39;s credentials description for more details.\nConfigure your server\nIn your server (the one on port 5001 in the above","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/ports"}}],["135",{"pageContent":"example), you have to configure the response to include the Access-Control-Allow-Credentials header. Without it, your browser rejects the response and you see CORS errors in the browser console.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/ports"}}],["136",{"pageContent":"Tasks\nTo get the most out of ephemeral developer environments, it is important to let Gitpod know how to build your project. We can achieve this by defining tasks in the .gitpod.yml configuration file.\n“Note: In your local developer environment, you likely set up your project only once. If you work in a team, you probably have written instructions on how to get started. With Gitpod, you automate these manual steps so that a new environment can be set up repeatedly by Gitpod.”\nTasks are shell scripts that run on top of the Docker image you configure (learn more about custom Docker images).\nyoutube: E95oV_iqUtI\nExecution order\nWith Gitpod, you have the following three types of tasks:\nbefore: Use this for tasks that need to run before init and before command. For example, customize the terminal or install global project dependencies.\ninit: Use this for heavy-lifting tasks such as downloading dependencies or compiling source code.\ncommand: Use this to start your database or development server.\nThe order in which these tasks execute depends on whether you have Prebuilds configured for your project and which startup scenario applies. Let&#39;s look at the details.\n“Caveats\nAny file changes made","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["137",{"pageContent":"outside of /workspace file hierarchy from init tasks will be lost on workspace start when prebuilds are enabled. Learn more\nUser specific environment variables are not loaded automatically for init and before tasks but can be loaded if you want. Learn more”\nPrebuild and New Workspaces\nIn this startup scenario, you can see how Prebuilds impact the execution order of tasks:\nStart tasks for Prebuilds &amp; New Workspace\nStart tasks for Prebuilds &amp; New Workspace\nThe init task is where you want to do the heavy lifting, things like:\nDownload &amp; install dependencies\nCompile your source code\nRun your test suite\nAny other long-running, terminating processes necessary to prepare your project\nAs displayed in the diagram above, we highly recommend you enable Prebuilds for your project. In that case, Gitpod executes the before and most importantly, init tasks automatically for each new commit to your project.\nBy the time you start a new workspace, all that&#39;s left to do is execute the before (optional) and command tasks. The latter most often starts a database and/or development server.\n“Let Gitpod run the time-consuming init tasks continuously behind the scene so you and anyone who","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["138",{"pageContent":"opens your project on Gitpod doesn&#39;t have to wait.”\nRestart a Workspace\nWhen you restart a workspace, Gitpod already executed the init task (see above) either as part of a Prebuild or when you started the workspace for the first time.\nAs part of a workspace restart, Gitpod executes the before and command tasks:\nRestart a workspace\nRestart a workspace\nStart a Snapshot\nWhen you start a snapshot, Gitpod already executed the init task (see above) either as part of a Prebuild or when you or a team member started the snapshot&#39;s initial workspace for the first time.\nAs part of starting a snapshot, Gitpod executes the before and command tasks:\nStart a snapshot\nStart a snapshot\nConfigure the terminal\nYou can configure where terminals open using the openMode properties below.\nPlease note that this information is used if no previous terminals in the layout exist.\nSnapshots will first try to reuse existing terminals in the layout, before opening new ones.\ntasks:\n  - name: Static Server\n    command: python3 -m http.server 8080\n  - name: DB Server\n    command: sh ./scripts/start-db.sh\n    openMode: split-rightopenMode\nYou can configure how the terminal should be opened relative to the previous","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["139",{"pageContent":"task.\n\nopenModeDescription\n\n\nopenMode: tab-afterOpens in the same tab group right after the previous tab\n\nopenMode: tab-beforeOpens in the same tab group left before the previous tab\n\nopenMode: split-rightSplits and adds the terminal to the right\n\nopenMode: split-leftSplits and adds the terminal to the left\n\nopenMode: split-topDeprecated. Splits and adds the terminal to the top\n\nopenMode: split-bottomDeprecated. Splits and adds the terminal to the bottom\n\nExample Tasks\nThe examples below are common use cases you can get inspired by and adjust for your project&#39;s needs.\n“Note: before and init tasks need to terminate while command can run indefinitely (i.e. until cancelled with Ctrl + C). This is because before and init may run as part of a prebuild and if these tasks do not terminate, the prebuild will eventually fail with a timeout.”\nOne-line tasks\nEach task contains a single npm command. The init task terminates once the dependencies are installed while the command task starts a development server and does not terminate.\ntasks:\n  - name: Dev Server\n    init: npm install\n    command: npm run devMulti-line tasks\nTo run multiple commands for a given task, you can use the | notation","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["140",{"pageContent":"where each line below (make sure you indent correctly) runs in sequence once the previous command terminates.\nIn the following example, the init task installs dependencies and configures a database. Then, the command task starts the dev server(s).\n“Note: In case of multiple terminals, there is no guarantee on the order in which tasks execute. The only guarantee you have is that before, init and command execute in that sequence per terminal.”\ntasks:\n  - name: Dependencies & Database\n    init: |\n      npm install\n      npm run configure-database\n    command: npm run dev“Note: This doesn&#39;t stop execution on errors. If npm install in the example above fails, the npm run configure-database will still run. See how to exit after failure below for a workaround.”\nWait for commands to complete\nWhen working with multiple terminals, you may have a situation where terminal 1 runs build scripts and terminal 2 and 3 require that these scripts complete first. This can be achieved with gp sync-await and gp sync-done.\ntasks:\n  - name: Rails\n    init: >\n      bundle install &&\n      yarn install --check-files &&\n      rails db:setup &&\n      gp sync-done bundle # 'bundle' is an arbitrary name\n    command: rails server\n\n  - name: Webpack\n    init: gp","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["141",{"pageContent":"sync-await bundle # wait for the above 'init' to finish\n    command: bin/webpack-dev-server\n\n  - name: Redis\n    init: gp sync-await bundle\n    command: redis-server\n\n  - name: Sidekiq\n    init: gp sync-await bundle\n    command: sidekiqWait for a port to be available\nLet&#39;s say you have a web app dev server that takes a moment to start up to listen on port 3000. Once it&#39;s up and running, you want to run end-to-end tests against http://localhost:3000.\nYou can achieve this with two terminals and the gp ports await CLI command.\ntasks:\n  - name: Dev Server\n    init: npm install\n    command: npm run dev\n\n  - name: e2e Tests\n    command: |\n      gp ports await 3000\n      npm run testImmediately exit for any command failure within a task\nIf you wish to halt an entire task with for an error within the task script, then you could do the following:\ntasks:\n  - init: |\n      (\n        set -e # Tells bash to immediately exit on failure off a command\n        bundle install\n        yarn install --frozen-lockfile\n        bundle exec rake\n        bundle exec nanoc compile\n      )Gitpod starts all your tasks inside separate bash ($SHELL) shells. Gitpod can only assert the exit status of the shell process of a task. Normally bash or other shells don&#39;t halt on a failure of a command unless you","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["142",{"pageContent":"explicitly ask it to. bash only inherits the last exit status of a script run with it before it&#39;s own exit. Hence Gitpod can&#39;t determine if all of your commands inside the init task succeeded. To have that effect, you can put set -e; on top of task shell-commands and wrap your whole task-script with () to configure that particular task shell to halt and immediately exit with an error code for a failure of any command. This can be specially helpful for prebuilds (i.e init tasks)\nMissing examples?\nWe&#39;d love to hear from you if you have specific questions or ideas for additional examples. Please click the following link to open a pre-configured GitHub issue: Ask for a new Start Task example.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/tasks"}}],["143",{"pageContent":"Workspace classes\nWorkspace classes allow you to select the resources available to your workspaces.\nOn gitpod.io, the options are:\nStandard: up to 4 cores, up to 8GB RAM, 30GB storage\nLarge: up to 8 cores, up to 16GB RAM, 50GB storage\nYou can override the default (Standard) workspace class in the Gitpod project settings for your repository.\nProject Settings\nSelect a workspace class for your workspace\nYou can select workspace class directly from Gitpod Dashboard. You can do that from by clicking on the New Workspace button. Then, you can select the context url and Editor.\nGood to know\nLarge workspace classes use credits at a faster rate. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\nPrebuilds currently use the same workspace class as regular workspaces.\nFAQs\nHow to select Large workspace type for extended storage and CPU\nCreate a team project on Gitpod, from the project settings you can select a large workspace.\nIs it possible to build (android) AOSP source on Gitpod?\nIt is not quite feasible to build an entire AOSP tree right now due to current storage capacity limitations. Please react with a &quot;👍&quot; on","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-classes"}}],["144",{"pageContent":"https://github.com/gitpod-io/gitpod/issues/13950 and comment your requirements.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-classes"}}],["145",{"pageContent":"Workspace Image\nBy default, Gitpod uses a standard Docker Image called Workspace-Full as the foundation for workspaces. Workspaces started based on this default image come pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, Clojure as well as tools such as Homebrew, Tailscale, Nginx and several more.\nIf this image does not include the tools you need for your project, you can provide a public Docker image or your own Dockerfile. This provides you with the flexibility to install the tools &amp; libraries required for your project.\n“Note: Gitpod supports Debian/Ubuntu based Docker images. Alpine images do not include libgcc and libstdc++ which breaks Visual Studio Code. See also Issue #3356.”\nUse a public Docker image\nYou can define a public Docker image in your .gitpod.yml file with the following configuration:\nimage: node:busterThe official Gitpod Docker images are hosted on Docker Hub.\nYou can find the source code for these images in this GitHub repository.\nDocker image tags\nFor public images, feel free to specify a tag, e.g. image: node:buster if you are interested in a particular version of the Docker image.\nFor Gitpod images, we recommend using timestamped","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["146",{"pageContent":"tag for maximum reproducibility, for example image: gitpod/workspace-full:2022-05-08-14-31-53 (taken from the Tags panel on this dockerhub page for example)\nUse a private Docker image\n“This is currently in Alpha.”\nYou may also use private Docker images.\nTo do so you must provide the registry authentication details to Gitpod by setting GITPOD_IMAGE_AUTH with the following value &lt;registry-domain&gt;:&lt;base64-encoded &#39;username:password&#39;&gt; as a Project-level environment variable.\nFor example, if the registry is docker.io, the username is foo and the password is bar, the GITPOD_IMAGE_AUTH environment variable value may be calculated using the command echo -n &quot;docker.io:&quot;; echo -n &quot;foo:bar&quot; | base64 -w0 which outputs docker.io:Zm9vOmJhcg==.\nUse a custom Dockerfile\nThis option provides you with the most flexibility. Start by adding the following configuration in your .gitpod.yml file:\nimage:\n  file: .gitpod.DockerfileNext, create a .gitpod.Dockerfile file at the root of your project. The syntax is the regular Dockerfile syntax as documented on docs.docker.com.\nA good starting point for creating a custom .gitpod.Dockerfile is","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["147",{"pageContent":"the\ngitpod/workspace-full image as it already contains all the tools necessary to work with all languages Gitpod supports.\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\nRUN brew install fzf“⚠️ Caveat: &gt; COPY instructions in a Dockerfile is only evaluated once and then cached.\nSee this to break the cache and trigger a rebuild.”\n“⚠️ Caveat: The base image of a custom Dockerfile must be public.”\nDocker support: If you use the gitpod/workspace-full image, you get Docker support built-in to your environment.\nIf you want a base image without the default tooling installed then use the gitpod/workspace-base image.\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# base image only got `apt` as the package manager\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages shellcheck tree llvmWhen you launch a Gitpod workspace, the local","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["148",{"pageContent":"console will use the gitpod user, so all local settings, config file, etc. should apply to /home/gitpod or be run using USER gitpod (we no longer recommend using USER root).\nYou can however use sudo in your Dockerfile. The following example shows a typical .gitpod.Dockerfile inheriting from gitpod/workspace-full:\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages \\\n          binwalk \\\n          clang \\\n          tmux\n\n# Apply user-specific settingsOnce committed and pushed, Gitpod will automatically build this Dockerfile when (or before) new workspaces are created.\nSee also Gero&#39;s blog post running through an example.\nCustom base image\nWhile it is recommended to extend one of the Gitpod-provided base images for custom Dockerfiles to ensure the image has the required dependencies for a workspace, it is possible to configure a Dockerfile with a public (Debian/Ubuntu-based) image as its base.\nThere are some requirements though for a public base","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["149",{"pageContent":"image to work properly as a workspace. See the below Dockerfile as a reference. For instance, you&#39;ll need to set up the gitpod user with the right UID, and install git to enable your configured dotfiles for the workspace.\nFROM ubuntu:latest\n\n# Install:\n# - git (and git-lfs), for git operations (to e.g. push your work).\n#   Also required for setting up your configured dotfiles in the workspace.\n# - sudo, while not required, is recommended to be installed, since the\n#   workspace user (`gitpod`) is non-root and won't be able to install\n#   and use `sudo` to install any other tools in a live workspace.\nRUN apt-get update && apt-get install -yq \\\n    git \\\n    git-lfs \\\n    sudo \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Create the gitpod user. UID must be 33333.\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod\n\nUSER gitpodAdditional tools &amp; languages: see https://github.com/gitpod-io/workspace-images/tree/main/chunks for references to configure your workspace image with common tools and languages. For instance, this Dockerfile shows how to install docker and docker-compose.\nTailscale: see the Tailscale integration docs for setting up Tailscale in","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["150",{"pageContent":"a custom Dockerfile.\nTrying out changes to your Dockerfile\nIn the existing workspace\n“gp rebuild is currently in Beta · Send feedback.”\nTo test your custom .gitpod.Dockerfile, run the following command:\ngp rebuildThis builds a new image from your workspace, spins up a container and connects to it. Once connected, you can confirm all necessary tools and libraries are installed in the container. Finally, type exit to disconnect and return to your Gitpod workspace.\nAs a new workspace\nOnce you validated the .gitpod.Dockerfile with the approach described in the previous chapter, it is time to start a new Gitpod workspace based on that custom image.\nThe easiest way to try out your changes is as follows:\nCreate a new branch.\nCommit your changes &amp; push the branch to your git hosting server.\nOpen a pull / merge request and open it in your browser.\nPrefix the URL with gitpod.io/# and hit Enter.\nThis starts a new workspace with your changes applied. You notice you now have two Gitpod workspaces running. The one where you made the changes and the new one, based on the pull request.\nCaution: Keeping the first workspace open is important in case your Dockerfile has bugs and prevents Gitpod from starting a","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["151",{"pageContent":"workspace based on your pull request.\nIn the second workspace, the Docker build will start and show the output. If your Dockerfile has issues and the build fails or the resulting workspace does not look like you expected, you can force push changes to your config using your first, still running workspace and simply start a fresh workspace again to try them out.\nWe are working on allowing Docker builds directly from within workspaces, but until then this approach has been proven to be the most productive.\nManually rebuild a workspace image\nSometimes you find yourself in situations where you want to manually rebuild a workspace image, for example if packages you rely on released a security fix.\nYou can trigger a workspace image rebuild with the following URL pattern: https://gitpod.io/#imagebuild/&lt;your-repo-url&gt;.\nConfigure a custom shell\n“Feedback needed: Custom shell support is in the works. The below shows a method for running some of the ~/.bashrc.d startup scripts. To leave feedback on the approach, please see this GitHub issue: #10105.”\nFor example, if you wish to default your workspace-image to zsh, you could do it from your custom dockerfile with the following line:\nENV","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["152",{"pageContent":"SHELL=/usr/bin/zshTip: You could also create an environment variable at https://gitpod.io/variables called SHELL with */* scope for setting a personal default SHELL.\nCaveat: Shells like fish, zsh and etc. are not POSIX-compliant or bash-compatible, so your Gitpod tasks might error if you use some POSIX or bash specific features in your task scripts.\nLoad bash environment in custom shell\nCurrently we put some startup scripts for the workspace-images at ~/.bashrc.d, that means if you change your SHELL from bash to something else, they will not auto run. You could run the following command from your SHELL to workaround:\nbash -lic 'true'FAQs\nWhy is my custom dockerfile rebuild everytime even with no change made to it?\nThis usually happens when you don&#39;t pin the image tag (AKA version) inside your custom dockerfile.\nIn such casues, it could be that there has been long gaps between the time you reuse a workspace or create a new one. We usually release new images every week so if there was more than one week between each start then the image will be rebuild every time.\nSo, for example, if your .gitpod.Dockerfile looks like the following:\nFROM gitpod/workspace-full:latest\n\n# ... more stuffYou","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["153",{"pageContent":"could grab a timestamped tag from here for gitpod/workspace-full.\nAnd then your .gitpod.Dockerfile could look like:\nFROM gitpod/workspace-full:2023-01-16-03-31-28\n\n# ... more stuffNote: Please grab a recent tag from the linked page, don&#39;t copy paste the example from here.\nAlso see docker-image-tags for more info.\nHow to run a Desktop app for GUI development inside a Gitpod workspace\nIf you wish to do GUI application development in Gitpod and getting errors such as:\nUnable to init server: Could not connect : Connection refused\nNo display server running\nXorg missing\nxdg-open command not found\nThen you need to use the gitpod/workspace-full-vnc docker image. See this page for more info.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-image"}}],["154",{"pageContent":"Workspace Lifecycle\nGitpod brings a new way to think about your development environment. Rather than a single local environment that you keep up-to-date, with Gitpod you can have as many workspaces as you need.\nWorkspace Statuses\nThe state of the workspace is indicated by the color of the workspace indicator. For example, in the Gitpod dashboard, workspace state is shown on the workspace list.\n🟠 Starting - Workspace provisioning, inaccessible to the user.\n🟢 Running - Workspace loaded, accessible to the user.\n🟠 Stopping - Workspace being stopped, backups performing.\n🔴 Stopped - Workspace no longer accessible. File system preserved for restart.\n“Important: Only files in the /workspace directory are kept between state transitions.”\nThe following describes each workspace status in detail, including what can cause a workspace to transition from one status to another.\nWorkspace Starting\nWhen you open a workspace, it will be in the &quot;starting&quot; state. This means that the workspace is being created and the initialization process is running.\nWhere a workspace is being provisioned and initialized.\nIf configured and available, a prebuild snapshot is used.\nOtherwise,","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-lifecycle"}}],["155",{"pageContent":"source control is downloaded into the workspace.\nWorkspace Running\nAn active workspace is provisioned within Gitpod.\nThe workspace can be accessed by the user.\nWorkspace Stopped\nNo provisioned workspace is running (e.g. ports and URLs are not accessible).\nOnly files and directories inside /workspace are preserved.\nIf the workspace is restarted, the URL is preserved.\nA start is required before the workspace can be used.\nWorkspace Deleted\nWorkspaces are deleted after 14 days. Pinned workspaces are never deleted automatically.\nWorkspace Actions\nWorkspace Pinning\nA pinned workspace is never deleted. You can pin a workspace from your workspace list in the Gitpod dashboard.\nWorkspace Snapshotting\nYou can create a snapshot of a workspace to save its state. This is useful if you want to keep a workspace around for a longer period of time, than the default. Read more about Snapshots.\nWorkspace Deletion\nStopped workspaces are automatically deleted 14 days since the last workspace start. Pinned workspaces are never deleted. You can pin a workspace from your workspace list in the Gitpod dashboard.\nWorkspace Timeouts\nRunning workspaces will stop automatically after a period of","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-lifecycle"}}],["156",{"pageContent":"inactivity.\nWorkspace Inactivity\nBy default, workspaces stop following 30 minutes without user input (e.g. keystrokes or terminal input commands). You can increase the workspace timeout up to a maximum of 24 hours.\nEditor Disconnect\nCurrently, all timeouts are dependent on an active editor connection. Closing your Gitpod connected editor or IDE will reduce the workspace timeout to 5 minutes.\nExtending Timeouts\nPaying users of Gitpod can extend the inactivity timeout of their current workspace using the gp timeout set from the Gitpod CLI, which is installed in all gitpod workspaces by default. Extending the workspace timeout does not affect the inactivity timeout of other any other workspaces.","metadata":{"source":"https://gitpod.io/docs/configure/workspaces/workspace-lifecycle"}}],["157",{"pageContent":"Contribute\nThe team behind Gitpod has built in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\nyoutube: KcSeDGSMexs\nWe 🧡 the people who are involved in this project, and we’d love to have you on board, especially if you are just getting started or have never contributed to open-source before. So here&#39;s to you, lovely person who wants to join us — this is how you can support us:\nContribute to Gitpod Samples\nParticipating in the Gitpod Discord community.\nResponding to questions on StackOverflow.\nCreating content that shares your experiences with Gitpod\nUsing the feedback widget at the bottom of each page in our documentation.\nSubmitting documentation updates when you learn something that you think other developers would also","metadata":{"source":"https://gitpod.io/docs/help/contribute/index"}}],["158",{"pageContent":"benefit from.\nMaking contributions to the code base.","metadata":{"source":"https://gitpod.io/docs/help/contribute/index"}}],["159",{"pageContent":"Public roadmap\nThe most up-to-date Gitpod roadmap can be found at www.gitpod.io/roadmap.\nTo provide feedback or ask for feature requests, please open an issue in the Gitpod repository.","metadata":{"source":"https://gitpod.io/docs/help/public-roadmap/index"}}],["160",{"pageContent":"Release Cycle\nInformation regarding how, and when Gitpod releases updates.\nFor information on latest changes, please see the changelog.\nGitpod Release Cycle\nEarly Access - Available by invitation to gather user feedback -- changes likely.\nAlpha - Feature and published APIs unstable.\nBeta - Feature and published APIs are relatively stable.\nGeneral Availability (GA) - Features and published API&#39;s are stable. Deprecations and API changes will be communicated in advance.","metadata":{"source":"https://gitpod.io/docs/help/public-roadmap/release-cycle"}}],["161",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Learn how to start your first workspace, set up a gitpod.yml configuration file and enable Prebuilds. Get started for free.&quot;,\n    title: &quot;Getting started with Gitpod&quot;,\n    keywords: &quot;get started, fast, free&quot;,\n  }}\n/&gt;\nGetting started\nGitpod can provide fully initialized, perfectly set-up developer environments for any kind of software project. This page helps you understand how to provide such a configuration for your project.\nyoutube: ij1msCffQZA\nStart your first workspace\nThe best way to configure Gitpod is by using Gitpod - you could perform the following steps in your local environment as well, but we may as well experience ephemeral developer environments right from the beginning.\nIn a browser, navigate to your project&#39;s GitHub, GitLab or Bitbucket page.\nIn the browser&#39;s address bar, prefix the entire URL with gitpod.io/# and press Enter.For example, gitpod.io/#https://github.com/gitpod-io/website\nWe recommend you install the Gitpod browser extension to make this a one-click operation.\n\nSign in with one of the listed providers and let the workspace start up.\nCongratulations, you have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["162",{"pageContent":"started your first of many ephemeral developer environments 🎉!\n“💡 You can also start a Gitpod workspace with more options. Learn more”\nOpen in Gitpod button\nYou can add the following button to your Development/Setup Docs so that users can launch projects in Gitpod and begin working on them without having to go through the entire setup process.\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#<your-repository-url>)“here, your-repository-url can be something like: https://github.com/gitpod-samples/awesome-gitpod or any of your Repository URLs.”\nContribute with Gitpod badge\nTo make it easy for anyone to start a Gitpod workspace based on your project, we recommend you add a badge to your README.md.\n<a href=\"https://gitpod.io/#<your-repository-url>\">\n  <img\n    src=\"https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod\"\n    alt=\"Contribute with Gitpod\"\n  />\n</a>Next, let&#39;s help Gitpod understand your repository to automate the developer environment and turn on prebuilds to supercharge your development workflow.\nHelp Gitpod understand your repository\nWhen you started your first workspace","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["163",{"pageContent":"above, Gitpod didn&#39;t do much. In fact, all it did was start the workspace and git clone your source code.\nTo develop, you still would have to install dependencies, run build scripts and start the development server every time you start a workspace... We can do better, so let&#39;s automate that!\nIn the workspace terminal, make sure you are in your project&#39;s root directory (pwd should be /workspace/&lt;repo&gt;).\nRun gp init to generate a scaffold .gitpod.yml configuration file (see the .gitpod.yml reference for all configuration options).\nOpen the newly created .gitpod.yml file.\nInit script\nMost projects require some sort of initialization script to download and install dependencies, compile the source code, etc. For example, a Node.js project requires npm install. The init task by default reads echo &#39;init script&#39;, let&#39;s replace that with your project-specific init command, for example:\ntasks:\n  - init: npm install\n    command: echo 'start script'Excellent! To learn more about the difference between init and command, please have a look at Start Tasks.\nCommand script\nNext, let&#39;s adjust the command script. This is the script Gitpod executes when the workspace","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["164",{"pageContent":"successfully started up. In most cases, this is where you start your application&#39;s development server, e.g. npm run dev.\ntasks:\n  - init: npm install\n    command: npm run devConfigure your app&#39;s ports\nIf your application starts a development server that listens on a certain port, we can let Gitpod know how to deal with that. To get started, update the port according to what your application listens on, e.g. 3000.\ntasks:\n  - init: npm install\n    command: npm run dev\nports:\n  - port: 3000\n    onOpen: open-previewWhen Gitpod notices port 3000 is available, it automatically opens your application in a preview to the right of your editor - ready for you to develop and see your changes.\nCommit .gitpod.yml\nLastly, make sure to commit the .gitpod.yml configuration file to Git and push it to your repository.\nStart your second workspace\nOnce you committed and pushed .gitpod.yml, open a new browser tab and navigate to your project&#39;s page on GitHub, GitLab or Bitbucket.\n“If you pushed to a branch, please make sure you switch to that branch before you continue.”\nOpen a new workspace (see Start your first workspace above).\nObserve how Gitpod automatically runs the tasks you configured.\nWait until the","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["165",{"pageContent":"development server started and your application&#39;s preview is displayed on the right side of the editor.\nIf for some reason the second workspace does not start, simply close the tab and navigate back to the first workspace. Fix the errors that caused the workspace to fail based on the error output you see, commit and push your changes and start yet another workspace to test the latest changes.\nCongratulations, again 😊! You now have a basic Gitpod configuration and for each new workspace you start, Gitpod automatically runs the scripts you manually have to run locally.\nShut down your workspaces\nThis is easy - close the workspace browser tabs.\nWithin three minutes, the workspaces will be stopped. You can always find them at https://gitpod.io/workspaces - to be honest though, you can forget about them and start a new workspace the next time you work on your project.\nSupercharge your experience with prebuilds\nThe automation you have experienced so far is nice, but there&#39;s more! Remember that init task we configured earlier?\nYou may have wondered why there are separate init and command tasks. This is because we can tell Gitpod to run the init script every time new code is pushed to your project.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["166",{"pageContent":"By the time you or one of your organization members starts a new workspace, the init task already finished and you don&#39;t have to wait for that - saving you precious time. We call this prebuilds.\nAn intro to prebuilds\nLet&#39;s first look at an example and then configure your project to take advantage of prebuilds.\nImagine this common workflow where Nina and Paul work on the same project:\nNina opens a pull request where she developed a feature that requires a new dependency.\nGitpod notices the new code and kicks off a prebuild by cloning the source code and executing the init task. The result is saved as a prebuilt workspace.\nSome time later, Paul opens the pull request to start his code review.\nHe opens a Gitpod workspace for that given pull request (learn more about contexts).\nGitpod recognizes it already ran the init task and loads the prebuilt workspace\nBy the time the workspace starts, Paul sees the development server starting up and the application&#39;s preview is ready for review.\nFor each new commit to your project, Gitpod continuously creates prebuilt workspaces so that the project is always ready-to-code. If your project is open source, anyone gets to enjoy the efficiency of prebuilds","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["167",{"pageContent":"regardless of whether they are part of your organization or not.\nConfigure prebuilds for your projects\nDepending on your Git provider, the steps to configure prebuilds vary slightly. Please refer to the dedicated Prebuilds page for detailed instructions on how to configure prebuilds for your project.\nNext steps\nAt this point, you have a .gitpod.yml configuration file to automate repetitive tasks and prebuilds configured to let Gitpod execute many of these tasks continuously whenever new code is pushed to your project - freeing you from waiting to download, install &amp; build your project and its dependencies.\nTo explore more of what Gitpod has to offer, we recommend the following next topics:\nConfigure to learn more about start tasks, environment variables and how to provide your own custom Docker image as the foundation for workspaces.\nDevelop to learn more about the productivity gains you get with ephemeral workspaces, how contexts assist you and how to collaborate with organization members.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/index"}}],["168",{"pageContent":"Context URL\nGitpod understands a variety of common situations you experience as part of your development workflow and automates repetitive tasks, giving you time to focus on more impactful work.\nThe context is determined by a Gitpod URL&#39;s anchor, i.e. the link provided at the end of the # character in the gitpod.io/# URL.\nRegardless of the context, Gitpod performs the tasks configured in .gitpod.yml if this configuration file is available for a given repository.\nGitpod is aware of the following contexts:\nContext URLRepository Context\nBranch and Commit Contexts\nIssue Context\nPull/Merge Request Context\n\nPlease note, these contexts are supported for GitHub, GitLab, and Bitbucket. This also includes Self-Hosted installations of these git providers, where available.\nRepository Context\nTo start a new workspace, you prefix your repository URL with gitpod.io/#. E.g. gitpod.io/#https://github.com/gitpod-io/website.\nThis is the most basic context and Gitpod simply checks out the default branch and opens the Welcome screen once the workspace is ready.\nAn example URL for the repository context is:\ngitpod.io/#https://github.com/gitpod-io/websiteBranch and Commit","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/context-url"}}],["169",{"pageContent":"Contexts\nThe branch and commit contexts are very similar to the repository context described above. When you open a new workspace for a given branch or commit, Gitpod automatically checks out that branch or commit, allowing you to browse the repository on that branch or at the time of the given commit.\nAn example URL for the branch context is:\ngitpod.io/#https://github.com/gitpod-io/website/tree/my-branchAn example URL for the commit SHA context is:\ngitpod.io/#https://github.com/gitpod-io/website/commit/f5d4eb4cd3859a760ac613598e840b94e8094649Issue Context\nThe fastest way to work on an issue is to start a Gitpod workspace with an issue context. Gitpod automatically creates a local branch based on the following pattern:\n<your-username>/<issue-title>-<issue-number>This branch is based on the most recent commit in your project&#39;s default branch.\nYou can commit your changes with the git command line interface or use the Source Control panel on the left side of the editor. From there, you can also create a new pull/merge request without leaving Gitpod.\nAn example URL for the issue context","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/context-url"}}],["170",{"pageContent":"is:\ngitpod.io/#https://github.com/gitpod-io/website/issues/470Pull/Merge Request Context\n“Note: Currently pull-request based context URLs are only supported by GitHub authentication as a Gitpod authentication method.”\nWhen Gitpod recognizes a pull or merge request context, it knows you most likely have one of two intentions:\nAs a reviewer, provide PR/MR feedback\nAs an author, process feedback and update the code\nIn either case, Gitpod automatically performs the following tasks for you:\nStarts a workspace with the correct branch checked out\nOpens the PR/MR review panel where you can see and contribute to existing conversations\nDisplays a list of files changed as part of that PR/MR\nEnables you to leave comments right within individual files (yep, no need to switch between the code and the PR/MR in your browser)\nIn addition, Gitpod lets you merge a PR/MR. Once merged, you close the browser tab and move on to your next task - in a new, ephemeral developer environment 🎉.\nAn example URL for the pull/merge request context is:\ngitpod.io/#https://github.com/gitpod-io/website/pull/494","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/context-url"}}],["171",{"pageContent":".gitpod.yml\nA workspace gets configured through a .gitpod.yml file, located at the root of your project, written in YAML syntax. Here&#39;s an example:\n# Commands to start on workspace startup\ntasks:\n  - name: Setup & Build\n    before: yarn global add express\n    init: yarn install\n    command: yarn build\n\n# Ports to expose on workspace startup\nports:\n  - port: 3000\n    onOpen: open-preview\n    name: Website\n    description: Website PreviewTo see a full reference of all available properties, please refer to the .gitpod.yml reference page.\nyoutube: E95oV_iqUtI\nHow to provide the .gitpod.yml config file\nIn order to tell Gitpod how to prepare a dev environment for your project, you check in a .gitpod.yml file into the root of your repository. This way you can\nversion your workspace configuration together with your code. If, for example, you need to go back to\nan old branch that required a different configuration, Gitpod will start with the correct configuration, since that\nbit of configuration is part of your codebase.\nGenerate Your Gitpod Config File\nThe quickest way to create a .gitpod.yml file is with the gp CLI. In the terminal of a Gitpod workspace, type:\ngp initThis generates example content you can","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/gitpod-yaml"}}],["172",{"pageContent":"adjust to meet your needs.\nAlternatively, you can use the interactive mode with gp init -i. It will ask you about the different configuration options, generate the .gitpod.yml file and open it in an editor tab so you can review and extend as necessary.\nGitpod provides auto-complete, hover info and validation for the .gitpod.yml file so you get instant feedback and can rest assure your configuration is valid.\nSee it in action\nTo test your .gitpod.yml file, you need to commit and push the file to your repository and open a new workspace either by using the Gitpod extension or prefixing your repo URL with https://gitpod.io/#.\nIf you don&#39;t want to have multiple commits as you&#39;re testing and making changes to your .gitpod.yml, you can make changes from a new branch.","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/gitpod-yaml"}}],["173",{"pageContent":"Learn Gitpod\nOne workspace per task\nThe Life of a workspace\nContext URL\n.gitpod.yml","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/index"}}],["174",{"pageContent":"One workspace per task\nOn any given day, you may be involved in tasks such as the following:\nImplement a new feature\nFix a bug\nReview a pull/merge request\nPair-program with a team member\nBrowse an open source project&#39;s source code\nFor each of these tasks, you start a clean, ephemeral Gitpod workspace. You can even start multiple workspaces in parallel. For example, while you&#39;re working on a feature, you can start a second workspace to review a production hotfix. When the review is complete, you close the browser tab of that workspace and continue to work on your feature. This works for any GitLab, GitHub or Bitbucket project.\nYou can learn more about the [Life of a workspace](/docs/configure/workspaces/workspace-lifecycle\nyoutube: n7Ca3jHFtZg\nGitpod vs. local development\nA Gitpod workspace is similar to your local developer environment, except for two key differentiators:\nIt is configured as code\nIt is ephemeral and only lives for as long as you work on a task\nConfiguration vs. manual setup\nYour project&#39;s .gitpod.yml and optional .gitpod.Dockerfile files control what tools will be available in your Gitpod workspace. Both files are version-controlled and let you","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task"}}],["175",{"pageContent":"monitor changes to the developer environment over time. There is no longer a need to @channel in your team&#39;s communication software to tell everyone to upgrade their version of Node.js, only to find out that some people were on vacation and didn&#39;t see the message.\nEphemeral vs. long-lived\nThanks to the fact that Gitpod workspaces are configured as code, you can start and stop them as frequently as you want. You know that each workspace has the tools it needs and even more importantly, has the latest code from your default branch checked out! You no longer have to pull the latest default branch a few times per day because each time you start a new workspace, it has the latest code already available.","metadata":{"source":"https://gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task"}}],["176",{"pageContent":"Bash in Gitpod\nBash is the default shell for Gitpod. However, if you&#39;re developing a Bash script yourself, you may want to configure additional language support.\nExample Repositories\nHere are a few Bash example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry It\n\n\ninlets/inletsReverse proxy and service tunnelOpen in Gitpod\n\nVSCode Extensions\nShellCheck\nShellCheck provides linting for common mistakes in your shell script.\nTo use ShellCheck in Gitpod, first, we must install the shellcheck tool. Here is a simple Dockerfile to get you started:\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN brew install shellcheckYou should also install the shellcheck VS Code extension in Gitpod, by adding a .gitpod.yml configuration file to your repository that looks like this (notice the vscode extensions section):\nimage:\n  file: .gitpod.Dockerfile\n\nvscode:\n  extensions:\n    - timonwong.shellcheck@0.9.0:hsU/Rd39aqPYowTqL+DbXg==Not sure about ShellCheck? Try it in Gitpod!\ngitpod-io/Gitpod-ShellCheck\nBash IDE\nA Bash IDE demonstration\nJust to name a few things Bash IDE adds: Code completion, hovers, and diagnostic reporting.\nTo install Bash IDE","metadata":{"source":"https://gitpod.io/docs/introduction/languages/bash"}}],["177",{"pageContent":"to your repository add the following to your .gitpod.Dockerfile\nRUN npm i -g bash-language-serverAlso the following in your\n.gitpod.yml\nvscode:\n  extensions:\n    - mads-hartmann.bash-ide-vscode@1.4.0:/qx+rdXE/fGTGWhelNf3aQ==Not sure about Bash IDE? Try it in Gitpod\nOpen in Gitpod\nFurther Reading\nFor more information about ShellCheck please see shellcheck.net\nKnown issues\nThe shellcheck program was not found\nIt has been reported that shellcheck extension fails to detect shellcheck from homebrew which results in:\nshellcheck notification\nTo resolve this you need to set &quot;shellcheck.executablePath&quot;: &quot;/home/linuxbrew/.linuxbrew/bin/shellcheck&quot;, (or to path that point to shellcheck on your system), See https://github.com/vivek-verma202/GWAS_FM/pull/3/files","metadata":{"source":"https://gitpod.io/docs/introduction/languages/bash"}}],["178",{"pageContent":"C++ in Gitpod\nGitpod supports C++ right out of the box, but there are still ways to enhance your C++ experience within Gitpod.\nExample Repositories\nHere are a few C++ example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nComponent Editorcircuito.io Component EditorOpen in Gitpod\n\ntinyraycasterold-school FPS in a weekendOpen in Gitpod\n\nHelloGitPodExample Gitpod C++ configuration with clang-tidy linter enabledOpen in Gitpod\n\nEnvironment\nC++ Tools\nAll Gitpod workspaces come with the latest available clang, gcc, cmake, gdb, and other useful C++ tools pre-installed by default.\nHowever, if you&#39;re missing some additional tools, you can simply run brew install &lt;tool_name&gt; to install it in the current workspace or write your own .gitpod.Dockerfile to install it across all workspaces for your repository.\nIDE Features\nDebugging\nSince gdb is already pre-installed in Gitpod, you can already debug any C, C++, Go, etc. program directly from the Terminal with a single command.\nHowever, you can also get the IDE&#39;s Debugging features to work with your C++ program, using GDB as a backend.\nTo enable C++ debugging for your project, simply","metadata":{"source":"https://gitpod.io/docs/introduction/languages/cpp"}}],["179",{"pageContent":"follow these steps:\nOpen the Extensions panel (in the IDE&#39;s left vertical menu bar)\n\nUse the Search feature to find the extension called &quot;Native Debug&quot;, then click on Install, and select Install for this project\n\nNext, open the Debug panel (also in the IDE&#39;s left vertical menu bar), and click on the Gear (⚙️) icon to open the launch.json configuration file\n\nFinally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your launch.json should look something like this:\n\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"type\": \"gdb\",\n          \"request\": \"launch\",\n          \"name\": \"Debug Firefox (GDB)\",\n          \"target\": \"./obj-x86_64-pc-linux-gnu/dist/bin/firefox\",\n          \"cwd\": \"${workspaceRoot}\",\n          \"valuesFormatting\": \"parseText\"\n      }\n  ]\n}Note: This example GDB launch configuration points to a compiled Firefox browser binary. You&#39;ll need to adjust it to point to your project&#39;s own compiled binary.\nWith this, you should be able to set breakpoints in your C++ code directly from the code","metadata":{"source":"https://gitpod.io/docs/introduction/languages/cpp"}}],["180",{"pageContent":"editor margin, then start a debugging session from the Debug panel. The IDE should then show you debug information, hopefully pause execution on your breakpoint, and allow you to step through the code.\nIf that doesn&#39;t work, please feel free to ask for help in community.gitpod.io and we&#39;ll be happy to help you make debugging work for your project.\nFor a more in-depth walk-through of how do debug applications, please refer to this comment on GitHub.\nFurther Reading\nHow to enable the clang-tidy linter in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/cpp"}}],["181",{"pageContent":"Dart in Gitpod\nExample Repositories\nHere are a few Dart example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nFlutter Hello World DemoThe Flutter hello world demo template configured for GitpodOpen in Gitpod\n\nInstalling Dart\nTo install the Dart SDK in Gitpod one must add the following to your .gitpod.Dockerfile\nRUN brew tap dart-lang/dart && brew install dartVSCode Extensions\nDart\nThis Extension adds cool syntax highlighting\nSyntax highlighting example\nIt adds IntelliSense support for autocompletion\nDart IntelliSense example\nTry it\nHere is a hello world example of a Gitpodified project running in the browser, try it!\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/dart"}}],["182",{"pageContent":"Deno in Gitpod\nIt&#39;s easy to set up Deno in Gitpod.\nSetting up the Dockerfile\nAdd a Dockerfile to your project as .gitpod.Dockerfile:\nFROM gitpod/workspace-full\n\nRUN curl -fsSL https://deno.land/x/install/install.sh | sh\nRUN /home/gitpod/.deno/bin/deno completions bash > /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export DENO_INSTALL=\"/home/gitpod/.deno\"' >> /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export PATH=\"$DENO_INSTALL/bin:$PATH\"' >> /home/gitpod/.bashrc.d/90-denoAnd configure this Dockerfile in your .gitpod.yml:\nimage:\n  file: .gitpod.DockerfileIt&#39;ll run the latest Deno version and install the Bash completions.\nExample Repositories\nHere are a few Deno example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nfake-log-generatorGenerator for fake log files as CLI applicationOpen in Gitpod\n\nVSCode Extensions\nHere is a useful extensions that you&#39;ll likely want to install in your Deno project.\nDeno\nTo add this extension to your repository, simply open Gitpod&#39;s Extensions panel (see left vertical menu in the IDE), then search for &quot;Deno&quot; and install it &quot;for this","metadata":{"source":"https://gitpod.io/docs/introduction/languages/deno"}}],["183",{"pageContent":"project&quot;.\nNext, simply commit the .gitpod.yml configuration file that was automatically created (or updated) by Gitpod.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/deno"}}],["184",{"pageContent":".NET in Gitpod\nExample Repositories\n\nRepositoryDescriptionTry it\n\n\ndotnetcoreC# .NET Core templateOpen in Gitpod\n\nunoBuild Mobile, Desktop and WebAssembly apps with C# and XAMLOpen in Gitpod\n\nuno.quickstartAn Uno &quot;Hello world!&quot; project using Windows UWP, iOS, Android and WebAssemblyOpen in Gitpod\n\nInstalling the .NET Tools\nTo get all the .NET tools that you need pre-installed in your Gitpod workspaces, use the following base image in your .gitpod.yml:\nimage: gitpod/workspace-dotnetIf your project requires a GUI or Virtual Desktop, please use this image instead:\nimage: gitpod/workspace-dotnet-vncThis will give you a full GUI Virtual Desktop for your .NET application! The Virtual Desktop will be running on port 6080.\nCompiling .NET Code in Gitpod\nTo compile your C# or F# Code in Gitpod, run dotnet build &lt;FILE&gt;, where &lt;FILE&gt; is the path to the C# or F# project file or .NET solution file you want to compile.\nRunning .NET Code in Gitpod\nTo run your code after it has been compiled run dotnet &lt;FILE&gt; where &lt;FILE&gt; is the path to the EXE file you want to run. You can also run application with dotnet run &lt;FILE&gt; where &lt;FILE&gt; is the path to the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/dotnet"}}],["185",{"pageContent":"C# or F# project file you want to compile and run.\nRunning .NET Code in watch-mode\nAlternatively, you can also run your application in so-called watch-mode. In such configuration the application will recompile and rerun itself every time you save any source file belonging to the project. To run your code in watch-mode use dotnet watch --project &lt;FILE&gt; run where &lt;FILE&gt; is the path to the C# or F# project file you want to compile and run.\nUseful VSCode Extensions\nC#\nThe official C# extension from Microsoft is proprietary and unfortunately cannot be used. The MIT licensed muhammad-sammy.csharp extension from Samsung brings code completion, snippets, auto-formatting, peek definition, refactoring, hover documentation and breakpoint debugging for C# however!\nC# Extension Demo\nTo add this extension to your repository, add the following to your .gitpod.yml:\nvscode:\n  extensions:\n    - muhammad-sammy.csharpF#\nThe Ionide-fsharp extensin gives F# developers the following features:\nA Widget for your F# needs\nAuto completion\nShows errors inline\nQuickfix\nGoto definition\nPeek definition\nAnd more...\nIonide fsharp Example\nTo add this extension to your repository, add the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/dotnet"}}],["186",{"pageContent":"following to your .gitpod.yml:\nvscode:\n  extensions:\n    - Ionide.Ionide-fsharp@4.6.2:yBkAE6j7z7gJ5WEcyMjEOg==","metadata":{"source":"https://gitpod.io/docs/introduction/languages/dotnet"}}],["187",{"pageContent":"Go in Gitpod\nGitpod includes Go in the default image, but if you need to customize your Go version or IDE setup in Gitpod, this guide will help you.\nPrerequisites\nThis guide assumes familiarity with:\nDocker, YAML, Linux, Bash and Linux environment variables.\nGetting started / Quick Start\nyoutube: ij1msCffQZA\nTo see a full working Go application, take a look at gitpod-samples/template-golang-cli. To update an existing Go application, follow the steps below in this guide.\nInstalling Dependencies\nThe default base image\nThe default Gitpod workspace image default is workspace-full based on Ubuntu.\nThis base image includes:\nGo v1.19.1 (go version)\n“Note: We discuss how to set up a custom base image later in the guide.”\nUpdating Go Versions\nGitpod uses the latest stable version of Go by default. If you want to use a different version, you can use the Go Version Manager to install and manage multiple versions of Go or you can following their official guide.\nSetting up a custom Dcokerfile\nyoutube: jFsbmcXCRf8\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\nCreate a .gitpod.yml\ntouch .gitpod.ymlCreate a custom Dockerfile\ntouch","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["188",{"pageContent":".gitpod.DockerfileReference your newly created Dockerfile in your .gitpod.yml\nimage:\n  file: .gitpod.DockerfileUpdate your .gitpod.Dockerfile to install your preferred dependency versions\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:latest\n\n# Change your version here\nENV GO_VERSION=1.17\n\n# For ref, see: https://github.com/gitpod-io/workspace-images/blob/61df77aad71689504112e1087bb7e26d45a43d10/chunks/lang-go/Dockerfile#L10\nENV GOPATH=$HOME/go-packages\nENV GOROOT=$HOME/go\nENV PATH=$GOROOT/bin:$GOPATH/bin:$PATH\nRUN curl -fsSL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar xzs \\\n    && printf '%s\\n' 'export GOPATH=/workspace/go' \\\n                      'export PATH=$GOPATH/bin:$PATH' > $HOME/.bashrc.d/300-goCommit and push both .gitpod.yml and .gitpod.Dockerfile\ngit commit -m \"configuring gitpod with go\" && git pushStart a new workspace from the branch with the committed .gitpod.Dockerfile\nFor example, opening: gitpod.io/#https://github.com/gitpod-io/gitpod\nTest your dependencies are correct in the new workspace\ngo version“Note:","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["189",{"pageContent":"If your changes are not taking effect, ensure your workspace is building from the correct context, where your gitpod.yml or gitpod.Dockerfile are checked in to version control and are on the branch or commit that you are opening.”\nSee configure Docker for more.\nUsing the dep dependency manager in Gitpod\nIf your project uses the dep (deprecated - v0.5.4) dependency manager then you need to add a .gitpod.Dockerfile to your project. A basic example that extends the default workspace image might be something like:\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get install go-depAlso, don&#39;t forget to reference the above Dockerfile in your .gitpod.yml configuration file, like so:\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: dep ensure\n\nvscode:\n  extensions:\n    - golang.go\n    - premparihar.gotestexplorerDebugging your Go application in Gitpod\nDebugging your Go applications in VS Code\nHere is a quick clip on how to automatically configure debugging for Go!\nSo, basically in this video we:\nFirst, open the Go file that we want to debug\nThen, go to the debug menu and select &quot;Add Configuration...&quot;\nNext, in the dropdown choose &quot;Go launch file&quot;\nFinally,","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["190",{"pageContent":"start debugging your Go program!\nYou can also create the Go debug configuration file manually\nTo start debugging your Go application in Gitpod, please create a new directory called .theia/, and inside add a file called launch.json, finally, add the following to it:\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch file\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"program\": \"${file}\"\n    }\n  ]\n}Then, simply open the Go file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green &quot;Run&quot; button.\nTo see a basic repository with Go debugging, please check out gitpod-samples/template-golang-cli:\nOpen in Gitpod\nDebugging your Go applications in GoLand\nSteps to debug your Go application in GoLand:\nOpen your project in Gitpod with GoLand.\nOpen the main.go file in the editor.\nClick on the Run menu and select Edit Configurations....\nClick on the + button and select Go Application.\nIn the Go Application window, enter the name of the configuration and the path to the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["191",{"pageContent":"file you want to debug.\nClick on the Apply button.\nClick on the Debug button to start debugging your Go application.\nUsing $GOPATH\nOlder Go projects without module support need a specific workspace layout:\nthe source code of your repository and its dependencies must be in the directories\nsrc/[repository-provider]/[repository-owner]/[repository-name]in the $GOPATH. Using the .gitpod.yml file, you can bring about such a workspace layout. Here is\nhow we do that for the example go-gin-app repository:\n---\ncheckoutLocation: \"src/github.com/demo-apps/go-gin-app\"\nworkspaceLocation: \".\"\ntasks:\n  - init: |\n      cd /workspace/src/github.com/demo-apps/go-gin-app &&\n      go get -v ./... &&\n      go build -o app\n    command: |\n      cd /workspace/src/github.com/demo-apps/go-gin-app &&\n      ./appIn more detail:\nBy default, Gitpod clones the repository into the directory /workspace, which becomes the\nroot directory for the workspace. With checkoutLocation and workspaceLocation you can\nchange this behavior (the paths are taken relative to /workspace).\nGitpod preconfigures the $GOPATH environment variable to include the directory /workspace/go.\nWith go get -v ./... we retrieve the sources","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["192",{"pageContent":"of the dependencies from GitHub.\nTo build the app, we run go build -o app.\nLastly, we start the application.\nExample Repositories\nHere are a few Go example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry It\n\n\nprometheusThe Prometheus monitoring system and time series databaseOpen in Gitpod\n\ngo-swaggerA simple yet powerful representation of your RESTful APIOpen in Gitpod\n\ngo-gin-appGin example running in GitpodOpen in Gitpod\n\ngosh-terminalA terminal implemented in Go where you can do anythingOpen in Gitpod\n\nFurther Reading\nVSCode/Go Documentation The stuff here also applies to Gitpod!\nJetBrains/GoLand Documentation The stuff here also applies to Gitpod!\nVSCode/Go debugging VSCode&#39;s Documentation on Go debugging","metadata":{"source":"https://gitpod.io/docs/introduction/languages/go"}}],["193",{"pageContent":"HTML &amp; CSS in Gitpod\nGitpod has great HTML and CSS support. In fact, Gitpod was made with web development in mind. And, depending on your needs, you may want to customize this experience further!\nExample Repositories\nHere are a few HTML/CSS example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nFront-End-ChecklistThe perfect Front-End Checklist for modern websites and meticulous developersOpen in Gitpod\n\nDevhintsTL;DR for developer documentation - a ridiculous collection of cheatsheetsOpen in Gitpod\n\nemmet &nbsp;Support\nemmet demo\nGitpod comes with emmet support right out of the box giving you access to powerful snippets and completions\nLive Preview\nLive Preview Demo\nWith Gitpod you can open a preview for HTML files while you are coding. You can do this by opening a web server python -m http.server 8000.\nYou can also automate this in your .gitpod.yml file, so that every time you start a new workspace your preview is ready to go. For example:\ntasks:\n  - name: Start web server\n    init: python -m http.server 8000\n\nports:\n  - port: 8000\n    onOpen: open-previewTry It!\nWant to see a minimal example in action? Try it out by opening an example on","metadata":{"source":"https://gitpod.io/docs/introduction/languages/html"}}],["194",{"pageContent":"Gitpod:\ngitpod-io/Gitpod-Web-Development-Example","metadata":{"source":"https://gitpod.io/docs/introduction/languages/html"}}],["195",{"pageContent":"Languages\nGitpod is a very flexible tool and can be configured with many languages.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/index"}}],["196",{"pageContent":"Java in Gitpod\nGitpod comes with great support for Java. This guide walks you through how to fully configure a Java application using Gitpod.\nPrerequisites\nThis guide assumes familiarity with:\nDocker, YAML, Linux, Bash and Linux environment variables.\nGetting started / Quick Start\nyoutube: ij1msCffQZA\nTo see a full working Java application, take a look at gitpod-io/spring-petclinic. To update an existing Java application, follow the steps below in this guide.\nInstalling dependencies\nThe default base image\nThe default Gitpod workspace image default is workspace-full based on Ubuntu.\nAlong with other languages and tools, this base image includes:\nSDKMAN! v5.16.0 (sdk version)\nJava v11.0.16 (java -version)\nGradle v7.5.1 (gradle -version)\nMaven v3.8.6 (mvn -version)\n“Note: We discuss how to set up a custom base image later in the guide.”\nUpdating Java, Maven &amp; Gradle\nFor alternative versions to those provided in the Gitpod base image, with SDKMAN! you can quickly update your dependencies: sdk install &lt;candidate&gt; [version]\n“Important: Dynamically swapping Java, Maven or Gradle versions manually is a quick way to explore Gitpod. However, for day-to-day","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["197",{"pageContent":"development strongly recommend to add explicit dependency versions in your gitpod.yml or Dockerfile.”\nUpdating Java version\nsdk list java - to see available java versions\nsdk install java 18.0.1.fx-zulu - to install a specific version\nUpdating Maven version\nsdk list maven - to see available maven versions\nsdk install maven 3.8.6 - to install a specific version\nUpdating Gradle version\nsdk list gradle - to see available gradle versions\nsdk install gradle 7.4.1 - to install a specific version\nSetting up a custom Dockerfile\nyoutube: jFsbmcXCRf8\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\nCreate a .gitpod.yml\ntouch .gitpod.ymlCreate a custom Dockerfile\ntouch .gitpod.DockerfileReference your newly created Dockerfile in your .gitpod.yml\nimage:\n  file: .gitpod.DockerfileUpdate your .gitpod.Dockerfile to install your dependency versions\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh && \\\n    sdk install java 17.0.3-ms && \\\n    sdk default java 17.0.3-ms\"Commit and push both gitpod.yml and .gitpod.Dockerfile\ngit commit -m \"configuring gitpod with java\" && git","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["198",{"pageContent":"pushStart a new workspace from the branch with the committed .gitpod.Dockerfile\nFor example, opening: gitpod.io/#https://github.com/gitpod-io/gitpod\nTest your dependencies are correct in the new workspace\nsdk current“Note: If your changes are not taking effect, ensure your workspace is building from the correct context, where your gitpod.yml or gitpod.Dockerfile are checked in to version control and are on the branch or commit that you are opening.”\nSee configure Docker for more.\nBuild and run your application\nBuilding a Java application\nTo build your application, you&#39;ll need to configure a start task.\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\nAdd the command to build your application to your .gitpod.yml\nExample with Gradle\ntasks:\n  - init: gradle buildExample with Maven\ntasks:\n  - init: mvn packageOptional: Validate by stopping and starting (restart) your workspace\ngp stopOptional: Validate your commands by running gp tasks\ngp","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["199",{"pageContent":"tasks“Tip: If you&#39;re using VS Code Browser or VS Code Desktop, then your tasks will open as terminal windows. You can configure their layout using the openMode property.”\n“Note: We are using the init property so that we can perform application building during a prebuild, for increased performance. We&#39;ll discuss prebuilds more later on.”\nSee start tasks and .gitpod.yml reference for more.\nRunning a Java application\nTo run your application, you have two options:\nUpdate your start task command - Starting your application using the command start task will run the start process on workspace start. With both VS Code Browser and VS Code Desktop, tasks are automatically opened in the terminal(s). With IntelliJ / JetBrains Gateway, configured tasks can be viewed by running gp tasks in the workspace.\nUse a run / launch configuration - Alternatively, you can commit a run/debug configuration in IntelliJ IDEA or a launch configuration in VS Code as a way to start your application.\nUsing start tasks to run Java\nAdd a command for starting your application to your .gitpod.yml\nExample with Gradle\ntasks:\n  - init: gradle build\n    command: gradle runExample with Maven\ntasks:\n  - init: mvn package","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["200",{"pageContent":"command: mvn exec:javaOptional: Validate by stopping and starting (restart) your workspace\ngp stopOptional: Validate your commands by running gp tasks\ngp tasksConfiguring environment variables\nyoutube: dehln1E8ylY\nGitpod supports encrypted, user-specific environment variables.\nEnvironment variables are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces. You can set environment variables using gp env, or in your project and account settings.\nSee environment variables for more.\nConfiguring ports\nWhen your project starts a service that listens on a given port, Gitpod automatically serves traffic to this port of your application on an authenticated URL.\nIf you want to configure ports, such as: their visibility, what Gitpod does when it detects a new port being available, etc, you can do that in the ports section of the .gitpod.yml configuration file.\nFor example, add the following to your .gitpod.yml to configure port 3000 to open in your browser on workspace start.\nports:\n  - port: 3000\n    onOpen: open-browserSee configuring ports for more\nConfiguring localhost\nYour development","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["201",{"pageContent":"application might rely on the localhost hostname to effectively run.\nTo ensure your localhost address works with Gitpod, you have two options:\nReplace localhost references - Swap localhost references within the application with the output of gp url &lt;port&gt;, typically via an environment variable.\nExample: Using the DEV_ENVIRONMENT_HOST environment variable instead of localhost within the application, configured in the command of the .gitpod.yml start tasks.\ntasks:\n  - command: |\n    export DEV_ENVIRONMENT_HOST=`gp url 3000`\n    java <application-entry>Setup localhost port forwarding - Connect your local machine with your running workspace means that you don&#39;t need to replace localhost references, to do that you&#39;ll need to configure port forwarding. Port forwarding is useful if you&#39;re working with a framework that needs localhost, and the application cannot be reconfigured.\nWith VS Code Desktop, local port-forwarding is handled automatically and can be configured via the ports view within VS Code Desktop.\nWith IntelliJ IDEA using JetBrains Gateway you can setup remote port-forwarding manually.\nAlternatively, by using local companion all workspace ports","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["202",{"pageContent":"will be forwarded automatically.\nSee configuring ports for more.\nConfiguring VS Code extensions\nTo set default plugins to be installed for all users starting a workspace for the project, add a list of the JetBrains plugin identifiers to your .gitpod.yml under vscode.extensions.\nvscode:\n  extensions:\n    - vscjava.vscode-java-packSee .gitpod.yml reference for more.\nConfiguring VS Code Launch configurations\nLaunch configurations can be shared by committing the .vscode/launch.json file to version control. To use a launch configuration with Java, need Java version 11 or above, and some VS Code extensions. Assuming you have configured your base image with a compatible JDK version as described above, a simple way to get set up is by adding the Extension Pack for Java will configure the correct VS Code extensions. Alternatively, you can selectively choose the extensions to install.\nvscode:\n  extensions:\n    - vscjava.vscode-java-packSee Debugging in Visual Studio Code and VS Code Java Extensions for more.\nConfiguring JetBrains Run/Debug configurations\nTo share your run/debug configurations, you can commit their definitions to source control. Since the .idea folder contains lots of","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["203",{"pageContent":"information used for IntelliJ (which can include sensitive information or secrets) you may wish to ignore the .idea from version control, and explicitly allow .idea/runConfigurations.\nAdd run/debug configurations to git, by adding the following to your .gitignore.\n/.idea/*\n!/.idea/runConfigurationsSee JetBrains Run/Debug configuration documentation for more.\nConfiguring JetBrains Plugins\nTo set default extensions to be installed for all users starting a workspace for the project, add a list of the VS Code extension identifiers to your .gitpod.yml.\njetbrains:\n  intellij:\n    plugins:\n      - com.intellij.lang.jsgraphqlSee .gitpod.yml reference for more.\nOptimising Java Applications\nGitpod prebuilds reduce wait time by installing dependencies or running builds before you start a new workspace. By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests coming from the same repository. However, prebuilds save only the workspace directory, any files stored outside of the workspace directory will be lost. For Java applications, we recommend to execute build commands within an init startup task.\nyoutube: DwkoOz1GSVg\nSee","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["204",{"pageContent":"prebuilds and start tasks for more.\nOptimising JetBrains indexing\n“JetBrains prebuilds support (via gitpod.yml) is currently in Alpha · Send feedback.”\nGitpod currently has early support for improved indexing performance with JetBrains IDEs that works out-of-the-box. You can enable this setting via the .gitpod.yml.\nExample: Index both the stable and latest of the IntelliJ IDE\njetbrains:\n  intellij:\n    prebuilds:\n      version: stableCaching Maven dependencies\nThe default cache location for Maven is the .m2 directory. However, since this location is by default outside of the /workspace directory caches will not be stored as part of a prebuild.\nIf you are using the workspace-full image, Maven caching configuration is already enabled.\nTo configure Maven caching, add the following to your custom Dockerfile.\nCreate an .m2 directory in the users (gitpod) home directory.\nmkdir /home/gitpod/.m2Create a settings.xml and configure localRepository within workspace.\nprintf '<settings>\\n  <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xmlSee prebuilds for more.\nCaching Gradle dependencies\nThe default","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["205",{"pageContent":"location of the gradle home is $USER_HOME/.gradle, however, since this location is by default outside of the /workspace directory caches will not be stored as part of a prebuild.\nIf you are using the workspace-full image, Gradle caching configuration is already enabled.\nTo configure Gradle caching, add the following to your custom Dockerfile.\nENV GRADLE_USER_HOME=/workspace/.gradle/See prebuilds for more.\nPersonalizing Gitpod\nAll settings introduced so far, such as .gitpod.yml and Dockerfile apply for all users using of the gitpod project. To apply personalisation, consider setting up dotfiles, the Gitpod Browser Extension,\nDotfiles\nDotfiles allow you to setup per-user configurations in your Gitpod workspace, such as modifying your shell and adding command aliases. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a public dotfiles repository in your Gitpod preferences.\nSee dotfiles for more.\nBrowser Extension\nBrowser Extension\nTo make opening Gitpod workspaces easier, install the Gitpod browser extension, which enables an &quot;Open in Gitpod&quot; button on GitHub, GitLab and Bitbucket.\nSee Browser Extension for","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["206",{"pageContent":"more.\nConfigure your IDE or editor\nWith Gitpod, you can work with VS Code Browser, VS Code Desktop or JetBrains IDEs, such as IntelliJ IDEA. Setting your preference ensures all future workspaces start with the chosen IDE or editor. Visit the preferences page to configure these settings.\nSee IDEs &amp; Editors for more.\nVS Code Desktop Settings Sync\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nVS Code Desktop by default is not setup to sync your VS Code settings (e.g. your fonts, layouts, etc) with VS Code running in the browser of Gitpod. You can configure Gitpod to sync settings between browser and desktop by running the command palette action &quot;Settings Sync: Enable signing in with Gitpod&quot; from the Gitpod VS Code extension.\nSee VS Code settings sync for more.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/java"}}],["207",{"pageContent":"JavaScript in Gitpod\nGitpod comes with great built-in support for JavaScript, TypeScript, and tools like Node.js, npm, pnpm &amp; yarn pre-installed with Gitpod workspace image. This guide walks you through how to fully configure a JavaScript application using Gitpod.\nPrerequisites\nThis guide assumes familiarity with:\nDocker, YAML, Linux, Bash and Linux environment variables.\nGetting started / Quick Start\nyoutube: ij1msCffQZA\nTo see a full working Node/TypeScript application, take a look at gitpod-samples/template-typescript-node. To update an existing JavaScript application, follow the steps below in this guide.\nInstalling dependencies\nThe default base image\nThe default Gitpod workspace image default is workspace-full based on Ubuntu.\nAlong with other languages and tools, this base image includes:\nNode.js v16.18.1 (node -v)\nNode Package Manager - npm v8.19.2 (npm -v)\nNode Version Manager - nvm 0.39.0 (nvm -v)\n“Note: We discuss how to set up a custom base image later in the guide.”\nUpdating Node Versions\nGitpod comes with the latest stable Node.js version pre-installed but let&#39;s say your project uses a different version of node (say 14.8.0 for example), well","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["208",{"pageContent":"the good news is that Gitpod also comes with nvm (a tool used to manage multiple active Node.js versions) installed. To install and configure the desired version of node: nvm install 14.8.0 and nvm use 14.8.0 (you can also use nvm alias default 14.8.0 to set the default version of node) or you can setup custom Dockerfile to install the desired version of node &amp; other required tools.\nSetting up a custom Dcokerfile\nyoutube: jFsbmcXCRf8\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\nCreate a .gitpod.yml\ntouch .gitpod.ymlCreate a custom Dockerfile\ntouch .gitpod.DockerfileReference your newly created Dockerfile in your .gitpod.yml\nimage:\n  file: .gitpod.DockerfileUpdate your .gitpod.Dockerfile to install your dependency versions\nFROM gitpod/workspace-full:latest\n\nRUN bash -c 'VERSION=\"14.8.0\" \\\n    && source $HOME/.nvm/nvm.sh && nvm install $VERSION \\\n    && nvm use $VERSION && nvm alias default $VERSION'\n\nRUN echo \"nvm use default &>/dev/null\" >> ~/.bashrc.d/51-nvm-fixCommit and push both .gitpod.yml and .gitpod.Dockerfile\ngit commit -m \"configuring gitpod with javascript\" && git pushStart a new workspace from the branch","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["209",{"pageContent":"with the committed .gitpod.Dockerfile\nFor example, opening: gitpod.io/#https://github.com/gitpod-io/gitpod\nTest your dependencies are correct in the new workspace\nnode -v“Note: If your changes are not taking effect, ensure your workspace is building from the correct context, where your gitpod.yml or gitpod.Dockerfile are checked in to version control and are on the branch or commit that you are opening.”\nSee configure Docker for more.\nBuild and run your application\nBuilding a JavaScript application\nTo build your application, you&#39;ll need to configure a start task.\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\nAdd the command to build your application to your .gitpod.yml\nExample with npm\ntasks:\n  - init: npm install && npm run buildExample with yarn\ntasks:\n  - init: yarn install && yarn buildOptional: Validate by stopping and starting (restart) your workspace\ngp stopOptional: Validate your commands by running gp tasks\ngp tasks“Tip: If","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["210",{"pageContent":"you&#39;re using VS Code Browser or VS Code Desktop, then your tasks will open as terminal windows. You can configure their layout using the openMode property.”\n“Note: We are using the init property so that we can perform application building during a prebuild, for increased performance. We&#39;ll discuss prebuilds more later on.”\nSee start tasks and .gitpod.yml reference for more.\nRunning a JavaScript application\nTo run your application, you have two options:\nUpdate your start task command - Starting your application using the command start task will run the start process on workspace start. With both VS Code Browser and VS Code Desktop, tasks are automatically opened in the terminal(s). With IntelliJ / JetBrains Gateway, configured tasks can be viewed by running gp tasks in the workspace.\nUsing start tasks to run JavaScript\nAdd a command for starting your application to your .gitpod.yml\nExample with npm\ntasks:\n  - init: npm install && npm run build\n    command: npm run devExample with yarn\ntasks:\n  - init: yarn install && yarn build\n    command: yarn startOptional: Validate by stopping and starting (restart) your workspace\ngp stopOptional: Validate your commands by running gp tasks\ngp","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["211",{"pageContent":"tasksUsing ESLint for linting\nIf your project&#39;s package.json does not mention ESLint as a dependency then you have to install it first. For installing it add the following to the end of the init phase of your .gitpod.yml as shown:\ntasks:\n  - init: npm install && npm run build && npm install -g eslintand then search for eslint in the extensions tab and then install it from there using the install button as shown in the screenshot.\nInstall ESLint in Gitpod\nHot Module Replacement (HMR)\nEspecially when it comes to Frontend Projects, the dev-server should be able to auto-reload on file changes. The implementation varies from server to server. To make this work, some additional config is required:\nVite\nIn your .gitpod.yml file, you should export the workspace url for the port your server runs into the environment.\ntasks:\n  - init: npm install\n    command: |\n      export HMR_HOST=`gp url 5173`After exporting it to the environment, the URL can be accessed in the vite.config.js. With the following snippet, you are able to configure HMR to work inside Gitpod, as well as on localhost.\nconst config = () => ({\n  server: {\n    hmr: {\n      clientPort: process.env.HMR_HOST ? 443 : 5173,\n      host: process.env.HMR_HOST\n        ? new","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["212",{"pageContent":"URL(process.env.HMR_HOST).hostname\n        : \"localhost\",\n    },\n  },\n});\n\nexport default config;Webpack\nSimilar to the setup in Vite, the setup for Webpack consists of two steps: exporting the URL to the environment and consuming the environment variable in the config:\ntasks:\n  - init: npm install\n    command: |\n      export HMR_HOST=`gp url 3000`After the workspace URL with the given port is exported to the environment, it can be used in the webpack.config.js to determine the right port and hostname.\nmodule.exports = {\n  devServer: {\n    client: {\n      webSocketURL: {\n        hostname: process.env.HMR_HOST\n          ? new URL(process.env.HMR_HOST).hostname\n          : \"localhost\",\n        port: process.env.HMR_HOST ? 443 : 3000,\n        protocol: \"wss\",\n      },\n    },\n  },\n};Use of Private Packages\nIf you want to use private packages from npm or yarn on Gitpod, you can use the NPM_TOKEN environment variable. You can set it in your Gitpod user settings.\nDebug your JavaScript application in Gitpod\nDebugging JavaScript applications in VS Code\nTo debug your application, you can use the VS Code Browser or VS Code Desktop IDE. You can start debugging by clicking the Debug button in the IDE&#39;s status bar or by pressing F5 or following the steps","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["213",{"pageContent":"below:\nDebugger Option in Gitpod VS Code\nYou Can follow this official blog for more.\nDebugging JavaScript applications in JetBrains IDE (WebStorm)\nTo debug your application, you can use the WebStorm IDE. You can start debugging by clicking the Add Configurations button in the IDE&#39;s top status bar.\nDebugger Option in Gitpod WebStorm\nYou Can follow this official blog for more.\nExample Repositories\nHere are a few JavaScript/TypeScript example projects that are automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nTesseract.jsPure JavaScript OCR for more than 100 LanguagesOpen in Gitpod\n\nfreeCodeCampfreeCodeCamp.org&#39;s open source codebase and curriculumOpen in Gitpod\n\nMozilla PDF.jsPDF.js is a PDF viewer that is built with HTML5Open in Gitpod\n\nRecommended Reading\nBuild Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide\nSustainable Node.js development with only a browser.\nDeveloping a Nuxt.js app entirely in your browser\nGitpodifying — The Ultimate Guide\nDebugging Node.js applications in Theia","metadata":{"source":"https://gitpod.io/docs/introduction/languages/javascript"}}],["214",{"pageContent":"Julia in Gitpod\nExample Repositories\nHere are a few Julia example projects that are already automated with Gitpod:\nA minimal example of a ready-to-code Julia developer environment is JesterOrNot/Gitpod-Julia. Feel free to take a look.\nAnd to showcase a real-world Julia project in Gitpod, we&#39;ve gitpodified the Julia repository itself! Try it via the following button:\nJesterOrNot/Julia","metadata":{"source":"https://gitpod.io/docs/introduction/languages/julia"}}],["215",{"pageContent":"Kotlin in Gitpod\nTo work with Kotlin in Gitpod, you will need to properly configure your repository. Here is how to do it.\nInstalling Kotlin\nTo install Kotlin in Gitpod add the following to your .gitpod.Dockerfile:\nRUN brew install kotlinA full example could look like this:\nFROM gitpod/workspace-full\n\nUSER gitpod\nRUN brew install kotlinVS Code extensions\nKotlin Language\nThis extension provides Kotlin language support for Gitpod and other IDEs, with:\nSyntax highlighting\nCode snippets\nRegion code folding\nTo get it, open Gitpod&#39;s Extensions panel (left vertical menu), then search for &quot;Kotlin&quot; and install the extension by Mathias Fröhlich for your project. Next, commit the .gitpod.yml file that was automatically created (or updated) by Gitpod.\nCode Runner\nWhile this extension isn&#39;t Kotlin-specific, but allows to run code snippets in many different languages, including Kotlin.\nTo get it, open Gitpod&#39;s Extensions panel, then search for &quot;Code Runner&quot; and install it for your project.\nTry it\nPlease use the button below to see a gitpodified Kotlin example project in Gitpod:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/kotlin"}}],["216",{"pageContent":"LaTeX in Gitpod\nThis tutorial will demonstrate how to configure Gitpod to work with LaTeX files. You can find a complete example repository at the end.\nInstalling LaTeX\nFirst, you will probably want to install LaTeX in Gitpod. To do this, add a new file to your repository called .gitpod.Dockerfile, and add the following content to it:\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive && \\\n    sudo rm -rf /var/lib/apt/lists/*Next, create a file called .gitpod.yml and add the following to it:\nimage:\n  file: .gitpod.DockerfileNow commit both files into source control, and push them to your GitHub or GitLab repository.\nThis will be your base configuration for LaTeX in Gitpod — from now on, every time you create a new Gitpod workspace for your repository, it will be configured as specified in your .gitpod.yml and .gitpod.Dockerfile.\nAutomatically compiling LaTeX files on save\nOne way to achieve this is to install inotify-tools by modifying your earlier .gitpod.Dockerfile like so:\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive-full inotify-tools && \\\n    sudo rm -rf","metadata":{"source":"https://gitpod.io/docs/introduction/languages/latex"}}],["217",{"pageContent":"/var/lib/apt/lists/*Next, modify your .gitpod.yml like so:\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - name: LaTeX auto-rebuild\n    command: >\n      while find . -name '*.tex' | xargs inotifywait -qqre modify .; do \\\n        latexmk -pdf ; \\\n      done\n  - name: TerminalThis will start a watcher process that automatically recompiles your *.tex files when they are changed. Note: The watcher process will start in a separate Terminal on every workspace start.\nVSCode Extensions\nTexLab\nThis extension provides rich editing support for the LaTeX typesetting system powered by the TexLab language server.\nTo install it in Gitpod, simply download the corresponding *.vsix file Open VSX, and then drag-and-drop it into Gitpod&#39;s Extensions view (which can be found in the left vertical menu bar).\nThis will automatically append something like this to your .gitpod.yml file:\nvscode:\n  extensions:\n    - efoerster.texlab@1.10.0:/Vq+k9Ug/81LYWajjTgMpA==(Note: You can also append these lines yourself if you don&#39;t want to download &amp; re-upload the *.vsix file.)\nLaTeX Workshop\nAnother great LaTeX extension is LaTeX Workshop:\n“Boost LaTeX typesetting efficiency with preview, compile, autocomplete,","metadata":{"source":"https://gitpod.io/docs/introduction/languages/latex"}}],["218",{"pageContent":"colorize, and more.”\nIt is also available on Open VSX.\nLaTeX Snippets\nThere is also LaTeX Snippets:\n“This extension includes a variety of snippets for LaTeX including making environments and plotting images for functions, etc.”\nTry it!\nTo see a complete minimal example repository with a Gitpod configuration for LaTeX, including most of the tools we&#39;ve covered, see ptrottier/latex. You can try it in your browser:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/latex"}}],["219",{"pageContent":"PHP in Gitpod\nGitpod supports PHP right out of the box, but more advanced features such as debugging can be configured, so here is how to do it!\n“There is also an awesome community project that utilizes ddev with Gitpod and makes things much easier.\nBe sure to check it out first from below!\nhttps://drud.github.io/ddev-gitpod-launcher/\nWith it, you can run XDebug out of the box, change PHP versions on the fly, and much more!”\nExample Repositories\n\nRepositoryDescriptionTry it\n\n\nsymfony-demoA PHP/Symfony reference application following best practicesOpen in Gitpod\n\nmagento2gitpodMagento 2 optimized setup for Gitpod: Nginx, MySQL, PHP 7.2, PHP-FPM and moreOpen in Gitpod\n\nkoelA personal music streaming server that worksOpen in Gitpod\n\ndrupalDrupal 9 with MySQL, suitable for site building and contrib module developmentOpen in Gitpod\n\nphpmyadminA phpMyAdmin example with Node.js, a REST API and MySQL for data persistenceOpen in Gitpod\n\nSwitching PHP versions\nGitpod installs PHP from Ondřej Surý&#39;s PPA in here. The default version should be set to PHP8.\nBut let&#39;s say you want to switch to PHP7.4, follow along!\nAt first, add a .gitpod.Dockerfile file on your repo with the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/php"}}],["220",{"pageContent":"following content in it:\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Change your version here\nRUN sudo update-alternatives --set php $(which php7.4)Secondly, reference the above Dockerfile in your .gitpod.yml configuration file, like so:\nimage:\n  file: .gitpod.DockerfileNow you can See it in action on a new workspace\nDebugging PHP in Gitpod\nPHP debugging example\nThe PHP Debug extension allows debugging PHP applications from within Gitpod.\nTo get this extension for your project, you must do two things:\nFirst, you must create a .gitpod.Dockerfile for your repository:\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\nRUN sudo install-packages php-xdebugSecond, reference the above Dockerfile in a .gitpod.yml file, and then also install the extension, like so:\nimage:\n  file: .gitpod.Dockerfile\n\nvscode:\n  extensions:\n    - felixfbecker.php-debugNow you can See it in action on a new workspace\nLater, you can head over to Run and Debug on the left hand side and have fun debugging PHP! You can also create a launch.json file.\nFinally, here is a full example repository","metadata":{"source":"https://gitpod.io/docs/introduction/languages/php"}}],["221",{"pageContent":"containing the complete Gitpod PHP debug configuration described above. You can try it by clicking here:\nOpen in Gitpod\nPECL Package Manager\nGitpod&#39;s default workspace image also comes with the PECL package manager pre-installed. To install packages with it, you must use sudo pecl install &lt;EXTENSION&gt; in your repository&#39;s .gitpod.Dockerfile, e.g. like so:\nFROM gitpod/workspace-full\n\nRUN sudo pecl channel-update pecl.php.net && \\\n    sudo pecl install <EXTENSION>where &lt;EXTENSION&gt; is the PHP extension you want to install, e.g. xdebug.\nSetting GitHub token to Composer\nSome composer plugins like symfony/flex does direct API call against GitHub to fetch additional information. These unauthenticated requests will be rate-limited and may fail your task steps. To fix this behavior we can use the default credential-helper to obtain a GitHub Token and configure composer properly\ncomposer config --global github-oauth.github.com $(printf '%s\\n' host=github.com | gp credential-helper get | sort | head -2 | tail -1 | sed 's;password=;;')Further Reading\nGitpodifying a new Laravel Application by Etin Obaseki","metadata":{"source":"https://gitpod.io/docs/introduction/languages/php"}}],["222",{"pageContent":"Python in Gitpod\nGitpod comes with great support for Python built-in. Still, depending on your project, you might want to further optimize the experience.\nPython Project Examples\nBefore we get started, here are some examples of already-gitpodified repositories!\n\nRepositoryDescriptionTry it\n\n\npython-flask-api-tutorialA step by step Todo List API tutorial with Flask + PythonOpen in Gitpod\n\ndjango-locallibrary-tutorialAn example website written in Django by MDNOpen in Gitpod\n\nGitpod-PyQtA PyQt example for GitpodOpen in Gitpod\n\nwxPython-exampleA wxPython example for GitpodOpen in Gitpod\n\ntemplate-python-djangoA Django example for GitpodOpen in Gitpod\n\ntemplate-python-flaskA Flask example for GitpodOpen in Gitpod\n\nPandas\nWelcome data scientists! This part of the guide will show you how to configure Gitpod for Pandas development.\nTry Pandas in Gitpod\nTo see a minimal project with Pandas installed and configured, please check out gitpod-io/Gitpod-Pandas:\nOpen in Gitpod\nUse Gitpod for Pandas development\nPandas Team has their official docs on how to use Gitpod for Pandas development. Please check out Pandas Team&#39;s Gitpod guide.\nPython Versions\nRun","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["223",{"pageContent":"pyenv versions to see which Python versions are pre-installed in Gitpod.\nThe easiest way to install a new Python version is to use pyenv install &lt;VERSION&gt;. For example, suppose you wanted to install Python 3.6.4, you would run pyenv install 3.6.4.\nYou can switch between Python versions using pyenv local &lt;VERSION&gt;. For example, if you wanted to switch to Python version 2.7.17 you would run pyenv local 2.7.17. This will create a .python-version file that controls which Python version is the default in your project.\nIf you want to setup a custom dockerfile so that you don&#39;t have to repeat the process, here&#39;s how your .gitpod.Dockerfile could look like:\n# You could use `gitpod/workspace-full` as well.\nFROM gitpod/workspace-python\n\nRUN pyenv install 3.11 \\\n    && pyenv global 3.11Start tasks\nYou can start building your project when, or even before you start your Gitpod workspace. Are you using a requirements.txt file to manage dependencies? If so, add this to your .gitpod.yml to automatically pre-install all dependencies when starting a workspace:\ntasks:\n  - init: pip3 install -r requirements.txt\n    command: python3 main.pyLinting\nYou can create a setup.cfg or a","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["224",{"pageContent":"pycodestyle.cfg in the project root and adjust pycodestyle rules there like this:\n[pycodestyle]\nignore = E226,E302,E41\nmax-line-length = 160\nstatistics = TrueYou&#39;ll need to refresh the browser in order to update these rule. Source.\nVSCode Extensions\nWhile the most popular Python VSCode extensions are built into Gitpod, here are a few &quot;nice to have&quot; extensions that you can use as well.\nARepl for Python\nARepl for Python is helpful for constantly checking your code and debugging.\nTo install this extension for your repository, add the following to your .gitpod.yml:\nvscode:\n  extensions:\n    - almenon.areplPython Test Explorer\nPython test explorer example\nEasily test your python extensions with the Python Test Explorer.\nTo add this to your repository add the following to your .gitpod.yml\nvscode:\n  extensions:\n    - littlefoxteam.vscode-python-test-adapter@0.3.16:tZ/6xOSSdKUaq6JCUVkD+A==GUI Applications with wxPython\nTo install wxPython to your repository please add the following to your .gitpod.Dockerfile. If you don&#39;t have one, simply run gp init and commit the two generated files.\n# This will pull the official Gitpod `vnc` image\n# which has much of","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["225",{"pageContent":"what you need to start\nFROM gitpod/workspace-full-vnc\n\nUSER gitpod\n\n# Install wxPython dependencies\nRUN sudo apt-get -q update && \\\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq freeglut3-dev python3.7-dev libpython3.7-dev libgl1-mesa-dev libglu1-mesa-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libnotify-dev libsdl2-dev libwebkit2gtk-4.0-dev libxtst-dev libgtk2.0-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n# Install wxPython\nRUN pip3 install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04/ wxPythonHere is a corresponding .gitpod.yml example:\nimage:\n  file: .gitpod.Dockerfile\n\n# This will expose all necessary ports needed for your VNC image\nports:\n  - port: 6080\n    onOpen: open-preview\n  - port: 5900\n    onOpen: ignore\n  - port: 35900\n    onOpen: ignore\n\n# This will make it so that on workspace start it will run a file called `app.py`\ntasks:\n  - command: python3 app.py\nNameFrameworkTry it\n\n\nTic-Tac-Toe-GUIKivyOpen in Gitpod\n\nPongKivyOpen in Gitpod\n\nGitpod-PyQtPyQtOpen in Gitpod\n\nDebugging\nHere is a quick clip on how to automatically configure debugging for Python!\nSo, basically in this video","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["226",{"pageContent":"we:\nFirst, open the Python file that we want to debug\nThen, go to the debug menu and select &quot;Add Configuration...&quot;\nNext, in the dropdown choose &quot;Python&quot;\nNext, choose &quot;Python File&quot; as the debug configuration\nFinally, start debugging your Python program!\nYou can also create the Python debug configuration file manually\nTo start debugging your Python application in Gitpod, please create a new directory called .theia/, and inside add a file called launch.json, finally, add the following to it:\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Current File\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"console\": \"internalConsole\"\n    }\n  ]\n}Then, simply open the Python file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green &quot;Run&quot; button.\nTo see a basic repository with Python debugging enabled, please check out gitpod-io/Gitpod-Python-Debug:\nOpen in Gitpod\nFurther Reading\nVSCode documentation for Python debugging All the information there should also apply to Gitpod as well.\nTroubleshooting Matplotlib/TK Here","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["227",{"pageContent":"is how to troubleshoot Matplotlib/TK issues for Python GUI applications.\nDebugging Django This is how to debug Django applications in Gitpod.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/python"}}],["228",{"pageContent":"R in Gitpod\nTo work with R in Gitpod, you will need to properly configure your repository. Here is how to do it.\nInstalling R\nFirst, you&#39;ll probably want to install R itself. To do this, add a new file to your repository called .gitpod.Dockerfile, and add the following content to it:\nFROM gitpod/workspace-full\n\nRUN brew install RNext, create a Gitpod configuration file called .gitpod.yml (you can also simply run gp init and Gitpod will generate the file), and reference the above Dockerfile in it like so:\nimage:\n  file: .gitpod.DockerfileThen commit and push both files to your repository. After that, every new Gitpod workspace created for your project will have R pre-installed.\nVSCode Extensions\nR Extension\nR extension\nTo install the R extension to your repository, add the following to your .gitpod.yml file:\nvscode:\n  extensions:\n    - Ikuyadeu.r@1.2.1:z5vr1v1bfS++U/aHLSXQ6Q==Here is a minimal example of R running in Gitpod. You can try it here:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/r"}}],["229",{"pageContent":"Ruby in Gitpod\nIt&#39;s relatively easy to set up your Ruby project in Gitpod.\nRuby Versions\nAs of this writing, Gitpod comes with Ruby 3.1 pre-installed in the gitpod/workspace-full.\nTo use a different Ruby version, you can change the base image to one of the following:\ngitpod/workspace-ruby-2\ngitpod/workspace-ruby-3.0\nThese images are automatically updated every week with the latest ruby patch versions.\nTo use a fixed version, you may use a custom Dockerfile.\nFROM gitpod/workspace-full\nUSER gitpod\n\n# Install Ruby version 2.7.6 and set it as default\nRUN _ruby_version=ruby-2.7.6 \\\n    && printf \"rvm_gems_path=/home/gitpod/.rvm\\n\" > ~/.rvmrc \\\n    && bash -lc \"rvm reinstall ${_ruby_version} && \\\n                 rvm use ${_ruby_version} --default\" \\\n    && printf \"rvm_gems_path=/workspace/.rvm\" > ~/.rvmrc \\\n    && printf \"{ rvm use \\$(rvm current); } >/dev/null 2>&1\\n\" >> \"$HOME/.bashrc.d/70-ruby\"“💡 Explanation: Gitpod initially sets up RVM in /home/gitpod/.rvm, but then later switches the RVM configuration directory to /workspace/.rvm, so that any user-made changes (like installing new gems) are persisted within a Gitpod workspace. However, during the Dockerfile build, the /workspace","metadata":{"source":"https://gitpod.io/docs/introduction/languages/ruby"}}],["230",{"pageContent":"directory doesn&#39;t exist yet, so we temporarily reset RVM&#39;s configuration directory to /home/gitpod/.rvm.”\nExample Repositories\nHere are a few Ruby example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nRuby on Rails templateRuby on Rails template with a PostgreSQL databaseOpen in Gitpod\n\nForemThe platform that powers dev.toOpen in Gitpod\n\nGitLabThe open source end-to-end software development platformOpen in Gitpod\n\nVSCode Extensions\nHere are a few useful extensions that you&#39;ll likely want to install in your Ruby project.\nRuby Test Explorer\nWith the Ruby test explorer, you can run unit tests from within the Gitpod UI.\nRuby test explorer example\nTo add this extension to your repository, simply add these lines to your .gitpod.yml configuration file:\nvscode:\n  extensions:\n    - connorshea.vscode-ruby-test-adapter@0.9.0\n    - hbenl.vscode-test-explorer@2.21.1Ruby On Rails\nSo, you want to write your cool new Ruby On Rails application in Gitpod? Well, here is an idea of how to do it. Please take a look at our minimal Rails example running in Gitpod:\nOpen in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/languages/ruby"}}],["231",{"pageContent":"Rust in Gitpod\nWelcome, Rustacean!\nRust is a first-class language in Gitpod, and we believe that Gitpod is a great tool for Rust projects. Some of Gitpod&#39;s core developers frequently work with Rust code (in Gitpod), and several key components of Gitpod are written in Rust:\nThe fantastic language support is provided by the rls\nThe blazing-fast workspace search is powered by ripgrep\nRust Version\nGitpod always comes with the latest available Rust toolchain pre-installed using rustup. (As of this writing, the Rust version is 1.66.0.\nYou can also use rustup yourself in Gitpod in order to switch to a different Rust version, or to install extra components. See the rustup book to learn more about rustup itself.\nNote: If you try to use rustup in your repository&#39;s .gitpod.Dockerfile, you might get the following error:\n/bin/sh: rustup command not foundTo fix this, simply wrap the rustup command in a login Bash shell, like so:\nRUN bash -cl \"rustup toolchain install nightly\"You can override this default by committing a rustup-toolchain file in the root of your repository. Say for example you need the nightly compiler for March 4th, 2020, you would create a rustup-toolchain file and add the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["232",{"pageContent":"following\nnightly-2020-03-04which will set the required Rust version and if you commit the file into source control it will set the default nightly version across all workspaces.\nExample Repositories\nHere are a few Rust example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nNushellA next-gen shell for the GitHub eraOpen in Gitpod\n\nMathLangBasic maths language in RustOpen in Gitpod\n\nServoThe Servo Browser EngineOpen in Gitpod\n\nVSCode Extensions\nThe most popular Rust VSCode extensions are already pre-installed in Gitpod. But here are a few &quot;nice to have&quot; extensions you may choose to install as well.\nIn order to install one of these extensions for your repository, simply head to Gitpod&#39;s Extensions panel (find it in the IDE&#39;s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your .gitpod.yml file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\nRust Test Explorer\nRust test explorer example\n\n\nThe Rust Test Explorer makes it easy to run Rust tests.\nCrates\n“Note: This extension outputs","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["233",{"pageContent":"emojis by default if the crate version is set at the latest. You can disable this by using crates.upToDateDecorator option in your preferences &gt; ”\nThe VSCode extension Crates makes it easier to manage your Cargo dependency versions.\nSearch Crates.io\nDo you have an idea of a library you want to use but don&#39;t know the version well just type in the name of the library and Search Crates.io will get the version.\nBetter TOML\nTOML Syntax highlighting example\nBetter TOML adds syntax highlighting to your Cargo.toml.\nCross-compiling with MUSL\nTo cross-compile with MUSL in Gitpod, you can:\nRun rustup target add x86_64-unknown-linux-musl, for example in your .gitpod.Dockerfile\nThen, build with cargo build --target x86_64-unknown-linux-musl\nTo learn more, see MUSL support for fully static binaries.\nDebugging\nIn this section we will show you how to configure your project for debugging in Gitpod.\nFirst, before we get to that we need to get some prerequisites set-up.\nFirst we&#39;ll install the needed extension. If you haven&#39;t already, head over to Gitpod&#39;s Extensions panel (left vertical menu in the IDE) and search for an extension called Native Debug by webfreak. When you see","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["234",{"pageContent":"it, click to install it for your project.\nThe next prerequisite is a Docker configuration.\nIf you already have a .gitpod.Dockerfile just add the following:\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8If not there are two steps. First, create a file called .gitpod.Dockerfile with the following content:\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8Next, add the following to your .gitpod.yml file:\nimage:\n  file: .gitpod.DockerfileNow that&#39;s out of the way, here is a video on how to configure the debug configuration\nSo, basically in this video we:\nGo to the debug menu and select &quot;Add Configuration...&quot;\nNext, in the dropdown choose &quot;GDB: Launch Program&quot;\nGo to the Cargo.toml file and find the name of the program.\nModify the target field and change it to ${workspaceFolder}/target/debug/&lt;PROGRAM_NAME&gt; where &lt;PROGRAM_NAME&gt; is the name of the program under the name field in the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["235",{"pageContent":"Cargo.toml file.\nAdd another property to the created file called preLaunchTask and set it to &quot;cargo&quot;\nGo to the terminal menu and click configure tasks\nSelect cargo build from the menu that pops up\nchange the tag type to command\nchange the tag subcommand to args and the value to [&quot;build&quot;]\nNext remove the problemMatcher field.\nAdd a field called type and set it to process\nAdd a field called label and set it to cargo\nGo to the Rust file you want to debug\nAdd a breakpoint or two\nGo back to the debug menu that has the crossed out spider\nClick the green run button.\nFinally, start debugging your Rust program!\nYou can also create the Rust debug configuration file manually\nTo start debugging your Rust application in Gitpod, please create a new directory called .theia/, and inside add a file called launch.json, add the following to it:\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"gdb\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Rust Code\",\n      \"preLaunchTask\": \"cargo\",\n      \"target\": \"${workspaceFolder}/target/debug/rust_debug\",\n      \"cwd\":","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["236",{"pageContent":"\"${workspaceFolder}\",\n      \"valuesFormatting\": \"parseText\"\n    }\n  ]\n}Next create another file in the same .theia/ directory called tasks.json with the following content:\n{\n  \"tasks\": [\n    {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"],\n      \"type\": \"process\",\n      \"label\": \"cargo\"\n    }\n  ]\n}Then, simply open the Rust file you want to debug, add some breakpoints, and open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green &quot;Run&quot; button.\nTo see a basic repository with Rust debugging configured, please check out gitpod-io/Gitpod-Rust-Debug:\nOpen in Gitpod\nFurther Reading\nRocket-Example For an example of how to setup a project for the Rocket web-development framework","metadata":{"source":"https://gitpod.io/docs/introduction/languages/rust"}}],["237",{"pageContent":"Scala in Gitpod\nWelcome, Scala programmer. Today we will show you how to configure Gitpod for your project.\nInstalling Scala\nFirst, you&#39;ll probably want to install Scala. To do this, add a new file to your repository called .gitpod.Dockerfile, and add the following content to it:\nFROM gitpod/workspace-full\n\nRUN brew install scalaAdditionally create a file called .gitpod.yml and add the following:\nimage:\n  file: .gitpod.DockerfileNow commit both files into source control.\nWhat are these files for?\nLet&#39;s break this down. First, in .gitpod.Dockerfile, we declare FROM gitpod/workspace-full to have your project use Gitpod&#39;s default workspace image (recommended). You can use other images too, but some Gitpod features might not work as well with untested images.\nNext, we declare RUN brew install scala. This simply installs Scala into the workspace image via HomeBrew.\nThen, we register our custom Dockerfile in Gitpod&#39;s configuration file .gitpod.yml, so that Gitpod knows it should pick it up and build it on-the-fly when booting up new workspaces.\nFinally, please note that these changes will only take effect in new workspaces. To try out your new automated dev setup,","metadata":{"source":"https://gitpod.io/docs/introduction/languages/scala"}}],["238",{"pageContent":"simply commit both files; push them to GitHub; and then open a new Gitpod workspace for your repository. 🚀\nUsing the Ammonite REPL\nThe Ammonite REPL in action\nTo install the Ammonite REPL in Gitpod, you must add the following to our previously-created .gitpod.Dockerfile:\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'Then commit the changes and push to your repository. Finally, when you open a new workspace, you will be able to type amm in the terminal, and behold a super cool Scala REPL in your workspace!\nBuilding projects with sbt\nTo use sbt (simple build tool) in Gitpod, you can add the following to that .gitpod.Dockerfile we created:\nRUN brew install sbtAs usual, commit and push the changes, and sbt will be installed in all future workspaces.\nManaging Scala versions with scalaenv\nSay your project needs a specific Scala version. You can use scalaenv, a version manager for Scala, to switch between different Scala versions. But first, we must install scalaenv. As usual, we need to change our .gitpod.Dockerfile, by adding this to it:\nRUN brew install","metadata":{"source":"https://gitpod.io/docs/introduction/languages/scala"}}],["239",{"pageContent":"scalaenvThen, say you need Scala version 2.12.11, you would add the following line as well:\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11Using coursier, an artifact fetcher for Scala\ncoursier is useful for building certain Scala projects and installing different tools.\nRUN brew install coursier/formulas/coursier(Don&#39;t forget to commit and push this change!)\nFormatting Scala code with scalafmt\nTo install scalafmt for your repository, add the following to your .gitpod.Dockerfile:\nRUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.CliThen to format your code simply run scalafmt!\nPutting it all together\nA full example of a .gitpod.Dockerfile configured for Scala could look something like:\nFROM gitpod/workspace-full\n\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'\n\nRUN brew install scala coursier/formulas/coursier sbt scalaenv\n\nRUN sudo env \"PATH=$PATH\" coursier","metadata":{"source":"https://gitpod.io/docs/introduction/languages/scala"}}],["240",{"pageContent":"bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli\n\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11You will notice that all the brew install commands are on the same line. We recommend grouping similar commands together to minimize the number of Docker layers.\nAdditionally, your .gitpod.yml file should still look like this:\nimage:\n  file: .gitpod.DockerfileVSCode Extensions\nScala Syntax (official)\nScala Syntax demo\nScala Syntax adds basic syntax highlighting for Scala and sbt files.\nTo get it, open Gitpod&#39;s Extensions panel (left vertical menu in the IDE), then search for &quot;Scala Syntax&quot;, and install it &quot;for this project&quot;. Then, commit the automatic .gitpod.yml change that was made by Gitpod.\nMetals\nAn example of the metals in Gitpod\nMetals adds helpful Scala features to Gitpod, for example, advanced autocompletion and debugging support just to name a few. Although to use it you must also have the previously mentioned Scala Syntax.\nTo get it, open Gitpod&#39;s Extensions panel (left vertical menu in the IDE), then search for","metadata":{"source":"https://gitpod.io/docs/introduction/languages/scala"}}],["241",{"pageContent":"&quot;Scala Metals&quot;, and install it &quot;for this project&quot;. Then, commit the automatic .gitpod.yml change that was made by Gitpod.\nBoom! You&#39;re done! (Just a reminder, don&#39;t forget to push the changes.)\nDebugging Scala code\nTo debug Scala code in Gitpod you should use the Metals extension which we just went over. Here is an example of Scala Debugging in action:\nIn general when debugging Scala code, go to the main method, and click the Debug button over it! And boom you&#39;re debugging.\nTry it!\nTo see a minimal repository with a Gitpod configuration that installs all the tools we&#39;ve covered, see gitpod-io/Gitpod-Scala. You can try it in your browser:\nOpen in Gitpod\nNeed help?\nIf you are having trouble and need help please find us in the Gitpod community, or, file an issue on GitHub.\nFeedback\nWe love feedback and want to continuously improve all of our guides and documentation. If you found a grammar mistake, or we left out your favorite Scala tool, or you just have general feedback on the guide, please feel free to edit this guide or to file a website issue on GitHub.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/scala"}}],["242",{"pageContent":"Svelte in Gitpod\nTo work with Svelte in Gitpod, you will need to properly configure your repository. Here is how to do that, assuming that you&#39;re using the official sveltejs template which uses Rollup:\nCreate a .gitpod.yml\nStart by creating a .gitpod.yml file in the root of your project and add the following to it:\ntasks:\n  - init: npm install\n    command: npm run dev\n\nports:\n  - port: 5000\n    onOpen: open-preview\n  - port: 35729\n    onOpen: ignoreAfter committing and pushing this file to your repository, start a new Gitpod workspace. You&#39;ll see that Gitpod will automatically install the dependencies; start the dev server; and open a preview on the side for port 5000.\nSveltejs Template in Gitpod\nMaking Live Reload work\nIn order to make live reload work we need to add a bit of configuration as specified below:\nSetup an environment variable called CLIENT_URL in the .gitpod.yml config file as shown below please make sure that you set it up before the task which starts the dev server(which is npm run dev in this case):\n- init: npm install\n    command: |\n      export CLIENT_URL=\"$(gp url 35729)/livereload.js?snipver=1&port=443\"\n      npm run dev\nPass the value of CLIENT_URL environment variable to the","metadata":{"source":"https://gitpod.io/docs/introduction/languages/svelte"}}],["243",{"pageContent":"rollup-plugin-livereload in rollup-config.js inside of the plugins array as shown:\nplugins: [\n  !production &&\n    livereload({\n      watch: \"public\",\n      clientUrl: process.env.CLIENT_URL,\n    }),\n];This will set CLIENT_URL to the workspace url of port 35729 (default port for livereload in Gitpod).\n\nExample Projects\n\nRepositoryDescriptionTry it\n\n\nSvelteJS templateA project template for Svelte appsOpen in Gitpod\n\nVSCode Extensions\nSvelte for VS Code\nSvelte for VS Code Provides syntax highlighting and rich IntelliSense for Svelte components in VS Code, utilising the svelte language server.\nTo add this extension to your repository, simply head to Gitpod’s Extensions panel (find it in the IDE’s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your .gitpod.yml file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\nhttps://github.com/gitpod-io/sveltejs-template repo is a working example of the config described above 👆.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/svelte"}}],["244",{"pageContent":"Vue.js in Gitpod\nTo work with Vue.js in Gitpod, you will need to properly configure your repository. Here is how to do it.\nExample Repositories\nHere are a few Vue.js example projects that are already automated with Gitpod:\n\nRepositoryDescriptionTry it\n\n\nvuepressMinimalistic Vue-powered static site generatorOpen in Gitpod\n\npostwomanA free, fast and beautiful API request builder (web alternative to Postman)Open in Gitpod\n\nnuxtjs.orgNuxt.js Documentation Website (Universal Vue.js Application built with Nuxt.js)Open in Gitpod\n\nVue-CLI\nTo install the Vue.js command-line interface in your current workspace run the following\nnpm i -g vue-cliTo install globally across all workspaces add the following to your .gitpod.Dockerfile\nRUN npm i -g vue-cli“Please note: If you don&#39;t already have one please run gp init which should generate two files .gitpod.yml and .gitpod.Dockerfile”\nVSCode Extensions\nVetur\nVetur extension\nVetur provides syntax highlighting, snippets, Emmet support, linting/error checking, auto-formatting, and auto-complete for Vue files.\nTo add this extension to your repository add the following to your .gitpod.yml\nvscode:\n  extensions:\n    -","metadata":{"source":"https://gitpod.io/docs/introduction/languages/vue"}}],["245",{"pageContent":"octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA==For projects that already have a .gitpod.yml, you can skip the first part and just add the provided snippet.","metadata":{"source":"https://gitpod.io/docs/introduction/languages/vue"}}],["246",{"pageContent":"CLion\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["247",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["248",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["249",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  clion:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["250",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  clion:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are configured","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["251",{"pageContent":"on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["252",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/clion/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/clion/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified above in","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["253",{"pageContent":"priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  clion:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for stable,","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["254",{"pageContent":"latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make if my","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["255",{"pageContent":"workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/clion"}}],["256",{"pageContent":"Command Line (SSH)\nYou can directly access your workspace via SSH for editing code directly using a command-line editor, such as Vim &amp; Emacs or for connecting SSH supported applications such as a database client.\nWorkspace SSH approaches\nThere are two ways to access a workspace via SSH using an SSH key or an Access Token.\nCopy SSH key from modal\nCopy SSH key from modal\nSSH Key (recommended) - By creating your own public/private SSH key pair, and uploading the public key to Gitpod you can directly SSH into a Gitpod workspace. Uploading a public key means that you do not need to keep re-visiting the Gitpod dashboard to retrieve an SSH command. It is also a more secure approach. See configure SSH for more.\n\nAccess Token - Alternatively, you can access a workspace using the copy/paste SSH command. This approach uses an access token which is reset on every workspace start. This approach is useful for quick SSH access, or when installing an SSH key locally is not possible, such as on some devices.\n\nSSH key Access\n“Note: You must upload a public key to Gitpod before you can access your workspace using an SSH key. See configure SSH for more.”\nTo access a workspace using an SSH Key:\nVisit your workspace list in","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/command-line"}}],["257",{"pageContent":"Gitpod\nView a running Gitpod workspace and click the more actions menu\nSelect &quot;connect via SSH&quot;\nCopy paste the selected command\nAccessing an SSH key from the workspace list\nAccessing an SSH key from the workspace list\nSSH Key access via modal\nSSH Key access via modal\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their preference.\nSSH to a workspace via the workspace splash page\nSSH to a workspace via the workspace splash page\nAccess Token SSH\nYou can currently copy/paste a simple SSH command to get command line access to your workspace from the Gitpod dashboard.\nVisit your workspace list in Gitpod\nView a running Gitpod workspace and click the more actions menu\nSelect &quot;connect via SSH&quot;\nNavigate to the &quot;Access Token&quot; tab\nCopy paste the selected command\nAccessing an SSH key from the workspace list\nAccessing an SSH key from the workspace list\nSSH via access token from the workspace list\nSSH via access token from the workspace list\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/command-line"}}],["258",{"pageContent":"editor as their preference.\nSSH to a workspace via the workspace splash page\nSSH to a workspace via the workspace splash page\nSSH via Local Companion\n“Note: It is possible to access your Gitpod workspaces via the command line using local companion, however access using an SSH key is the preferred approach.”","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/command-line"}}],["259",{"pageContent":"FAQs\nIs there a limit of IDE/editor connections to Gitpod?\nThere is no hard-limit about how many IDE/editors can be connected to a running Gitpod workspace. All connected IDEs/editors will have access to the same underlying file system and directories.\nWhat version of VS Code runs in Gitpod (in the browser)?\nVS Code in the browser in Gitpod uses a fork of VS Code called openvscode-server. Gitpod actively monitors VS Code&#39;s release cycle, and releases the latest version of VS Code shortly after the upstream repository is updated. You can find more information about which version of VS Code is running in the browser by navigating to &quot;Help &gt; About&quot; from a running Gitpod workspace.\nDoes Gitpod VS Code settings sync work with other products (e.g. Codespaces)?\nGitpod doesn&#39;t currently support settings sync with other hosted VS Code environments, such as Codespaces or vscode.dev.\nMy VS Code extensions are not syncing, what should I do?\nWhen installing an extension in Gitpod using the Install (Do Not Sync) option.\nExtensions defined in gitpod.yml\nExtensions manually installed from a vsix file\nCan I use both a desktop IDE and a browser editor in Gitpod?\nYes, you can. Both","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/faqs"}}],["260",{"pageContent":"desktop and browser IDEs/editors have full access to files and directories within the workspace. So, when you connect to your Gitpod workspace from your Desktop you can also access your workspace via your browser. This means browser-based editing can either be used as your first-choice editor, or as a &quot;fall back&quot; alternative option for when you want to make edits on the move. With Gitpod, where and how you edit your code is very flexible.\nWhat is the preferred IDE/editor for Gitpod?\nThere are many supported ways to edit your code in Gitpod, there is no preferred experience. Gitpod is intended to be flexible to allow you and your team to use the tools you are most familiar and comfortable with. You can edit code in Gitpod using:\nJetBrains IDE&#39;s via JetBrains Gateway\nVS Code in the browser and VS Code on desktop\nCommand-line based editors such as Vim\nPlease see the IDEs &amp; editors documentation for more details.\nDo I need a license to use JetBrains and Gitpod?\nThe licensing of Remote Development is handled on the local machine and is covered by your existing active IDE license. See JetBrains documentation for more.\nWill Gitpod support all the JetBrains IDE&#39;s?\nYes, the plan is to","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/faqs"}}],["261",{"pageContent":"eventually support all of the JetBrains IDE&#39;s. Please refer to the Gitpod roadmap for future updates.\nDoes Gitpod support the IntelliJ IDEA Community edition?\nNo, JetBrains Remote Development and Gateway are available only in the IntelliJ IDEA Ultimate edition, please refer to IntelliJ IDEA FAQ.\nWill Gitpod support JetBrains Fleet?\nJetBrains Fleet is a next-generation IDE from JetBrains. The currently supported method of using JetBrains IDE&#39;s with Gitpod is on desktop via JetBrains Gateway, please refer to our documentation for current IDE and editor support and the Gitpod roadmap for future updates.\nCan I use JetBrains Projector with Gitpod?\nGitpod does not officially support JetBrains Projector. Gitpod has support for JetBrains Gateway, which is the primary tool for remote development when using JetBrains IDE&#39;s.","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/faqs"}}],["262",{"pageContent":"GoLand\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["263",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["264",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["265",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  goland:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["266",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  goland:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are configured","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["267",{"pageContent":"on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["268",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-GO/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/goland/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/goland/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified above","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["269",{"pageContent":"in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  goland:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for stable,","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["270",{"pageContent":"latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make if my","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["271",{"pageContent":"workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/goland"}}],["272",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Connect and integrate Gitpod workspaces with your favourite IDE or editor. VS Code Browser and Desktop. JetBrains. IntelliJ. GoLand. PhpStorm. PyCharm. Vim. Emacs. SSH.&quot;,\n    title: &quot;Gitpod integrates with VS Code, JetBrains and SSH.&quot;,\n    keywords: &quot;online IDEs, JetBrains, VS Code, IntelliJ, PHPStorm, PyCharm, Rider, RubyMine, WebStorm, CLion etc.&quot;,\n  }}\n/&gt;\nIDEs &amp; Editors\nIn line with our ambition to &quot;remove all friction from the developer experience&quot;, Gitpod currently supports many popular IDE/editors e.g. JetBrains and VS Code through both the browser and on desktop. You can even use the command-line directly for editors like Vim (via SSH). There are many ways to configure your IDE/editor in Gitpod to match your preferred workflow or setup.\nConnecting an IDE/editor to Gitpod\nThe three main ways to edit code or access a Gitpod workspace:\nBrowser - Using VS Code Browser.\nSSH - Using an SSH key or an Access Token.\nDesktop - Using VS Code Desktop or JetBrains Gateway.\nSupported IDE/editors\nVS Code Browser\nVS Code","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/index"}}],["273",{"pageContent":"Desktop\nIntelliJ\nGoLand\nPhpStorm\nPyCharm\nRubyMine\nWebStorm\nRider\nCLion\nCommand Line (e.g. Vim)\nStart a workspace with an IDE/editor\nYou can start a workspace with your favourite IDE/editor directly from Gitpod Dashboard. You can do that from by clicking on the New Workspace button. Then, you can select the context url, Editor and custom workspace class.","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/index"}}],["274",{"pageContent":"IntelliJ IDEA Ultimate\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["275",{"pageContent":"different locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["276",{"pageContent":"a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["277",{"pageContent":"support of languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  intellij:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["278",{"pageContent":"tab.\nClick any version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  intellij:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["279",{"pageContent":"settings are configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["280",{"pageContent":"following path: /workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-IU/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/intellij/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/intellij/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["281",{"pageContent":"locations specified above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  intellij:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["282",{"pageContent":"whether to index for stable, latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["283",{"pageContent":"optimizations I can make if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["284",{"pageContent":"logs in JetBrains Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/intellij"}}],["285",{"pageContent":"Gitpod Local Companion\n“{title} is currently in Beta · Send feedback.”\nPlease refer to the Gitpod Local Companion - localhost is going remote announcement blog post for more details on how to explore the beta release of the Gitpod local companion.\nConnect To VS Code Desktop\nWhilst it is possible to use the Gitpod local companion to connect your desktop VS Code application to Gitpod, the best way is to use the Gitpod VSCode Plugin, which you can access directly from the command pallette via any Gitpod the workspace. For more details about VS Code Desktop, please refer to the VS Code desktop support docs.","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/local-companion"}}],["286",{"pageContent":"PhpStorm\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["287",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["288",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["289",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  phpstorm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["290",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  phpstorm:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["291",{"pageContent":"configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["292",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-PS/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/phpstorm/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/phpstorm/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["293",{"pageContent":"above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  phpstorm:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["294",{"pageContent":"stable, latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["295",{"pageContent":"if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["296",{"pageContent":"Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/phpstorm"}}],["297",{"pageContent":"PyCharm\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["298",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["299",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["300",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  pycharm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["301",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  pycharm:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["302",{"pageContent":"configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["303",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-PY/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/pycharm/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/pycharm/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["304",{"pageContent":"above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  pycharm:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["305",{"pageContent":"stable, latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["306",{"pageContent":"if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["307",{"pageContent":"Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/pycharm"}}],["308",{"pageContent":"Rider\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nPrerequisites\nTo successfully use Rider and load a .NET project, your workspace needs the .NET Framework or a compatible alternative, to be installed. The default workspace image does not come with .NET pre-installed, so you have two options:\nUsing the .NET workspace image (Recommended)\nCreate a .gitpod.yml file\nSet the","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["309",{"pageContent":"image property to image: gitpod/workspace-dotnet:latest or alternatively, use a custom Dockerfile\nIf you need a specific version of .NET, check out our Dockerfile so you can create your own, specifying the version you need.\nFor additional examples, check out .NET in Gitpod.\nManually install .NET\nUsing a workspace terminal, install dotnet or a compatible alternative\nRestart the IDE\nNote: manually installed dependencies are only available in the current workspace, when you start a new workspace dotnet will not be pre-installed, for this reason we recommend the first option.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["310",{"pageContent":"running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["311",{"pageContent":"Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["312",{"pageContent":"possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  rider:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["313",{"pageContent":"currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  rider:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["314",{"pageContent":"IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path: /workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["315",{"pageContent":"committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/rider/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/rider/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["316",{"pageContent":".dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\nCurrently, prebuilds for Rider are not supported. To leave feedback or check for updates, see gitpod/issues/6740.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["317",{"pageContent":"IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["318",{"pageContent":"working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rider"}}],["319",{"pageContent":"RubyMine\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["320",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["321",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["322",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  rubymine:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["323",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  rubymine:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["324",{"pageContent":"configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["325",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-RM/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/rubymine/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/rubymine/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["326",{"pageContent":"above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  rubymine:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["327",{"pageContent":"stable, latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["328",{"pageContent":"if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["329",{"pageContent":"Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/rubymine"}}],["330",{"pageContent":"VS Code settings sync\nVS Code is beloved for its endless customization possibilities.\nHowever, you may come across the challenge of having many multiple VS Code instances needing to share the same extensions, themes and settings. Since every start of a Gitpod workspace is a new instance of VS Code, using Settings Sync helps you avoid re-setting your environment for each new workspace and embrace ephemeral Gitpod workspaces.\nHow VS Code Setting Sync works\nOnce enabled, Settings Sync polls the backend to ensure that your settings are stored. To save network bandwidth and allow for more frequent synchronization only changed items are pushed to the server after the first sync.\nThe following settings are synced via Settings Sync:\nVS Code preferences\nKeybindings\nSnippets\nTasks\nInstalled Extensions\nGlobal State\nGitpod vs Microsoft Settings Sync\nBy default, most desktop VS Code installations are configured to sync settings via a GitHub or a Microsoft account. These settings are synced to Microsoft&#39;s servers and are inaccessible to third-parties, including Gitpod. Due to this limitation of access to settings stored in Microsoft servers, Gitpod implements its own VS Code settings","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/settings-sync"}}],["331",{"pageContent":"sync server. Gitpod Settings Sync is enabled by default for VS Code in the browser, but must be configured for desktop.\nEnabling Settings Sync in VS Code Browser\nVS Code in the browser with Gitpod has Settings Sync enabled by default, syncing preferences to Gitpod&#39;s servers.\nEnabling Settings Sync in VS Code Desktop\nInstall and enable the Gitpod extension.\nNote: If you open VS Code Desktop directly from Gitpod, the Gitpod extension is automatically installed for you.\nUsing the Command Palette select: &quot;Settings Sync: Enable signing in with Gitpod&quot;.\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nRestart your VS Code Desktop application.\n“Important: You must entirely close VS Code Desktop for changes to take effect.”\nEnable settings sync from the Manage gear menu at the bottom of the Activity Bar.\nYou must authenticate with Gitpod to enable settings sync.\nYou will be prompted which settings to sync, and to authenticate via Gitpod.\nResolve any settings conflicts\nSettings in VS Code Desktop might differ from your remote settings, follow the instructions in VS Code to resolve any conflicts with the preferences","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/settings-sync"}}],["332",{"pageContent":"files.\nFAQs\nHow do I disable VS Code Settings Sync?\nSearch for settings sync off in your VS Code Command Palette and hit Enter.\n“Note: This will only work properly inside of VS Code Desktop. If you choose to disable Settings Sync inside of VS Code Browser, you will have to disable it in every new workspace and every time a workspace restarts.”","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/settings-sync"}}],["333",{"pageContent":"VS Code Browser\nVS Code Browser is the default editor that workspaces open in when using Gitpod. You can even configure your VS Code extension preferences by updating your .gitpod.yml.\nVS Code\nChanging the VS Code Browser version\nVS Code Browser in Gitpod is based on a fork of VS Code called OpenVSCode Server\n. VS Code in the browser in Gitpod is updated frequently, to use the latest nightly build of Gitpod you can switch to the &quot;insiders&quot; version of VS Code from your Gitpod preferences page.\nSettings Sync\nBy default, all your extensions and other preferences are synced between all of your workspaces on Gitpod. You can read more about over at Settings Sync.\nUpload Files\nYou can upload files to your workspace by dragging and dropping them into the editor. You can also upload files by clicking the &quot;Upload&quot; button in the file explorer.","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-browser"}}],["334",{"pageContent":"VS Code extensions\nGitpod already comes well equipped for most development tasks, and provides language support for the most popular programming languages such as Python, JavaScript, Go, Rust, C/C++, Java, Ruby, and many more out of the box.\nStill, you may wish to customize Gitpod, or to extend it with new features. You can do this by installing VS Code extensions.\nyoutube: TwXYbZKEuoA\nInstalling an Extension\nTo install a VS Code extension in Gitpod, simply go to the left vertical menu, and open the Extensions view. There you can search for an extension and install it with one click.\nFor VS Code Browser, we use the Open VSX registry. If you can&#39;t find an extension you use in your local VS Code, please read the &quot;Where do I find extensions?&quot; section below.\nIf the extension is helpful to anyone who works on the project, you can add it to the .gitpod.yml configuration file so that it gets installed for anyone who works on the project. To do that:\nVisit the extension page (where you installed it from)\nClick the settings icon\nSelect &quot;Add to .gitpod.yml&quot; from the menu\nYour project&#39;s .gitpod.yml is updated automatically and lists the given extension. You can also directly edit","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-extensions"}}],["335",{"pageContent":"this file to install or remove extensions manually.\nHere is an example of what a .gitpod.yml with installed extensions may look like:\nvscode:\n  extensions:\n    - svelte.svelte-vscode\n    - bradlc.vscode-tailwindcss@0.6.11\n    - https://example.com/abc/releases/extension-0.26.0.vsixYou can share the installed extensions with your organization by committing the .gitpod.yml change and pushing it to your Git repository.\nExtensions are installed in the /workspace/.vscode-remote/extensions/ directory.\nUser Extensions\nYou have two options to install extensions for yourself only:\nFor the current workspace only - if you don&#39;t want extensions to be synced across workspaces, select Install (Do Not Sync) instead of Install when installing new extensions.\nFor all your workspaces - can be useful for extensions that you want to have in all your projects (for example a custom theme), and this doesn&#39;t require changing every project&#39;s .gitpod.yml configuration. All manually installed extensions are synced across workspaces by default.\nYou can read more about why and how extensions are synced on the Settings Sync page.\nBuilt-in Extensions\nGitpod already comes with a number of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-extensions"}}],["336",{"pageContent":"commonly used VS Code extensions pre-installed by default.\nYou can view all pre-installed extensions by navigating to VS Code&#39;s Extensions section on the left-hand side. In the &quot;Search Extensions in Marketplace&quot; input field, type @builtin to see the built-in extensions.\nUse of Microsoft-owned extensions in Gitpod\nYou can only use extensions available on the Open VSX registry with VS Code Browser on Gitpod. Microsoft only permits use of their marketplace via &quot;Microsoft’s publicly supported interfaces&quot; (see their ToS section 1f), and this restriction applies to the Gitpod VS Code Browser integration. If you wish to use extensions from Microsoft&#39;s VS Code Marketplace, you must use VS Code Desktop.\nThe following extensions are therefore not available in VS Code Browser:\nMicrosoft Pylance\nMicrosoft C#\nMicrosoft .Net\nMicrosoft C++\nGitHub Copilot\nInstall VS Code extensions from a VSIX file\nIt is possible to develop, install and test your own custom VS Code extensions in Gitpod. While developing the extension, you can test it by uploading the .vsix file to your Gitpod workspace.\nPlease note:\nYou can install any private extensions using manual VSIX","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-extensions"}}],["337",{"pageContent":"installation.\nInstalling a .vsix in Gitpod does not list that extension anywhere public.\nAny .vsix referenced in the .gitpod.yml must be publicly accessible.\nOpen VSX\nOpen VSX is an open source VS Code extensions registry. For VS Code Browser in Gitpod, Gitpod uses a self-hosted mirror of the public Open VSX instance provided by the Eclipse Foundation, open-vsx.org. Any extensions published to Open VSX are immediately reflected in the Gitpod OpenVSX mirror.\nWhy do we need Open VSX?\nVS Code Browser is prohibited from accessing the Microsoft VS Code Extensions marketplace.\nSee Use of Microsoft owned extensions in Gitpod for more.\nWhere do I find extensions?\nIf you cannot find an extension by searching in Gitpod using VS Code Browser, the extension, in many cases, was not yet added to the Open VSX registry.\nIn that case, please reach out to the extension author and politely ask them to publish their extension to the vendor-neutral, open-source Open VSX registry. The &quot;how to Publish an Extension&quot; docs provide step-by-step instructions.\n“Note: .vsix files downloaded from the Visual Studio Marketplace should not be installed in Gitpod.”\nSee Use of Microsoft owned extensions in","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-extensions"}}],["338",{"pageContent":"Gitpod for more.","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode-extensions"}}],["339",{"pageContent":"VS Code Desktop\nWith VS Code Desktop Support, you keep your local editor configurations1 and benefit from Gitpod&#39;s high-spec servers &amp; automated prebuilds. As usual, your code executes in an ephemeral Gitpod workspace, keeping each of your projects isolated from one another.\nyoutube: kI6firDA0Bw\nOpen a workspace in VS Code Desktop\nThere are currently three supported ways to open a VS Code Desktop session connected to a Gitpod workspace, either by opening it from the Gitpod dashboard, choosing VS Code Desktop as your default preference, or directly from within VS Code Browser itself.\nOpen VS Code Desktop from the Gitpod Dashboard\nYou can start a workspace with VS Code Desktop directly from Gitpod Dashboard. You can do that from by clicking on the New Workspace button. Then, you can select the context url, Editor and custom workspace class.\nOpen VS Code Desktop from VS Code Browser\nStart a new Gitpod workspace\nOpen the command palette (CtrlCmd + Shift + P)\nType &quot;Open in VS Code&quot; and hit Enter\nYou will now be redirected to VS Code Desktop.\nOpen VS Code via the Command Palette\nOpen VS Code via the Command Palette\nOpen VS Code via the Command Palette\nOpen VS Code Desktop using","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["340",{"pageContent":"your preferences\nNavigate to your Gitpod preferences\nSelect &quot;VS Code&quot; (without the browser label)\nRestart any running workspaces\nWhen the workspace starts, you will be prompted to open VS Code Desktop. You can also access your workspace using VS Code Browser, or copy SSH credentials from this page.\nOpen VS Code Desktop from the workspace start page\nOpen VS Code Desktop from the workspace start page\nOpen VS Code Desktop from the workspace start page\nSelecting VS Code Desktop as an editor preference\nSelecting VS Code Desktop as an editor preference\nSelecting VS Code Desktop as an editor preference\nConnecting to VS Code Desktop (SSH)\nThe three main methods granting VS Code Desktop access to your workspace are:\nSSH Gateway access using an uploaded public SSH key (recommended)\nSSH Gateway access using the owner token\nUsing Local Companion (legacy)\nSee configure SSH for more on SSH Gateway.\n“Important: You must first ensure that gitpod.remote.useLocalApp is set to false in your VS Code user preferences for Gitpod to connect via the two SSH Gateway methods.”\nConnect to VS Code Desktop using an uploaded public SSH key\nFirst, VS Code Desktop will check if you have already added a","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["341",{"pageContent":"public SSH key to Gitpod and that the associated private key is available on your device.\nIf you haven&#39;t set up an SSH key with Gitpod, you can go to gitpod.io/keys to upload a public key. Alternatively, you can continue using the owner token approach detailed below.\nYou must have at least one public key uploaded to Gitpod, and a matching private key locally on your device to avoid this prompt. VS Code Desktop will look to find private keys in the following named files within the .ssh directory listed under your home directory.\nid_dsa\nid_dsa\nid_ecdsa\nid_rsa\nid_ed25519\nid_xmss\nid_ecdsa_sk\nid_ed25519_sk\nConnect to VS Code Desktop using the workspace owner token\nIf you cannot upload a public key to Gitpod (for whatever reason) selecting Copy will allow you to proceed to access your Gitpod workspace using the owner token approach. Selecting Copy will copy the necessary password to your clipboard to be pasted in the subsequent password prompt.\nVS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy\nVS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["342",{"pageContent":"previous page by selecting Copy\nVS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy.\n“Note: Gitpod previously required a local private SSH key to be stored in the default SSH directory, otherwise Gitpod would prompt for a &quot;password&quot;. This limitation is no longer required. If not using an SSH uploaded key, you may be prompted for a password (the owner token), or asked for the passphrase associated with your SSH key.”\nConnect to VS Code Desktop using Local Companion (Legacy)\nIf VS Code Desktop cannot connect directly via the SSH Gateway methods described above, the Local Companion approach is used as a fallback to tunnel your SSH connection. Gitpod via the VS Code Desktop plugin will download and start the Local Companion process on your behalf.\nThis approach is not recommended because:\nIt overwrites your remote.SSH.configFile VS Code setting.\nDownloads and starts Local Companion in a non-transparent way.\nIs less performant than the SSH Gateway approach.\nIf required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["343",{"pageContent":"gitpod.remote.useLocalApp in your user preferences to true.\nThe VS Code Desktop Gitpod extension useLocalApp setting\nThe VS Code Desktop Gitpod extension useLocalApp setting\nThe VS Code Desktop Gitpod extension &quot;useLocalApp&quot; setting\n“Deprecation Notice: The fallback SSH connection using Local Companion for VS Code Desktop will be deprecated in a future release of Gitpod. If you cannot connect to your workspaces directly via SSH, for example, because your firewall is blocking the SSH connection, please contact support with troubleshooting logs.”\nReconnect to VS Code Desktop\nWhen VS Code Desktop disconnects from the workspace, either you are experiencing genuine connectivity issues, or it&#39;s possible that the workspace has timed out and stopped.\nVS Code Desktop attempting to reconnect\nVS Code Desktop attempting to reconnect\nVS Code Desktop attempting to reconnect\nTo restart the workspace, click Open Workspace from the workspace start page or from the dashboard and VS Code Desktop should automatically reconnect.\nPlease note: There is currently no way to start a workspace directly from VS Code Desktop.\nOpen workspace button shown on a stopped workspace","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["344",{"pageContent":"page\nOpen workspace button shown on a stopped workspace page\nThe open workspace button shown on a stopped workspace page\nVS Code settings sync\nYou can optionally enable Settings Sync with Gitpod to keep your extensions, themes and settings up-to-date with VS Code Browser and Desktop. See VS Code settings sync for more\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nEnable Settings Sync with Gitpod\nManaging VS Code extensions\nVS Code runs extensions in one of two places: locally on the UI / client side, or remotely on your Gitpod workspace.\nFor further details, please refer to the official VS Code docs on how to manage extensions.\nCustom fonts in VS Code Desktop\nThe process of installing fonts matches how you typically install custom fonts locally:\nDownload the desired font to your local machine and install it locally on your operating system.\nOpen the editor&#39;s user settings (e.g. File &gt; Preferences &gt; Settings &gt; User)\nConfigure your font with the editor.fontFamily setting:{\n  \"editor.fontFamily\": \"Your custom font name\"\n}\nOptimizing VS Code Desktop\nIf you&#39;re using VS Code Desktop for frequent work you&#39;ll want to optimize your setup. Below","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["345",{"pageContent":"are some tips to get a workspace set up as efficient as possible.\nSSH fingerprint\nAccepting the SSH fingerprint in VS Code\nAccepting the SSH fingerprint in VS Code\nAccepting the SSH fingerprint in VS Code\nIt is common convention to be asked for a fingerprint when accessing a new SSH server. When the fingerprint is accepted, a reference to the server is stored in your local known_hosts file, which suppresses subsequent SSH connection prompts for that server.\nYou should only be presented with a request to trust the Gitpod workspace when using the legacy Local Companion approach of connecting to VS Code Desktop.\nBy swapping to the SSH Gateway approach of accessing VS Code Desktop, your known hosts file will be updated automatically. See connecting to VS Code Desktop for more.\nWorkspace Trust\nThe VS Code Workspace Trust popup\nThe VS Code Workspace Trust popup\nThe VS Code Workspace Trust popup\nWorkspace Trust is a feature within VS Code implemented to help prevent automatic code execution by disabling or limiting the operation of several VS Code features: tasks, debugging, workspace settings, and extensions.\nWhen opening a Gitpod workspace with VS Code Desktop for the first time you will be","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["346",{"pageContent":"prompted by a trust modal (given that you have not disabled the workspace trust setting in VS Code).\nSelecting &quot;Yes, I trust the authors&quot; will open the workspace and store a reference to the workspace host and directory. Opening the same workspace will not show the prompt again. However, due to a hostname change, new workspaces require trust to be accepted on first open.\nChoosing &quot;No, I do not trust the authors&quot; will enter you into the VS Code Restricted Mode. You can edit code in your workspace, but some features will be restricted. You can disable the VS Code Restricted Mode after the initial prompt.\nIf required, you can disable the workspace trust feature, however this is not recommended. Select &quot;Manage Workspace Trust&quot; from the Manage gear menu to view and modify your VS Code Workspace Trust settings.\nUpdating Workspace Trust settings\nUpdating Workspace Trust settings\nUpdating Workspace Trust settings\nSee Workspace Trust in the VS Code official documentation for more.\nFAQs\nWhen opening VS Code Desktop, the owner token wasn&#39;t copied to my clipboard, where can I find it?\nWhen opening VS Code Desktop, if you are being prompted for the owner token","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["347",{"pageContent":"password, but cannot copy it to clipboard, you can find the password on the gitpod workspaces page under &quot;connect via SSH&quot;.\nThe password prompt in VS Code Desktop for the owner token\nThe password prompt in VS Code Desktop for the owner token\nThe password prompt in VS Code Desktop for the owner token\nAccessing the owner token string manually from the Gitpod dashboard\nAccessing the owner token string manually from the Gitpod dashboard\nAccessing the owner token string manually from the Gitpod dashboard\n“Note: Pattern of the owner token is: user#password@host”\nHow do I know whether I&#39;m connecting to VS Code Desktop via Local Companion or SSH Gateway?\nIf you&#39;re unsure whether you&#39;re connecting via the local companion, or SSH Gateway approach, when connected to your Gitpod workspace, VS Code Desktop will show the connection host in the bottom left.\nSSH Gateway - SSH: workspaceid.ssh.*.gitpod.io\nLocal Companion: workspaceid (no domain)\nThe SSH host information shown in the bottom left of VS Code Desktop\nThe SSH host information shown in the bottom left of VS Code Desktop\nThe SSH host information shown in the bottom left of VS Code Desktop\nI&#39;m being asked to choose","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["348",{"pageContent":"the platform of the remote host. What should I choose?\nWhen connecting, sometimes VS Code Desktop fails to automatically detect the host OS of a Gitpod workspace, asking the following: Select the platform of the remote host &quot;{id}&quot;.\nNo matter what the OS is on your computer, you should always choose Linux as the remote host platform, since this is the operating system all Gitpod workspaces run on.\nIf you choose another option, you may encounter an error like this:\nResolver error: Error: Got bad result from install scriptI&#39;m being prompted for a password/passphrase but VS Code Desktop cannot authenticate?\nThe owner token prompt and passphrase prompt in VS Code Desktop can look similar, however require different inputs. If you&#39;re seeing a failure to connect it could be you are using the incorrect authentication method, e.g. pasting an owner token for a passphrase, or vice versa.\nOwner token - If the password prompt in VS Code Desktop asks Enter password for workspace@\\*.gitpod.io, this prompt is for the owner token of the workspace, not the passphrase associated with your SSH key.\nThe password prompt in VS Code Desktop for the owner token\nThe password prompt in VS Code Desktop","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["349",{"pageContent":"for the owner token\nThe password prompt in VS Code Desktop for the owner token\nAccessing the owner token string manually from the Gitpod dashboard\nAccessing the owner token string manually from the Gitpod dashboard\nAccessing the owner token string manually from the Gitpod dashboard\nSSH key Passphrase - If your SSH key has a &quot;passphrase&quot; associated with the SSH key (it is not required for SSH keys), you&#39;ll need to enter your passphrase. If your public key has no passphrase, you should not see the passphrase prompt.\nPassphrase prompt from VS Code requiring the SSH key passphrase\nPassphrase prompt from VS Code requiring the SSH key passphrase\n“Note: If you cannot remember your passphrase, consider creating a new SSH key and uploading the new key to Gitpod.”\nHow do I enable SSH agent forwarding for Desktop VSCode?\nGitpod extension delegates ssh connection to the MS Remote - SSH extension so agent forwarding should just work if you configure it in your ~/.ssh/config file:\nHost *.gitpod.io\n    ForwardAgent yesUpload Files\nYou can upload files to your workspace by dragging and dropping them into the editor. This method works with every IDE (e.g. Intellij, PyCharm,","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["350",{"pageContent":"etc.)\nTroubleshooting\nIf you are still having issues connecting to VS Code Desktop from Gitpod, try:\nChecking your Gitpod VS Code Desktop extension version is using the latest version.\nAttempt to directly connect via SSH using the -v to show verbose SSH logs. For example: ssh -v workspacename@hostname. You can find the ssh command in the workspace list on your Gitpod dashboard, see the command-line docs for more.\nIf you&#39;re a self-hosted customer, ensure SSH Gateway is configured correctly.\nIf you are still experiencing issues using VS Code Desktop and Gitpod, please contact support with any related troubleshooting logs","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/vscode"}}],["351",{"pageContent":"WebStorm\n“{title} is currently in Beta · Send feedback.”\nGetting started\nInstall JetBrains Gateway - With the JetBrains Gateway and Gitpod plugin you can create and manage your latest 20 Gitpod workspaces.\nInstall the Gitpod plugin - Open JetBrains Gateway and you&#39;ll see the Gitpod logo on the main page. Click &quot;install&quot; to install the Gitpod plugin for JetBrains Gateway.\nUpdate your Gitpod preferences - Select {title} on the Gitpod preferences page which will set {title} as your default IDE for future workspace starts.\nStart (or restart) your workspace - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.\nImportant: You must restart any started workspaces for your IDE preferences to take effect.\nInstall Plugins\n“This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to {title} docs.”\nUnlike with regular development, JetBrains Remote development with {title} allows users to install plugins in different","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["352",{"pageContent":"locations:\n{title} backend plugins - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nJetBrains Client plugins - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nJetBrains Gateway plugins - The JetBrains Gateway is an application downloaded onto a users","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["353",{"pageContent":"local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the Gitpod JetBrains Gateway plugin).\nInstall on JetBrains Client\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\nOnce installed, a client plugin is enabled for all Gitpod workspaces the user opens (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\nTo install a plugin on JetBrains Client follow these steps:\nIn JetBrains Client open the IDE settings and select Plugins.\nFind the plugin in the Marketplace and click Install.\nInstall on {title} backend\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["354",{"pageContent":"languages and frameworks).\nWhen installed, a backend plugin only applies to the currently running Gitpod workspace and is not associated with a user. However, a plugin can be preconfigured for all users of a repository so that the plugin is enabled with every workspace start.\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.\nInstall for your current workspace\nYou can install a plugin only for your current workspace following these steps:\nIn JetBrains Client open the IDE settings and select Plugins On Host.\nFind the plugin in the Marketplace and click Install.\nPreconfigure for repository\n“JetBrains plugin support is currently in Beta · Send feedback.”\nYou can share a plugin on {title} backend with everybody working on the repository by adding it to .gitpod.yml and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the gitpod.yml configuration file. For example:\njetbrains:\n  webstorm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.bracketsYou can find the pluginId on the JetBrains Marketplace page:\nFind a page of the required plugin.\nSelect the Versions tab.\nClick any","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["355",{"pageContent":"version to copy the pluginId (short name such as org.rust.lang) of the plugin you want to install.\nInstall for your user\nIt is not yet possible to install plugins on {title} backend for your user to share across all your Gitpod workspaces.\nConfigure JVM options\n“Configuration of JVM options is currently in Alpha · Send feedback.”\nYou can adjust JVM options for {title} backend, especially if you want to increase the -Xmx memory size. For example:\njetbrains:\n  webstorm:\n    vmoptions: \"-Xmx4g\"For more detailed information on JVM options, refer to Common JVM Options from JetBrains documentation.\nConfigure IDE settings\n“Feedback needed: The JetBrains Gitpod integration is currently beta. Gitpod continues to collaborate with JetBrains. The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: #6576. Also note that JetBrains is working on comprehensive settings sync functionality.”\nWhen running {title} locally, the JetBrains IDE applies global settings to all projects on your machine. However when running in a remote context using JetBrains Gateway, it&#39;s important to note that some IDE settings are","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["356",{"pageContent":"configured on the JetBrains Client and others in the {title} backend running in your Gitpod Workspace. See below instructions for more.\nOn JetBrains Client\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don&#39;t have On Host label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\nOn {title} backend\nSettings configured on {title} backend are stored in a Gitpod workspace and have On Host label in the IDE settings.\nConfigure IDE settings per project\nSome IDE settings cannot be configured via environment variables or through setting vm options. These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\nStep 1: Manually use JetBrains UI to configure settings - Set your IDE settings as you normally would, using the JetBrains UI.\nStep 2: Find generated IDE settings - You will need to manually find any global settings generated by JetBrains backend within the following path:","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["357",{"pageContent":"/workspace/.config/JetBrains&lt;-latest&gt;/RemoteDev-WS/&lt;your-project-name&gt;/options\nStep 3: Move any relevant settings manually to a persistent location within your Gitpod project. Either via a Workspace Image, or persisted in the version control of your project, for example by committing settings data to GitHub.\nInclude relevant IDE settings in your Workspace Image\n/home/gitpod/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/home/gitpod/.gitpod/jetbrains/webstorm/options - This location will apply settings only to the given IDE, e.g. {title}.\nCommit relevant IDE settings to source control\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/options - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n/workspace/&lt;your-project-name&gt;/.gitpod/jetbrains/webstorm/options - This location will apply settings only to the given IDE, e.g. {title}.\nFor any further changes to your IDE settings, you will need to follow the above steps again.\n“Note: When locating and applying IDE settings, Gitpod will read the locations specified","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["358",{"pageContent":"above in priority order. The locations specified first are overriden by the locations specified later.”\nConfigure IDE settings per user\nTo configure IDE settings for your user only, and not all those using a project.\nFollow the instructions for configuring IDE settings per project, but instead use .dotfiles rather than a workspace image or source control to store your IDE settings.\nIndexing using Prebuilds\n“JetBrains Prebuilds is currently in Alpha · Send feedback.”\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\nYou can speed up the indexing of a project by applying these general recommendations.\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\nTo leverage it:\nconfigure prebuilds for your repository, refer to Prebuilds;\nenable indexing for {title} in prebuilds by editing .gitpod.yml in your repository:\njetbrains:\n  webstorm:\n    prebuilds:\n      version: stablepush changes to your Git repository to apply.\nThe version property allows you to control whether to index for","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["359",{"pageContent":"stable, latest, or both versions of {title} compatible with Gitpod.\nUsers can switch between stable and latest versions of {title} on the user preferences page.\nWorkspace performance\nWhen using a Gitpod workspace you might experience performance issues caused by:\nAn application using more resources than expected\nResource consumption in adjacent containers running on the workspace node.\nIn your JetBrains IDE within the JetBrains Gateway Backend Control Center you can find two metrics relating to your running workspace: Workspace CPU and Workspace Memory.\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n“Note: Performance information shown in the Backend Control Center is the same as the information that is shown when running the command gp top in your workspace, see the Command Line Interface documentation for more.”\njetbrains performance\nFAQs\nFor the questions about supported IDEs and Editors in Gitpod, refer to FAQs.\n\nFor the general questions about JetBrains Remote Development, refer to refer to the general IDE {title} FAQ.\n\nAre there any JetBrains optimizations I can make","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["360",{"pageContent":"if my workspace is slow?\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you&#39;re operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\nFirstly, to gather information on performance, you can view workspace performance metrics from within the IDE in the Backend Control Center, or by using gp top.\nYou may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the vmoptions value for your JetBrains IDE in your .gitpod.yml.\n“Note: If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a config-patch. Configuring workspace resources is not yet available on SaaS.”\nTroubleshooting\nWhat should I do if JetBrains Gateway and Gitpod aren’t working?\nGitpod logs in JetBrains Client\nGitpod logs in JetBrains","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["361",{"pageContent":"Gateway","metadata":{"source":"https://gitpod.io/docs/references/ides-and-editors/webstorm"}}],["362",{"pageContent":"Security FAQ\nWhat type of data does Gitpod collect?\nGitpod processes first name, last name, and email in order to provide the services, in addition to the user account from your company’s code repository. For more information, please contact your Account Manager for the Gitpod DPA.\nHow does Gitpod integrate with code repositories?\nAuthentication occurs via OAuth tokens which can be revoked and/or re-authorized at any time.\nHow is data secured within the Gitpod platform?\nAll Workspace content is encrypted at rest with (AES256) and in-transit (TLS 1.2 or above).\nAre Workspaces isolated?\nWorkspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.\nHow is Gitpod’s Infrastructure deployed?\nGitpod is deployed on GCP and AWS. Their certifications are available here and here.\nWhat certifications does Gitpod have?\nWe are SOC 2 Type 2 compliant for two years running and conduct pentesting at least annually. Reports are available upon request and under MNDA; please contact your Account Manager.\nHow does Gitpod deploy?\nGitpod can be hosted end-to-end by us, or deployed by you in your own AWS account. For more","metadata":{"source":"https://gitpod.io/docs/references/security/faq"}}],["363",{"pageContent":"information, please see this link for deployment architecture.","metadata":{"source":"https://gitpod.io/docs/references/security/faq"}}],["364",{"pageContent":"February Release 2019 🎉\nWe are close to leaving the beta phase and with that are also approaching a more regular release schedule.\nThis means we are going to have monthly release notes. They will pop up only once and you can easily dismiss them by pressing [ESC].\nIf you want to look up the release notes later you can open them through the command palette [F1]. Simply search for &#39;Release Notes&#39;.\nSo here are the new &amp; noteworthy things that we have been hard at work at this time.\nGitHub Links\nYou can now navigate to GitHub directly from the editor. The GitHub URL of any editor position or selection can be accessed with a right-click, and used for example in GitHub issues or Pull Request comments to reference interesting code locations.\nGitHub Links\nSnapshots\nIn addition to live sharing a running Gitpod workspace, you can now take a snapshot. Snapshots capture the current state of a workspace session including the UI layout and the file changes. Anyone who has a snapshot link can create a fresh workspace based on that.\nThis is super handy for providing reproducibles in GitHub issues and StackOverflow posts. They are also great to prepare trainigs, tutorials, or just to showcase stuff you have","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["365",{"pageContent":"thrown together.\nPlease see this blog post as well as the documentation for more details.\nSnapshot\nConfiguration\nThe possibilities to fine-tune the developer experience when using Gitpod on your repository have been improved. Here are the features you can define in your .gitpod.yml:\nTasks\nYou can now specify multiple tasks. Each task will have its own terminal view on start. You can even specify where those terminals whould be opened.\nThe following config, for instance, will make sure that two terminals are opened next to each other.\ntasks:\n  - command: echo 'left'\n  - command: echo 'right'\n    openMode: split-rightSplit Terminals\nLifecycles\nIn addition we have introduced multiple lifecycle phases for the tasks, such as init and before. The main purpose is to avoid rerunning unnecessary commands such as full builds, when restarting workspaces or opening snapshots.\nCheck the table below for an overview of the different starting scenarios.\n\nStart ModeExecution\n\n\nFresh Workspacebefore &amp;&amp; init &amp;&amp; command\n\nRestart Workspacebefore &amp;&amp; command\n\nSnapshotbefore &amp;&amp; command\n\nPorts\nYou can now specify the default behavior on port detection. By","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["366",{"pageContent":"default users get a notification when starting a server, asking whether they want to open a web view or an external browser.\nThis behavior can now be pre-configured so users are not bothered with annoying notifications. Here is an example where we configure port 8080 to automatically open in a web preview pane:\nports:\n  - port: 8080\n    onOpen: open-previewCheck out the docs to learn more about pre-configuring things in Gitpod.\nYAML Support\nGitpod now understands YAML syntax and uses json schema specifications to validate and guide developers. While this works for any YAML files it comes in especially handy when editing .gitpod.yml.\nyaml in action\nGitpod CLI\nThe CLI for Gitpod has learned new tricks. Check out all the cool things you can do with it by typing gp help.\nHere are the new commands we added:\ngp init\nTo get the best experience with Gitpod, you should configure your repository to have the right tools, run the right commands on start, etc. This information is stored in a .gitpod.yml file sitting in your repository.\nThe gp init command walks you through the basic setup and generates a .gitpod.yml and if desired a corresponding Dockerfile.\ngitpod /workspace/my-repo $ gp init\nUse the arrow","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["367",{"pageContent":"keys to navigate: ↓ ↑ → ←\n? Workspace Docker image:\n  ▸ default\n    custom image\n    docker fileMore information about writing .gitpod.yml configurations can be found in the docs.\ngp url\nOne of the things you do in a .gitpod.yml is declaring the exposed ports. Gitpod maps them to a specific subdomain in order to make them accessible. For instance if you have a dev server running on 0.0.0.0:3000 the gp url command gives you the external url for that service.\nHere is an example:\ngitpod /workspace/release-notes $ gp url 3000\nhttps://3000-b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/gp url can also give you the URL of the workspace itself:\ngitpod /workspace/release-notes $ gp url\nhttps://b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/gp preview\ngp preview is similar to gp open, except that it does not open a file in the editor but a URL in a preview pane on the right.\nThis is especially handy together with gp url if you want to open a specific path from a script.\nHere&#39;s an example:\ngp preview $(gp url 3000)my/special/path.htmlImproved Docker Performance\nIn addition to the .gitpod.yml you can provide a Dockerfile which is automatically picked up by Gitpod. See this","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["368",{"pageContent":"blog post for more information on setting up a Dockerfile for your project.\nFor example, here is a Dockerfile that allows developing native UI applications in Go on Gitpod:\nFROM gitpod/workspace-full-vnc\nRUN sudo apt-get update && \\\n    sudo apt-get install -y libgtk-3-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*Since we launched this feature, the performance and logging for docker builds have also been improved significantly.\nStatus Page\nAs we continuously improve and expand Gitpod, there are times when things inevitably don&#39;t go as planned, occasionally causing downtime. If you&#39;re ever curious about the status of gitpod.io, or you&#39;d like to follow how we resolve an incident, we made status.gitpod.io just for you.\nIn fact, thanks to Statusfy, it took us just a few hours to build an entire open source status page. Learn more about this short adventure in this blog post.\nJava Debugging\nIn addition to Node.js one can now also launch and debug Java applications directly from within the editor. Code lense actions on main() methods will automatically use the right classpath from the current project settings (based on maven, gradle or eclipse classpath information).\nLaunch configs","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["369",{"pageContent":"are stored in a VS Code compatible launch.json file.\nDebug Java\nXML Support\nThe new improved XML support not only does syntax highlighting for XML and XSD but also uses associated schemas to provide diagnostics, content assist and hover information.\nXML Support\nBetter Previews\nPreviews can now easily be opened by clicking on the top right icon (icon) on any previewable files, such as Markdown, HTML and SVG files.\nThe inverse is supported, too. I.e. clicking the file icon on the top right of a preview will open the corresponding editor on the left. For Markdown even scrolling is synced between the two views.\nAsciiDoc Support\nIn addition to Markdown, Gitpod now also supports previewing AsciiDoc as you type.\nMany Bugfixes, small features and other improvements\nThese are just the most noteworthy features we have been working on.\nFor a more detailed list of bugfixes and enhancemenst see all the issues we&#39;ve closed:\nClosed Issues in Gitpod\nMerged PRs in Theia","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-02-15/february-2019"}}],["370",{"pageContent":"June 2019\nAfter the public launch of Gitpod.io in April, we have spent most of our time on changing our internal architecture to better scale and improve the cloud density as well\nas supporting VS Code extension. Although this work is not yet finished, we have added a bunch of new features on the way, which are listed below.\nToggle Maximize\nSimple but useful: Double-clicking a tab will maximize the corresponding panel.\nLinks in terminals\nYou can now follow links and open files from the terminal by clicking on the respective links.\nTerminal Links\nEnvironment Variables\nGitpod allows users to inject environment variables into workspaces. Based on a simple pattern against the repository name\none can filter which env vars are actually injected. Also please note that all environment variable values are encrypted before stored in the database.\nIn addition to user-based environment variables, you can pass environment variables through the context link on start.\nSee the docs for more information.\nBi-directional Scroll Sync\nWhen editing Markdown files it is very convenient to see the preview next to the editor. You can open a preview by click the icon on the top right of the editor.\nNow you can","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-06-17/june-2019"}}],["371",{"pageContent":"scroll both the editor or the preview and see how the other part is scrolling with it, showing the corresponding sections.\nContributed through PR #5442.\nBetter Rust support\nIn addition to the Go VS Code extension, Gitpod now also runs the official Rust VS Code extensions.\nSo expect faster and more reliable support for Rust.\nEmmet support\nGitpod comes with support for emmet, a web-developer’s toolkit that can greatly improve your HTML &amp; CSS workflow.\nAmong other things it allows to quickly generate html boilerplate using shortcuts.\nEmmet\nSee the cheat-sheet for a quick overview of what&#39;s supported.\nDebugging in Java\nThe debugging of Java applications had a problem in that it the process would pick a wrong java executable when launching processes.\nThis is now fixed.\nBetter Upload\nYou can now upload large files through drag and drop and see proper progress information on the top of the window.\nImproved C++ Language Support\nWe have upgrade the language services to use the latest clangd version.\nBetter Git Amend\nThe git amend UI has been improved so that you can amend / squash multiple commits but also\nundo that.\nAlso the entire SCM widget has been rewritten to match VS Code&#39;s","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-06-17/june-2019"}}],["372",{"pageContent":"UX.\nConfig: Port ranges\nIn your .gitpod.yml one can now specify port ranges, so you can manage antire ranges addition\nand tell Gitpod what to do when a service opens on one of those ports.\nCLI: gp await-port\nThe cli learned a new thing, that let&#39;s you wait for a certain port to open.\nThis is useful if you want to wait for a certain path and then take a specific action.\nHere&#39;s an example that will open a certain path in the preview once a service is a available port 3000:\ngp await-port 3000 && gp preview $(gp url 3000)my/path/index.htmlMany Small Improvements\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and 220 in Theia.\nWhat&#39;s next?\nWith this release we have added some additional VS Code extensions.\nThe upcoming release will allow you to install arbitrary VS Code extensions and add that as configuration to your .gitpod.yml files.\nThe GitLab integration as well as a easy-to-install, Self-Hosted version of Gitpod is in the works.\nFinally, we are looking into optimizing start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-06-17/june-2019"}}],["373",{"pageContent":"April 2019\nToday we are happy to announce that we are moving out of beta.\nWe want to thank all the beta testers who have provided great feedback. Gitpod wouldn&#39;t be what it is without you! ❤️\nYou can read more about the announcement in the blog post.\nBesides a complete relaunch of the website and app, we have added some very exciting new features:\nGitHub App / Prebuilt Workspaces 🚀\nWe have been busy developing a new GitHub app, that once installed on your repository will prebuild your project on every push.\nOn GitHub pull requests this is communicated through a status check.\nPrebuilt Check on PR\nAs a result, Gitpod is now the first IDE that builds your project, before you open it.\nRead more about this exciting feature in the docs and in Chris&#39; blog post.\nBetter localhost Handling\nWhen starting web servers in Gitpod, often times you need to explicitly make sure the dev server allows connections from non-localhost.\nStarting today, you no longer need to worry about that. Gitpod now forwards the port locally and rewrites the host headers,\nso that dev servers will be fine.\nBetter Go Support\nGitpod now directly uses Microsoft&#39;s great Go support for VS Code.\nVS Code Go Extension\nUnlimited","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-04-05/april-2019"}}],["374",{"pageContent":"Hours\nIf you don&#39;t feel comfortable with a time-based limit, you can now purchase the &#39;Unlimited&#39; plan to use Gitpod as much as you like on public and private repositories.\nWe also offer unlimited plans for teams, and for students the price for an unlimited plan is only 9$ or 8€.\n“If you have created your account during the beta, i.e. before April 5th, you will be able to work on private repositories for free for another month, on us.”\nYou can check out the various pricing options on the website.\nNew Design 💄\nAs part of the launch, we have refreshed the design of Gitpod. The website and dashboard now use a new dark theme that we hope you&#39;ll like, and the UI of the\nIDE is more closely matching the look of VS Code.\nNew Dashboard\nDelete Workspace\nYou can now delete workspaces in the dashboard. Please note that deletion can not be reversed as we are really\ndeleting all the contents of your workspace.\nYou can also delete your entire account (hopefully the least used feature).\nMany Small Improvements\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and 206 in Theia.\nWhat&#39;s next?\nWith this","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-04-05/april-2019"}}],["375",{"pageContent":"release we have already added some VS Code extensions. Going forward we will double down on the integration.\nWe are looking at one programming language after the other, making sure the experience is excellent and the VS Code extensions\nwork as expected. Once we&#39;ve reached a state where we are confident VS Code extensions work reliably in general, we will allow users to install them.\nFurthermore, we are focusing on start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://gitpod.io/docs/release-notes/2019-04-05/april-2019"}}],["376",{"pageContent":"Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod, just as you know it from gitpod.io, can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.\nRequirements for Gitpod Self-Hosted\nInstalling Gitpod Self-Hosted\nConfiguring Gitpod Self-Hosted\nTroubleshooting Gitpod Self-Hosted\nUpdating Gitpod Self-Hosted","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/index"}}],["377",{"pageContent":"Background\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis section gives you relevant background information about Gitpod Self-Hosted:\nDisaster Recovery - Best practices around disaster recovery","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/background"}}],["378",{"pageContent":"How to Backup and Restore Gitpod\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nFor business continuity purposes, it is important to think about how you might restore your ability to use Gitpod, and thus develop software in the event of a catastrophic failure of Gitpod or the underlying infrastructure it runs on. This guide assumes that you will use the backup and restore strategy for disaster recovery and will guide you towards what needs to be backed up and how to restore using said backup. Please see our background reading on disaster recovery for more information.\n“Important: When using Gitpod in a production setting, we recommend you base your installation on the single cluster reference architecture. Using in-cluster","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["379",{"pageContent":"dependencies is not recommended because there is no means to produce backups, and the database/storages systems are within failure domain of the cluster. If possible consider using Gitpod SaaS.”\n“Note: We recommend to regularly trial run a recovery using this method to ensure that it works in practice and to allow yourself the chance to spot any unforeseen issues.”\nWhat to back up\nIt is critical to consider what needs to be backed up and ensure you take the necessary steps to secure each of the listed elements. What needs to be backed up is closely aligned with Gitpod’s architecture and how it runs.\nDatabase\nThe database is a central component in Gitpod where all metadata about users and workspaces, as well as settings of the Gitpod instance (such as auth providers) are stored. This makes the database a critical component. In case of a database outage, you are not able to log in, use the Gitpod dashboard, or start workspaces. We recommend using a cloud provider native relational database service that supports MySQL - see required components. This means that you can rely on the best practices of each service for disaster recovery. For example:\nAWS Relational Database Service: You can rely on RDS’s backup","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["380",{"pageContent":"and restore mechanisms and set it up to run in multiple availability zones to allow for higher availability. You can also consider other disaster best practices.\nGoogle Cloud SQL: You can rely on Cloud SQLs backup and restore features and run the instance in a high availability configuration to decrease the chance of failure. You can also refer to the general Google Cloud disaster recovery best practices.\nObject Storage\nGitpod uses object storage to store blob data. This includes workspace backups created when a workspace stops and are used to restore the state upon restart. As such, to secure the work of your users, it is critical to think about backing up this data and/or relying on the best practices for disaster recovery of the object storage service being used. For example:\nAWS S3: You can consider using cross-region replication to increase reliability further - although S3 already stores your data across multiple geographically distant Availability Zones by default.\nGoogle Cloud Storage: Consider using the Multi-Regional Storage option for additional availability.\nOCI Image Registry\nGitpod uses an image registry to cache images and store images it builds on behalf of users. Note:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["381",{"pageContent":"For non-airgapped environments, this is not the registry that contains the images of Gitpod’s services. As such, losing this data means that workspace starts may take longer because images need to be re-built. Consider implementing best practices for securing the registry you are using.\nApplication Config\n“Important: KOTS Snapshots will NOT save any data from your Gitpod database, registry or object storage. It will also not backup any data outside of your gitpod namespace. It will backup:\nthe KOTS dashboard\nthe KOTS configuration\nthe version of Gitpod installed\nthe TLS certificate generated by cert-manager (if enabled)”\nAlthough you could simply re-install Gitpod using the regular installation path, this can take some time and you would need to re-configure it to the state you had last had it in. To minimize your recovery time, you can persist the application configuration (ideally regularly).\nConfiguring Velero\nVelero is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes. It is used by KOTS to connect to your backup location. It supports many data sources, including AWS, Azure and GCP","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["382",{"pageContent":"storage solutions.\nPlease follow the installation instructions as per the Velero documentation. KOTS requires Restic integration to function correctly, which can be added by appending the --use-restic flag to the velero install command.\nTriggering Your First Backup\n“For full documentation on the KOTS backup solution, please see their documentation.”\nTo create a new backup via the KOTS CLI or in the Snapshots section of your KOTS dashboard, you can do this by running the following command:\nkubectl kots backup --namespace gitpodWhen that has finished, you will be able to list your backups:\nkubectl kots backup lsAnd it will display a list that looks similar to this:\nNAME              STATUS       ERRORS    WARNINGS    STARTED                          COMPLETED                        EXPIRES\ninstance-ab1cd    Completed    0         0           2022-08-11 13:36:38 +0100 BST    2022-08-11 13:36:54 +0100 BST    29dCluster Configuration\nTo reduce the time it takes you to re-create a cluster, you can move to an infrastructure as code flow, e.g. by codifying the infrastructure you need using Terraform.\nHow to restore\nThe following explains how you might restore Gitpod after its underlying cluster fails.\nRecreate your infrastructure. Ideally, you do this using something like a Terraform","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["383",{"pageContent":"script.\nConfigure Velero using the instructions above - it is recommended that you install the same version that you used previously.\nList your available backups using:\nkubectl kots backup lsRestore the backup using:\nkubectl kots restore --from-backup instance-ab1cdLoad the KOTS dashboard:\nkubectl kots admin-console --namespace gitpodHit the &quot;Redeploy&quot; button.\nThis should result in your Gitpod instance having the same state as before, thus allowing your users to pick up where they left off.\nSecurity considerations\nApplication Config\nVelero should be configured so that is deployed to a different namespace to Gitpod. The Velero deployment will contain secrets which will allow access to your backup source of choice. Your Kubernetes cluster should be configured to limit access to these resources with use of a role-based access policy (RBAC).\nYou should always consult with the Velero documentation to ensure that you are following their best practice guidelines to ensure the integrity of your backup artifacts.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/backup-restore"}}],["384",{"pageContent":"Cluster Requirements\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nGitpod is a Kubernetes application running with certain expectations on the characteristics of the cluster it is running on.\ncluster requirements\nReference Architectures\nWe have created a set of reference architectures for all the major cloud providers that fulfil the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the k3s guide.\nSupported Kubernetes Distributions\nGitpod requires Kubernetes as an orchestration technology in order to spin workspaces up and down--ideally in combination with cluster autoscaling to minimize cost. We strongly","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-requirements"}}],["385",{"pageContent":"recommend deploying a dedicated Kubernetes cluster just for Gitpod Self-Hosted.\n“Kubernetes version 1.21 or above is required”\nGitpod Self-Hosted runs well on:\nAmazon Elastic Kubernetes Service\nGoogle Kubernetes Engine\nMicrosoft Azure Kubernetes Service\nK3s\nIncompatible Kubernetes Distributions\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\nRed Hat® OpenShift®\nRancher Kubernetes Engine (RKE)\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please contact us to start discussions about making support for them happen sooner.\nNode Affinity Labels Requirements\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\ngitpod.io/workload_meta=true\ngitpod.io/workload_ide=true\ngitpod.io/workload_workspace_services=true\ngitpod.io/workload_workspace_regular=true\ngitpod.io/workload_workspace_headless=true\nIt is recommended to have a minimum of two node pools, grouping the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-requirements"}}],["386",{"pageContent":"meta and ide nodes into one node pool and workspace related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime.\nNode and Container Requirements\nThese are the components expected on each node:\nEither Ubuntu 18.04 with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel\nCalico for the networking overlay and network policy\nContainerd ≥ 1.5\nAt least 4 vCPU and 16GB of RAM\nKubernetes Privilege Requirements\nYour Kubernetes cluster must allow Gitpod to run privileged pods and manage PodSecurityPolicies, as Gitpod depends on these privileges to provide workspace isolation.\nLoad Balancer Requirements\nGitpod uses LoadBalancer type services to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for LoadBalancer type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-requirements"}}],["387",{"pageContent":"services.\nAll supported Kubernetes distributions provide load balancers that meet Gitpod&#39;s needs. For more information see the Kubernetes distribution documentation below:\nGoogle Kubernetes Engine\nAmazon Elastic Kubernetes Engine:Layer 4/7 (default): Classic Load Balancer\nLayer 4 only: Network Load Balancing\n\nMicrosoft Azure Kubernetes Service\nK3s","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-requirements"}}],["388",{"pageContent":"Gitpod Configuration Patches\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nFurther customization of your installation is possible within the installation UI, where Gitpod can provide you with a config patch to tailor the installation to your specific needs. In the “Additional Options” section, click the “Enable additional options” checkbox, and upload the file in the “Gitpod config patch” field.\nconfig patch\nThe patch file is effectively a patch for the internally used Gitpod Installer config file. It gives you access to all configuration options that Gitpod accepts - even those not present in the UI. All values that are set in the patch file will override the generated config file values.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/config-patches"}}],["389",{"pageContent":"Configuring workspace resources\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nConfiguring workspace resources and limits is essential to balancing the following factors:\nWorkspace performance: The amount of compute available to each workspace\nWorkspace startup times: Having smaller workspaces on a node increases the chances of there being space available for another workspace, meaning that a new node does not need to be spun up. On the other extreme: one workspace per node means a new node needs to be spun up for every new workspace\nYour cost of compute: The fewer resources your workspaces request, the more you can fit on the node - and the fewer nodes you have to pay for\nHow to configure workspace requests and limits\n“You","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources"}}],["390",{"pageContent":"should always be setting limits for your workspaces in order to avoid a process taking up the resources of an entire node, starving all other processes. We recommend sizing workspaces onto a node such that 4 cores and 8 GiB of RAM are left unused for Gitpod&#39;s services (mainly ws-daemon) and other processes (e.g. the kubelet).”\nCurrently, workspace resources and limits can be set via a config-patch.\nFor example, assuming a machine with 16 CPUs and 64 GB of memory, we recommend the following config-patch:\nworkspace:\n  resources:\n    requests:\n      cpu: \"4\"\n      memory: 16Gi\n    limits:\n      cpu: \"4\"\n      memory: 16GiWith this configuration, 3 workspaces should fit onto the aforementioned 16 CPU / 64 GB memory node (with CPU cores being the limiting factor). A workspace would always have 4 CPUs and 16 GB of RAM available. These numbers are also used when scheduling workspaces onto pods - workspaces are only scheduled onto nodes that have at least these amounts of resources available.\n“This is intentionally on the conservative side due to potential resource conflicts concerning I/O bandwidth.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources"}}],["391",{"pageContent":"Business Continuity and Disaster Recovery Considerations with Gitpod\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n“Note: There is a lot more to disaster recovery than we can cover here. This is just a high-level overview that speaks to how disaster recovery relates to Gitpod - it does not aim to be a complete guide to the topic.”\nDisaster Recovery Principles\nThinking about disaster recovery with Gitpod is essential for business continuity and compliance reasons given how critical Gitpod is within your business’ practices: it is not only used to write code for new features but also e.g. to fix a security vulnerability.\nWhen evaluating different disaster recovery strategies, it is important to keep in mind the business impact","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/disaster-recovery"}}],["392",{"pageContent":"of different strategies. This impact is often defined by these interconnected metrics:\nRecovery Time Objective (RTO): this is the amount of time it takes to recover from a catastrophic failure. Applying this to Gitpod, this would be the time between a major outage that renders Gitpod unusable and the point at which Gitpod is restored and developers can develop again.\nRecovery Point Objective (RPO): This is the maximum amount of data loss (measured by time) during an outage that is acceptable to an organisation.\nAcceptable Cost: Different disaster recovery strategies come with different cost profiles. You need to know the acceptable cost level for your business to help choose the right strategy.\nThe accepted value of each key metric will depend on your business’ risk appetite and acceptable cost levels. These metrics can be used to better understand and categorise the different disaster recovery options available with Gitpod.\nDisaster Recovery Strategies\n“Note: Whichever disaster recovery strategy you chose, make sure that you practice it end-to-end regularly to ensure that you can execute it successfully if ever it does become necessary.”\nPlease refer to our guide around backing up and","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/disaster-recovery"}}],["393",{"pageContent":"restoring Gitpod to learn more about which data Gitpod produces and how it can be backed up.\nBackup And Restore (Higher RTO)\nWith this strategy, you aim to replace a failed Gitpod instance or Kubernetes cluster by spinning up an entirely new cluster. You can find out more on how to do this in our How to Backup and Restore Guide.\nThis strategy has the benefit of being cost-effective because you only operate a single cluster at a time. However, the time to spin up a new cluster and install Gitpod can be high increasing the time to recover. Thus, depending on your recovery time objective, it may be beneficial to evaluate the strategies mentioned below.\nPilot Light (Medium RTO)\nWith this strategy, you keep a secondary Kubernetes cluster running that is identical to the one used in production - but in a separate data center and scaled down to the minimum set of nodes to save cost. This means that you do not need to first spin up a cluster in case of disaster but can rather use the one already running to install Gitpod onto (using the same external dependencies and thus data as your production cluster) and then shift traffic to. This can significantly reduce your time to recovery but comes with the cost of running an","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/disaster-recovery"}}],["394",{"pageContent":"additional cluster.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/disaster-recovery"}}],["395",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Install and run Gitpod with full control on public cloud providers or self-managed Kubernetes clusters. Enterprise-grade security within corporate firewalls and air-gapped networks. Requirements. Installation. Configuration. GKE. EKS. AKS. Open-source.&quot;,\n    title: &quot;Gitpod Self-Hosted installation guide&quot;,\n    keywords: &quot;installation&quot;,\n  }}\n/&gt;\nSelf-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nGitpod can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.\nLocal Preview\nThe Local","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/index"}}],["396",{"pageContent":"Preview installation of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the SaaS version and cannot easily spin up a Kubernetes cluster to use the Proof-of-Value reference architecture.\nIt is intended for preview purposes only - we strongly encourage the Kubernetes-based installation below for continuous usage.\nPrerequisites to Install Gitpod Self-Hosted\n“Note: Gitpod is not just a simple Kubernetes application like a web shop app. It is more of an infrastructure tool comparable to a build system that heavily makes use of Kubernetes internals to build and deploy images, control Kubernetes containers (the workspaces) and more. This is why it needs more permissions in Kubernetes than a simple web app.”\nKubernetes expertise \nGitpod is a Kubernetes application that makes heavy use of various Kubernetes features. It is highly recommended to have sufficient Kubernetes experience in order to install Gitpod. These docs expect that you are able to create and maintain a Kubernetes cluster that meets our requirements on your own.\n\nCompatible Kubernetes cluster \nTo install Gitpod you need to have a Kubernetes cluster up and running. There are a few","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/index"}}],["397",{"pageContent":"requirements that must be met. Please see the product compatibility matrix supported Kubernetes distributions. To help you get started, there are several different situation-dependent reference architectures for all major cloud providers that include both a detailed guide as well as terraform configuration.\n\nCert-Manager \nGitpod expects a properly configured cert-manager that runs in the cluster. It is used to issue internal certificates for the Gitpod installation and to create certificates for the Gitpod domain (unless you bring your own domain certificates).\n\nDNS setup \nFor your Gitpod installation you need a properly configured domain. The domain itself and the wildcard subdomain *.example.com, *.ws.example.com (replace example.com with your Gitpod domain) need to point to the cluster ingress.\n\nGitpod product license \nTo install Gitpod, you need a license that you can get here.\n\nInstalling Gitpod\nThe installation guide provides you with step-by-step instructions on how to install Gitpod on your infrastructure.\nTroubleshooting\nRefer to the troubleshooting section for help with your Gitpod Self-Hosted Instance. You can also take a look at our support page to learn how","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/index"}}],["398",{"pageContent":"to reach our community and support team.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/index"}}],["399",{"pageContent":"Installation Guides\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis section has the guides you need to install Gitpod:\nLocal Preview - Try out Gitpod locally without having to set up a Kubernetes cluster\nReference Architectures - Help with setting up your Kubernetes cluster to run Gitpod on\nInstallation guide - How to install Gitpod onto an Kubernetes cluster\nAdvanced Installation Guides - Help with advanced installation topics","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installation-guides"}}],["400",{"pageContent":"Installing Gitpod Self-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n“Note: Setting up a self-hosted Gitpod instance needs some Kubernetes experience. Detailed guidance on how to setup and maintain a Kubernetes cluster is behind the scope of these docs. Please also see the prerequisites below.”\nPrerequisites\n“These prerequisites are fulfilled already if you used one of the reference architectures. We strongly encourage the use of these reference architectures. Please see the requirements for more information on what Gitpod needs to function.”\nGitpod is a Kubernetes application that uses Kubernetes internally to provision workspaces as Kubernetes pods. Before you can start installing Gitpod, you need to","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["401",{"pageContent":"create a compatible Kubernetes cluster. The reference architectures will help you to get started with your favorite cloud provider. If you are creating a cluster yourself, it&#39;s up to you to set up a cluster that meets the requirements.\nOnce you have created your Kubernetes cluster you need to install cert-manager. cert-manager is needed even when you bring your own TLS certificate for your domain. Please consider the cert-manager documentation on how to install it.\nTo install Gitpod you need a domain with a TLS certificate. The DNS setup to your domain needs to be configured such that it points to the ingress of your Kubernetes cluster. You need to configure your actual domain (say example.com) as well as the wildcard subdomains *.example.com and *.ws.example.com. Alternatively, you can rely on a configured Issuer/ClusterIssuer plus a Certificate (that also includes the wildcard domains) for cert-manager:\nCreating TLS certs for your domain with cert-manager\ncert-manager provides the Gitpod installation with certificates for internal communication. Besides this, cert-manager can also create a TLS certificate for your domain. Since Gitpod needs wildcard certificates, you must use","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["402",{"pageContent":"the DNS-01 challenge. Please consult the cert-manager documentation for instructions. You can use either an Issuer or ClusterIssuer.\nFollowing the cert-manager instructions, you will have an Issuer or ClusterIssuer with a configured dns01 solver (most probably with a proper secret with credentials for your DNS provider) as well a Certificate with the following dnsNames:\nexample.com\n*.example.com\n*.ws.example.com\n(replace example.com with your Gitpod domain)\nInstall Gitpod\nTo start with installing Gitpod, you need a terminal where you can run kubectl against your cluster. First, install the KOTS kubectl plugin:\ncurl https://kots.io/install | bashNow, you are ready to install Gitpod. Run the following command in your terminal:\nkubectl kots install gitpodYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin ConsoleOpen your favorite browser and go to http://localhost:8800 (port 8800 is opened on your node on localhost only--you may want to forward the port to your workstation in order to access the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["403",{"pageContent":"admin console).\nThe first page will ask you to upload your Gitpod license which you can get here For more information about our licenses and respective pricing plans, please visit our self-hosted pricing page.\nAfter uploading the license, you will be forwarded to the config page. On this page, you need to enter your domain name for your Gitpod installation. You can also configure to use external components (by default internal ones are installed) as well as your TLS certs setup or your workspace size. Click “Continue” to proceed with the installation.\nkots-install-config\nIn the next step, the installer runs a preflight check. This validates your cluster meets the minimum requirements. Everything is green? Awesome! Click “Continue” to proceed.\nkots-preflights-results\nNow, you are seeing the installation admin page. Once the installation has been finished successfully, you will see the status “Ready” with a small green indicator next to the Gitpod logo. You will also see which version you installed and which license you are using.\nkots-admin-dashboard\nOpen your Gitpod domain in your browser to access your running Gitpod instance. You should be greeted by the following screen:\nwelcome","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["404",{"pageContent":"screen\nYou will then be asked to configure a git integration:\ngit integration setup\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the Integrations section.\n“Important: Public (SaaS) Source Control Management Systems (SCMs) (i.e. GitLab.com, GitHub.com and Bitbucket.org) are not integrated by default with a Self-Hosted Gitpod instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\nFollow these steps to integrate GitLab.com with your self-hosted Gitpod instance. You will need to enter gitlab.com as the Provider Host Name in the New Git Integration Modal.\nFollow these steps to integrate GitHub.com with your self-hosted Gitpod instance. You will need to enter github.com as the Provider Host Name in the New Git Integration Modal.\nFollow these steps to integrate Bitbucket.org with your self-hosted Gitpod instance. Select Bitbucket","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["405",{"pageContent":"as the Provider Type in the New Git Integration Modal. For bitbucket.org this requires configuring an &quot;OAuth consumer&quot; on a &quot;workspace&quot;. This is slightly different from the documented Bitbucket Server integration. See gitpod PR #9894 for an example.”\n“Note: Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts should be much quicker.”\nOnce you are all set up, you can visit the getting started with Gitpod page to start learning about using Gitpod. You should also familiarise yourself with our guides around operating Gitpod Self-Hosted, especially the guide that explains how to update Gitpod.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/installing-gitpod"}}],["406",{"pageContent":"How to Install the Local Preview of Gitpod Self-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n\n\n\n\nStatus:\n\nIntended for:The Local Preview allows you to experience Gitpod Self-Hosted on your local machine without having to set up a Kubernetes cluster. It is purely intended for testing purposes. Please see the installation guides section for recommended sustainable installation methods. \n\nLimitations:- Performance is limited by the capabilities of your machine. Your experience is likely to be better when using the SaaS version (gitpod.io) or when running on one of our reference architectures  - Minimum of 4 cores and 6GB of ram required. Macs with Apple Silicon (e.g. M1) are currently not supported. See the relevant","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["407",{"pageContent":"issue for more information  - Prebuilds are not supported because they require webhooks\n\nThe Local Preview of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the SaaS version (gitpod.io) and cannot easily spin up a Kubernetes cluster to use the Proof-of-Value Reference Architecture. It allows you to try Gitpod Self-Hosted locally with minimal effort and resource requirements. As a result, this is not intended for production nor continuous usage. Please refer to the installation guide for instructions on how to install Gitpod for continuous usage. \nThis install method runs a K3s cluster inside a Docker container. Self-signed certificates are automatically created and a Gitpod instance using these certificates will be installed into the k3s cluster. See our TLS page for more information about Gitpod and certificates.\n1. Running the Docker container\nRun the following command to get the local-preview Docker container up and running:\ndocker run -p 443:443 --privileged --name gitpod -it --mount type=volume,source=gitpod,destination=/var/gitpod eu.gcr.io/gitpod-core-dev/build/local-previewUnpacking the above command:\n-p","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["408",{"pageContent":"443:443 to map the 443 container port to host.\n--privileged to be able to run docker (and hence k3s) inside the container. This is necessary.\n--name gitpod to set the name of the docker container for further access.\n--rm to delete the Docker container after stopping.\n--mount type=volume,source=gitpod,destination=/var/gitpod to create a volume called gitpod, and mounting it to the container.\n“Note: By default, preview.gitpod-self-hosted.com is the DOMAIN to access Gitpod which routes to 127.0.0.1 localhost IP address. To use another host network IP Address, the DOMAIN environment can be set accordingly via an -e flag in the above command. This is useful to share access to the Gitpod Self-Hosted instance running on your machine within your local network. For Example, 192.168.0.42 Host Network IP would be 192-168-0-42.nip.io, set by appending -e DOMAIN=192-168-0-42.nip.io.”\n2. Accessing Gitpod\n“Note: It usually takes around 5 minutes to go from the starting Gitpod status to Gitpod is running. Among other things, this will depend on the speed of your internet connection. Once Gitpod is ready, it will look as follows:”\ngitpod is ready\nAs this is a self-signed instance of Gitpod, the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["409",{"pageContent":"Gitpod root CA cert has to be imported into your browser manually to access the full functionality of Gitpod. The certificate can be retrieved by running the following:\ndocker cp gitpod:/var/gitpod/gitpod-ca.crt $HOME/gitpod-ca.crtThis certificate is saved at $HOME/gitpod-ca.crt and can then be loaded into your browser. Most browsers also require a restart before they can start to use the imported certificate. For instructions on how to load the certificate, choose your setup below:\nOnce the certificate is loaded and Gitpod is ready, the URL to access the Gitpod instance would be https://preview.gitpod-self-hosted.com unless the DOMAIN environment is overridden in which case the same has to be used.\nYou should be greeted by the following screen:\nwelcome screen\nYou will then be asked to configure a git integration:\ngit integration setup\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the Integrations section.\n“Important: Public (SaaS) Source Control Management Systems (SCMs) (i.e. GitLab.com, GitHub.com and Bitbucket.org) are not integrated by default with a Self-Hosted Gitpod","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["410",{"pageContent":"instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\nFollow these steps to integrate GitLab.com with your self-hosted Gitpod instance. You will need to enter gitlab.com as the Provider Host Name in the New Git Integration Modal.\nFollow these steps to integrate GitHub.com with your self-hosted Gitpod instance. You will need to enter github.com as the Provider Host Name in the New Git Integration Modal.\nFollow these steps to integrate Bitbucket.org with your self-hosted Gitpod instance. Select Bitbucket as the Provider Type in the New Git Integration Modal. For bitbucket.org this requires configuring an &quot;OAuth consumer&quot; on a &quot;workspace&quot;. This is slightly different from the documented Bitbucket Server integration. See gitpod PR #9894 for an example.”\n“Note: Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["411",{"pageContent":"should be much quicker.”\nOnce you are all set up, you can visit the getting started with Gitpod page to start learning about using Gitpod.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/local-preview"}}],["412",{"pageContent":"Manage Cluster Nodes\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nSometimes nodes become unhealthy, or you need to prevent the autoscaler from removing the node from your cluster.\nAvoiding Node Scale-down\nIf you wish to cordon a node with terminating workspaces, or, keep a node so you have time to manually backup user data:\n# reference: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-can-i-prevent-cluster-autoscaler-from-scaling-down-a-particular-node\n$ kubectl annotate node <nodename> cluster-autoscaler.kubernetes.io/scale-down-disabled=trueHandling Unhealthy Nodes\nPrevent new workspaces from being scheduled to a node if they become unhealthy:\n$","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes"}}],["413",{"pageContent":"kubectl cordon <nodename>","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes"}}],["414",{"pageContent":"“This guide aims at helping you set up basic monitoring of your Gitpod instance. In the end, you will have a continuous, high-level view of the health of your installation that you can monitor and alert on to respond to any issues quicker.”\nMonitoring\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nOnce you have Gitpod self-hosted up and running, the next step is making sure it continues to run as expected. This guide shows you how to set up a monitoring solution that consumes the data that Gitpod produces in order to help you understand the overall state of your Gitpod installation.\n“Note All metrics shown on this page are experimental and might change in the future.”\nMetrics collection\nSeveral components of Gitpod expose metrics","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/monitoring"}}],["415",{"pageContent":"using the Prometheus exposition format, but for this guide, we&#39;ll focus on the most important one that makes sure that Workspaces are starting and running reasonably.\nGitpod is all about Workspaces, so the information that you want to keep an eye on is:\nHow many workspaces are currently running.\nWorkspaces are starting.\nWorkspaces are starting in a reasonable time frame.\nRunning workspaces don&#39;t stop unexpectedly.\nws-manager is the component responsible for measuring and exposing such data, so you want to make sure that your Prometheus instance is scraping metrics from this specific component. Metrics are exposed through port 9500, at the /metrics endpoint.\nWe recommend using the Prometheus-Operator and the ServiceMonitor or PodMonitor CRDs to simplify the configuration surface.\nDashboards and Alerts\nTo have all useful data available and presented in a friendly way, it is recommend building Grafana Dashboards with the most important metrics (the ones shown in this guide). If you prefer, you can import one of our examples as a baseline to your own dashboards.\nAlerting can be done with Prometheus itself. If you are using the Prometheus-Operator as we recommended, you can","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/monitoring"}}],["416",{"pageContent":"also use the PrometheusRule CRD to simplify alerting configuration. The Alertmanager CRD can be used to configure alert routing to different popular platform such as PagerDuty or Slack.\nWhat you should keep an eye on\nHow many workspaces are currently running\nTo discover how many workspaces are currently running, use the PromQL query below:\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"RUNNING\"}) by (type)gitpod_ws_manager_workspace_phase_total is a Gauge. Although not suitable for alerting (because the amount of workspaces say little about your installation&#39;s health), with this query, you&#39;re able to tell how many workspaces, prebuilds and imagebuilds are running. This can be good information to tell how saturated your Gitpod instance is.\nWorkspaces are starting\nThe metric for this one is very similar to the one mentioned above, we&#39;re just changing the phase to PENDING instead of RUNNING.\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"PENDING\"}) by (type)This metric is a good candidate for alerting. If this number is steadily going up, it means that Workspaces are having a hard time getting to the RUNNING state, which is a good indicator of bad","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/monitoring"}}],["417",{"pageContent":"user experience. A good threshold changes from organization to organization, it is recommended to periodically review this alert&#39;s threshold as the usage of Gitpod increases or decreases.\nWorkspaces are starting in a reasonable time frame\nTo ensure a good user experience, you&#39;ll also want to make sure that Workspaces are starting swiftly! Histograms are used to capture this information. With histograms, it&#39;s possible to measure different percentiles and capture a high-level overview and outliers at the same time.\nExample queries are shown below:\n# 95th percentile\nhistogram_quantile(0.95,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)\n\n# 50th percentile\nhistogram_quantile(0.5,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)Sluggishness, depending on how bad it is, can be even worst than a fast failure. For that reason, alerting on workspaces taking too long to start is a good idea. It is suggested to collect feedback from users of your Gitpod installation to decide the correct thresholds for the alert on this metric.\nRunning workspaces don&#39;t","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/monitoring"}}],["418",{"pageContent":"stop unexpectedly\nLast but not less important, you want to make sure that running workspaces do not fail and stop abruptly. ws-manager exposes a counter that counts all workspace failures, making it possible to measure workspace failure rate (i.e. how many workspaces are failing per second).\nThe query is shown below:\nsum(rate(gitpod_ws_manager_workspace_stops_total{reason=\"failed\"}[5m])) by (type)The goal is that this metric stays as close to 0 as possible. If it starts to increase it means something is going wrong! Alerting can be set for high error rates, but just like the ones above the threshold will come from experience operating Gitpod. It is suggested to periodically review the threshold as your installation increases or decreases usage.\nTroubleshooting\nPlease refer to the troubleshooting docs.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/monitoring"}}],["419",{"pageContent":"Operational Guides\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis section has the guides you need to operate Gitpod:\nHow to update Gitpod - This guide shows you how to update Gitpod\nHow to monitor Gitpod - This guide shows you how to set up monitoring via metrics for your Gitpod installation\nHow to configure workspace resources - This guide shows you how to configure workspace resources to ensure performance and reliability\nHow to backup and restore Gitpod - This guide shows you how to back up and then restore your Gitpod installation for disaster recovery purposes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/operational-guides"}}],["420",{"pageContent":"Prevent Workspace Starts\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nIt may be necessary for you to prevent users from starting Gitpod workspaces (in a &lt;namespace&gt;). Please see the update guide for more information.\n“It is required to prevent workspace starts when updating Gitpod and using the Single Cluster Reference Architecture because it is not highly-available.”\nThis can be done with kubectl, after which, users won&#39;t be able to start workspaces until the ws-manager pod is running again.\n“Caution: You must stop running workspaces and wait for them to terminate before proceeding. Failure to do so can result in user data loss, because the workspaces will not be able to reliably back-up.”\nTo scale-down the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts"}}],["421",{"pageContent":"ws-manager component and prevent workspace starts:\nkubectl scale --replicas=0 deployment/ws-manager -n <namespace>After which, users will receive an error when trying to start workspaces. Once Gitpod is redeployed, this change will be reset automatically and workspaces will be allowed to start again.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts"}}],["422",{"pageContent":"Gitpod Self-Hosted Reference\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nReference information for Gitpod Self-Hosted:\nRequirements - Information on which components Gitpod requires\nProduct compatibility Matrix - Information on which versions of components do and do not work with Gitpod\nReleases - Information about how Gitpod is released\nTelemetry - Information about the telemetry that is gathered\nUpgrade Guides - Information to take into account when upgrading to a specific version","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference"}}],["423",{"pageContent":"Gitpod Self-Hosted Requirements\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nGitpod has certain expectations on the characteristics of the cluster it is running on as well as the (software) components connected to it.\n“Please refer to the product compatibility matrix for the supported types and versions of these components.”\nCluster Requirements\ncluster requirements\nReference Architectures\nWe have created a set of reference architectures for all the major cloud providers that fulfill the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the k3s guide. Please see the product compatibility matrix for the current","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["424",{"pageContent":"level of k3s support.\nSupported Kubernetes Versions and distributions\nPlease refer to the product compatibility matrix for supported Kubernetes versions and distributions.\nNode Affinity Labels Requirements\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\ngitpod.io/workload_meta=true\ngitpod.io/workload_ide=true\ngitpod.io/workload_workspace_services=true\ngitpod.io/workload_workspace_regular=true\ngitpod.io/workload_workspace_headless=true\nIt is recommended to have a minimum of two node pools, grouping the meta and ide nodes into one node pool and workspace related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime. A further improvement is to also separate the headless workspaces (these are prebuilds) and regular workspaces into separate node pools. Prebuilds can use up a lot of compute and this might impact regular workspaces if they are running on the same node.\nNode and Container Requirements\nThese are the components expected on each node (see product compatibility matrix for supported","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["425",{"pageContent":"versions):\nUbuntu Linux\nCalico for the networking overlay and network policy\nContainerd\nAt least 4 vCPU and 16GB of RAM\nKubernetes Privilege Requirements\nYour Kubernetes cluster must allow Gitpod to run privileged pods, as Gitpod depends on these privileges to provide workspace isolation.\nLoad Balancer Requirements\nGitpod uses LoadBalancer type services to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for LoadBalancer type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.\nAll supported Kubernetes distributions provide load balancers that meet Gitpod&#39;s needs. For more information see the Kubernetes distribution documentation below:\nGoogle Kubernetes Engine\nAmazon Elastic Kubernetes Engine:Layer 4/7 (default): Classic Load Balancer\nLayer 4 only: Network Load Balancing\n\nMicrosoft Azure Kubernetes Service\nK3s\nRequired Components\nGitpod relies on","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["426",{"pageContent":"certain components and services for it to function. By default, most of these can be automatically installed in-cluster during installation. However, you can also configure Gitpod to use your own version of these that may or may not live inside the cluster. We recommend using external components when running Gitpod for sustained usage because this avoids the risk of data loss when the cluster goes down.\n“Please refer to the product compatibility matrix for the supported types and versions of these components.”\n\nComponentRequired?\n\n\nBucket StorageUse default or bring your own\n\nDatabaseUse default or bring your own\n\nImage RegistryUse default or bring your own\n\nSource Control Management SystemYes (cloud or self-hosted SCM)\n\nCert-managerYes\n\nBucket Storage\nBy default, MinIO is installed in the cluster to store static content and to back an in-cluster image registry. During the installation process you can also configure Gitpod to use an external storage providers like S3.\nDatabase\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume. For production settings, we recommend","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["427",{"pageContent":"operating your own MySQL database (version v5.7 or newer). Which database is used can be configured during installation. \nImage Registry\nGitpod relies on an image registry to store images used to start workspaces. By default, a docker based image registry backed by MiniIO is installed in the cluster (this can be configured during the installation). However, Gitpod is also compatible with any registry that implements the Docker Registry HTTP API V2 specification.\nSource Control Management System\nGitpod expects to be connected to a Source Control Management System (SCM) such as GitLab in order to function. You can find out more about which SCMs are supported and how to connect to them in the Integrations section. You will also be guided through connecting your SCM once you access your Gitpod installation for the first time.\nCert Manager\nCert-manager must be installed in your cluster before you can install Gitpod. It is used to create and manage certificates needed to secure communication between the various internal Gitpod components. It can also be used to fetch a TLS certificate for your Gitpod instance from Let&#39;s Encrypt for example. Please consider the cert-manager documentation on","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["428",{"pageContent":"how to install it.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/requirements"}}],["429",{"pageContent":"How To Configure Gitpod To Work With Certain External Components\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nGitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.\nContainer Registry\nAmazon Elastic Container Registry (ECR)\nAmazon ECR does not fully implement the Docker v2 API, namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\nWhen using AWS, you should","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/resource-configuration"}}],["430",{"pageContent":"select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\nIf using a region other than us-east-1, you will need to change the endpoint to be s3.&lt;region&gt;.amazonaws.com.\nGoogle Container Registry (GCR)\n“This example uses the format gcr.io, which is the global hostnames. This can be swapped with any of the regional hostnames and it will work in the same way.”\nGoogle Container Registry authentication requires specific configuration. The &quot;Container registry URL&quot; will be in a format similar to gcr.io/&lt;project-name&gt;/gitpod. In order for the authentication to work, you must also enter the &quot;Container registry server&quot;. This will always be your GCR hostname, eg gcr.io.\nGoogle Artifact Registry (GAR)\nAs with GCR, Google Artifact Registry requires both the &quot;Container registry URL&quot; and &quot;Container registry server&quot; to be completed. The URL will be in the format &lt;region&gt;-docker.pkg.dev/&lt;project-name&gt;/gitpod and the server address will be &lt;region&gt;-docker.pkg.dev.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/resource-configuration"}}],["431",{"pageContent":"Stop Workspaces\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nSometimes it becomes necessary to stop Gitpod workspaces (in a &lt;namespace&gt;). Usually this needs to be done when updating Gitpod. Please see the update guide for more information.\nThis can be done with kubectl, and when done so, the IDE is closed, data in /workspace is backed up, and then the pod finally terminates.\nA Single Workspace\n$ kubectl delete pods <workspace-or-headless-pod-name> -n <namespace>All Workspaces\n“Caution: This will delete all actively running workspaces.”\nCan be done prior to outage windows, or for troubleshooting.\n$ kubectl delete pods -l component=workspace -n <namespace>","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/stop-workspaces"}}],["432",{"pageContent":"Generating a Support Bundle\nSomething is wrong with your Gitpod installation? This guide shows you how you can create a support bundle.\nAt first, you need to start the installation admin console. In a terminal with configured kubectl run the following command (&lt;namespace&gt; is the Kubernetes namespace your Gitpod installation has been installed to):\n$ kubectl kots admin-console --namespace <namespace>Open your favorite browser and go to http://localhost:8800 (port 8800 is opened on your node on localhost only--you may want to forward the port to your workstation to access the admin console). Enter your password and click on “Troubleshoot” in the top menu. Click “Analyze Gitpod” to create a support bundle that contains relevant logs and configs.\nkots-troubleshoot\nCreating the support bundle will take some while. Once it is ready, you can inspect the content. Nothing will be shared with us unless you have explicitly chosen to do so.\nkots-troubleshoot","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/support-bundle"}}],["433",{"pageContent":"Telemetry\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nWe optionally collect telemetry from Gitpod Self-Hosted installations to better understand the needs and use cases of the Gitpod community. Collected telemetry contains simple usage statistics like the number of users and workspaces. Our Privacy Policy describes in detail how we use this data.\nTo provide individualized support to enterprise customers we optionally collect a customer ID. This customer ID provides insights into enterprise adoption of Gitpod and helps us ensure that customers get the best value from their installations. Self-hosted installations using the community license do not have a customer ID and will be anonymous.\nControlling your","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/telemetry"}}],["434",{"pageContent":"telemetry\nYou can preview your usage telemetry, control how much information you share, and enable/disable all usage telemetry on Settings tab on the Admin dashboard. To anonymize your usage telemetry, uncheck the Include customer ID in telemetry option. To fully disable telemetry, uncheck the Enable usage telemetry option.\nA preview of your usage telemetry is available on the settings page to provide transparency about the data we&#39;d like to collect.\nEnable Service Ping in Admin Settings","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/telemetry"}}],["435",{"pageContent":"Troubleshooting Self-Hosted Gitpod\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nSomething is wrong with your Gitpod installation? Please refer to the following troubleshooting resources. You can also take a look at our support page to learn how to reach our community and support team for help.\nGenerating a Support Bundle\nGitpod provided Config Patches\nStop running workspaces\nPrevent workspace starts\nManage cluster nodes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/troubleshooting"}}],["436",{"pageContent":"How to Update your Gitpod Installation\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nAt first, you must decide on an update strategy, and follow related instructions.\nAfter following instructions for your desired update strategy, you need to start the installation admin console. In a terminal with configured kubectl run the following command (&lt;namespace&gt; is the Kubernetes namespace your Gitpod installation has been installed to):\n$ kubectl kots admin-console --namespace <namespace>Open http://localhost:8800 (port 8800 is opened on your node on localhost only—you may want to forward the port to your workstation to access the admin console). Enter your password. Click on “Check for update”.\n“Note: For","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/updating"}}],["437",{"pageContent":"air gapped installations, you need to click Upload a new version to upload a new version and then deploy it. A new version is made available to you to download via the download portal provided to you by Gitpod.”\nWhen an update is available, you will be asked to deploy the new version. You can run preflight checks on the new version and when you press deploy your current running version will be updated.\nIn most cases, updates should work without further effort - and your existing data is carried over. In some cases (with breaking changes) we will provide instructions on how to upgrade to a specific version in our Update Guides.\n“Gitpod allows you to apply custom labels, annotations and environment variables to your resources. When using this feature, you will need to manually delete resources that have immutable labels on them for updates to take effect. See the documentation for full details.”\nkots-admin-dashboard\nUpdate Strategies\nYou can deploy different strategies to update your Gitpod instance. Each strategy comes with trade-offs regarding downtime, risk, and cost. In any case, you should ensure that the chosen strategy matches your (company’s) risk profile and that every part of your update","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/updating"}}],["438",{"pageContent":"strategy (incl. rollbacks) is regularly practiced.\nPlease refer to Update Guides to check for breaking changes that need to be handled as part of your upgrade.\nMaintenance Window (Higher downtime, low risk and medium cost) - Recommended\n“Important: Single Cluster Reference Architecture is not highly-available, please stop workspaces and prevent workspace starts prior to proceeding.”\nIn this strategy, you have scheduled maintenance windows where you take down your entire Gitpod installation, update it, test it, and then make it available again. Ideally, this is done during times of low demand, e.g. outside of work hours.\nSecondary Staging Deployment (medium downtime, lower risk, higher cost)\n“Important: Single Cluster Reference Architecture is not highly-available, please stop workspaces and prevent workspace starts prior to proceeding.”\nIn this strategy, you run the newest version of Gitpod on a secondary (staging) cluster to ensure compatibility/fitness of the newest version within your specific environment. Given that you are testing on a secondary cluster, you save on downtime in your primary cluster. If you are confident in the release, you can then also apply the update","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/updating"}}],["439",{"pageContent":"to your primary cluster. Given that workspace startups may fail for a brief period during the update process, a maintenance window (albeit smaller) will still be required.\nLive update (not available, yet)\n“Important: Please check back soon, we&#39;re planning high-availability reference architecture.”\nThe Single Cluster Reference Architecture does not support live update. Please choose another update strategy.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/updating"}}],["440",{"pageContent":"Upgrade Guides and Breaking Changes\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis page informs you if there are specific considerations to take into account when upgrading to a specific version. If no breaking changes and thus specific recommendations when updating are mentioned here (or if they do not apply to you), please follow the normal upgrade procedure mentioned on the Updating your Gitpod Installation page.\n2022.09\nSecurity\nThis release includes security fixes addressing information leakage in logs; see the security announcement log for more information.\nBreaking Changes\nSingle Cluster Reference Architecture changes:Regular workspaces and headless workspaces are isolated to separate node pools to","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/upgrade-guides"}}],["441",{"pageContent":"help avoid noisy neighbor issues between the two and guarantee maximum performance for workspaces\nWorkspace Services (such as ws-manager) are deployed to the services nodepool to prevent potential service degradation from high ws-daemon memory use.\nWe&#39;ve increased the default node size to 16 core / 64 GB nodes. This is to allow for more workspaces per node, and avoid the scenario where there is just one workspace per node. We&#39;ve also added documentation to detail our recommendations around workspace resources.\n\n2022.08\n“There is no expected impact from these changes if using KOTS. These are documented for transparency purposes only.\nCustom labels from the pod selector labels removed”\n11954: remove custom labels from the pod selector labels. This removes this limitation so this is a long-term improvement. The impact of this should be handled transparently for you by the KOTS installer.\nUsage of PodSecurityPolicies removed\n12336: Removal of PodSecurityPolicies. These were deprecated from Kubernetes 1.21 and removed from 1.25. This allows Gitpod to run on Kubernetes 1.25+, which is scheduled for imminent release. If you have PodSecurityPolicies enabled on your cluster, we","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/upgrade-guides"}}],["442",{"pageContent":"suggest you disable them as soon as possible. If an installation is deployed to a cluster with PSPs enabled, you will need to add experimental.common.usePodSecurityPolicies = true to a config-patch file - however, do note that this is deprecated and exists to ease the transition away from PSPs.\n2022.07\nSetting the service type of the proxy component\nYou can now configure the service type of the proxy service in the installation UI (see image below) - you do not need to upload a .yaml file as a config patch anymore to configure this. However, having it in the config patch will still work until December.\nproxy service type UI\nSetting the default workspace image and which image registries the default image can be pulled from\nWe&#39;ve moved the configuration of the default workspace image and the default base image registry whitelist out of the experimental section of the config-patch file. The latter was also renamed. Using them in the experimental section will still work for the time being (until approx. December 2022).\nBefore:\nexperimental:\n  webApp:\n    server:\n      defaultBaseImageRegistryWhitelist:\n        - <allowed registries>\n    workspaceDefaults:\n      workspaceImage: <path to your default","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/upgrade-guides"}}],["443",{"pageContent":"workspace image>After:\nworkspace:\n  workspaceImage: <path to your default workspace image>\ncontainerRegistry:\n  privateBaseImageAllowList:\n    - <allowed registries>","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/upgrade-guides"}}],["444",{"pageContent":"Contribute Documentation\nGitpod has a dedicated team that looks after our documentation. You can help improve our documentation by:\nUsing the feedback widget at the bottom of each page in our documentation. All feedback is recorded into a spreadsheet and we use this information to drive the process to improve the Gitpod documentation.\nSubmitting documentation updates via the &quot;Edit on Gitpod button&quot; (top right on every page) when you learn something that you think other developers would also benefit from.\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by the #contributing channel on the Gitpod Discord server and ask for help.","metadata":{"source":"https://gitpod.io/docs/help/contribute/documentation/index"}}],["445",{"pageContent":"Contribute Content\nCreating content (blog posts, YouTube and TikTok videos, presentations and demos) that shares tips+tricks and your experiences with Gitpod is amongst one of the most impactful ways you can help contribute. Everyone at Gitpod including our founders, engineers and product managers loves reading and watching content created by people in our community.\nGitpod maintains an invitational showcase of community contributed guides which are used to highlight content that is hosted elsewhere. Please do not raise pull-requests to the website that adds guides or blog posts without prior discussion and consent.\nInstead follow the IndieWeb guidelines of POSSE when authoring content by posting first on your own site/channel. By posting content first on your own site/channel then a direct feedback cycle forms between you and your readership through ownership of your content that helps you to improve your content.\nAfter the content has been published please:\nSend a tweet that mentions the @Gitpod Twitter account which will broadcast the content internally within the company.\n\nAdd a link to the content at https://github.com/shaal/awesome-gitpod\n\nThanks 🧡","metadata":{"source":"https://gitpod.io/docs/help/contribute/content/index"}}],["446",{"pageContent":"Code Style\nGo\nWe typically follow the Uber Go Style Guide as our north star as the guide is comprehensive but not overburdening, easy to read and pretty good. Here&#39;s how our codebase differs:\nGitpod uses xerrors for error wrapping instead of pkg/errors\nTypeScript\nTBA","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/code-style"}}],["447",{"pageContent":"Commit Message Convention\nWe do not yet have an established convention but one is currently being discussed.","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/commit-message-convention"}}],["448",{"pageContent":"Contribute Features &amp; Patches\nGitpod is developed as an open core product under an OSI-approved open source license, making the majority of functionality freely usable and distributable, even for commercial use. As is typical with open core enterprise features are developed under a non OSI-approved license. Where contributions are not trivial (&quot;de minimis&quot;) Gitpod requires contributors to sign a contributors license agreement before we will be able to merge your contribution.\nGitpodders have built-in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\nCode Style\nCommit message convention\nSubmitting a pull request\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/index"}}],["449",{"pageContent":"the #contributing channel on the Gitpod Discord server and ask for help.","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/index"}}],["450",{"pageContent":"Submitting a pull request\nBefore you submit your pull request, please:\nIf you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\nSearch GitHub for an open or closed Pull Request that relates to your submission.\nMake your changes in a new git branch:\ngit checkout -b my-fix-branch mainFollow our Coding Style.\nCreate your patch, including appropriate test cases and documentation.\nRun the test suite.\nCommit your changes using a descriptive commit message that follows our commit message conventions.\ngit commit -aNote: the optional commit -a command line option will automatically &quot;add&quot; and &quot;rm&quot; edited files.\nBuild your changes locally to ensure all the tests pass.\n\nPush your branch to GitHub:\n\ngit push origin my-fix-branchIn GitHub, send a pull request to gitpod-io:main.\nIf we suggest changes, then:\nMake the required updates.\nRe-run the test suite to ensure tests are still passing.\nCommit your changes to your branch (e.g. my-fix-branch).\nPush the changes to your GitHub repository (this will update your Pull Request).\nThat&#39;s it! Thank you for your contribution!\n[Optional]","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request"}}],["451",{"pageContent":"Submitting a pull request with Gitpod\nBefore you submit your pull request, please:\nIf you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\nSearch GitHub for an open or closed Pull Request that relates to your submission.\nIf we suggest changes, then:\nMake the required updates.\nRe-run the test suite to ensure tests are still passing.\nCommit your changes to your branch (e.g. my-fix-branch).\nPush the changes to your GitHub repository (this will update your Pull Request).\nThat&#39;s it! Thank you for your contribution!","metadata":{"source":"https://gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request"}}],["452",{"pageContent":"Agda Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Agda template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Agda template.\nName it e.g. my-agda-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-agda-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/agda"}}],["453",{"pageContent":"Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/agda"}}],["454",{"pageContent":"Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/agda"}}],["455",{"pageContent":"C Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our C template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the C template.\nName it e.g. my-c-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-c-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later, when you","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/c"}}],["456",{"pageContent":"create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual Studio Code","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/c"}}],["457",{"pageContent":"extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/c"}}],["458",{"pageContent":"Clojure Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Clojure template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Clojure template.\nName it e.g. my-clojure-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-clojure-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/clojure"}}],["459",{"pageContent":"start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/clojure"}}],["460",{"pageContent":"access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/clojure"}}],["461",{"pageContent":"Coq Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Coq template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Coq template.\nName it e.g. my-coq-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-coq-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later,","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/coq"}}],["462",{"pageContent":"when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/coq"}}],["463",{"pageContent":"Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/coq"}}],["464",{"pageContent":"C++ CMake Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our C++ CMake template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the C template.\nName it e.g. my-cpp-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-cpp-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/cpp"}}],["465",{"pageContent":"Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/cpp"}}],["466",{"pageContent":"Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/cpp"}}],["467",{"pageContent":"Datasette Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Datasette template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Datasette template.\nName it e.g. my-datasette-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-datasette-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/datasette"}}],["468",{"pageContent":"before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/datasette"}}],["469",{"pageContent":"extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/datasette"}}],["470",{"pageContent":"Deno Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Deno template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Deno template.\nName it e.g. my-typescript-deno-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-typescript-deno-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/deno"}}],["471",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/deno"}}],["472",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/deno"}}],["473",{"pageContent":"Docker Compose Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Docker Compose template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Docker Compose template.\nName it e.g. my-docker-compose-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-docker-compose-template&gt;\nGitpod displays the prebuild progress status by running the init commands in","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/docker-compose"}}],["474",{"pageContent":"the .gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/docker-compose"}}],["475",{"pageContent":"Code themes and extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/docker-compose"}}],["476",{"pageContent":"C# .NET Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our C# .NET template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the C# template.\nName it e.g. my-dotnet-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-dotnet-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/dotnet"}}],["477",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/dotnet"}}],["478",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations\n.NET in Gitpod","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/dotnet"}}],["479",{"pageContent":"Drupal Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Drupal template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Drupal template.\nName it e.g. my-drupal-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-drupal-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/drupal"}}],["480",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/drupal"}}],["481",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/drupal"}}],["482",{"pageContent":"Elixir Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with an Elixir template.\n“Thank you @tnb24 for creating the repository 🙏!”\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Elixir template.\nName it e.g. my-elixir-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-elixir-template\nGitpod displays the prebuild progress status by running the init commands in the","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elixir"}}],["483",{"pageContent":".gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elixir"}}],["484",{"pageContent":"Code themes and extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elixir"}}],["485",{"pageContent":"Elm Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with an Elm template.\n“Thank you @avh4 for creating the repository 🙏!”\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Elm template.\nName it e.g. my-elm-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-elm-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elm"}}],["486",{"pageContent":"before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elm"}}],["487",{"pageContent":"extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/elm"}}],["488",{"pageContent":"Flask Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Flask template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Flask template.\nName it e.g. my-flask-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-flask-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flask"}}],["489",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flask"}}],["490",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flask"}}],["491",{"pageContent":"Flutter Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Flutter template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Flutter template.\nName it e.g. my-flutter-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-flutter-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flutter"}}],["492",{"pageContent":"start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flutter"}}],["493",{"pageContent":"access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/flutter"}}],["494",{"pageContent":"Go Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Golang template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Go template.\nName it e.g. my-go-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/template-golang-cli\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later, when you","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/go"}}],["495",{"pageContent":"create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual Studio Code","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/go"}}],["496",{"pageContent":"extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/go"}}],["497",{"pageContent":"Grain Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Grain template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Grain template.\nName it e.g. my-grain-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-grain-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/grain"}}],["498",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/grain"}}],["499",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/grain"}}],["500",{"pageContent":"Haskell Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Haskell template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Haskell template.\nName it e.g. my-haskell-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-haskell-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/haskell"}}],["501",{"pageContent":"start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/haskell"}}],["502",{"pageContent":"access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/haskell"}}],["503",{"pageContent":"IHP Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with the official IHP template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral development environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the IHP template.\nName it e.g. my-ihp-app.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-ihp-app&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later,","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ihp"}}],["504",{"pageContent":"when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ihp"}}],["505",{"pageContent":"Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ihp"}}],["506",{"pageContent":"&lt;OpenGraph\ndata={{\n    description:\n      &quot;Learn how to start using Gitpod on an example project/template that is hosted on GitHub in less than 5 minutes. Get up and running with Gitpod quickly.&quot;,\n    title: &quot;Quickstart - Gitpod&quot;,\n    keywords: &quot;template, get started, example&quot;,\n  }}\n/&gt;\nQuickstart\nLearn how to start using Gitpod on an example project that is hosted on GitHub in less than 5 minutes. For simplicity we use GitHub as the git hoster but the steps outlined work equally well for GitLab and Bitbucket. This section helps you understand the features and advantages of Gitpod in a learning environment. All templates are pre-configured to use Gitpod and ready-to-code:\nTemplates\nPopular Templates\nFind your template\n💡 Find more such templates on Gitpod Samples\nInstalling the Gitpod browser extension\nYou can install the Gitpod browser extension in any Chromium-based browser such as Google Chrome, Microsoft Edge, Brave, and others, or in Firefox.\nThe Gitpod extension adds a Gitpod button on every project and branch across GitLab, GitHub, and Bitbucket so that you can easily open a new workspace for any project.\nBrowser Extension\nIf you prefer to not","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/index"}}],["507",{"pageContent":"install browser extensions then you can use the Gitpod browser bookmarklet instead.\nNext Steps\nWith Gitpod you start treating your dev environments as something ephemeral: you start them, you code, you push your code, and you forget about them. For your next task, you&#39;ll use a fresh dev environment.\nGetting started with your own project","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/index"}}],["508",{"pageContent":"Java Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Java Spring template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Java template.\nName it e.g. my-java-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/spring-petclinic\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later,","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/java"}}],["509",{"pageContent":"when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/java"}}],["510",{"pageContent":"Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/java"}}],["511",{"pageContent":"Julia Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Julia template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Julia template.\nName it e.g. my-julia-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Julia packages downloading from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-julia-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/julia"}}],["512",{"pageContent":"Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/julia"}}],["513",{"pageContent":"Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/julia"}}],["514",{"pageContent":"Laravel Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Laravel template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Laravel template.\nName it e.g. my-laravel-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-laravel-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/laravel"}}],["515",{"pageContent":"start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/laravel"}}],["516",{"pageContent":"access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/laravel"}}],["517",{"pageContent":"NextJS Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our NextJS template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the NextJS template.\nName it e.g. my-nextjs-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-nextjs-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nextjs"}}],["518",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nextjs"}}],["519",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nextjs"}}],["520",{"pageContent":"Nix Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Nix template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Nix template.\nName it e.g. my-nix-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-nix-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later,","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nix"}}],["521",{"pageContent":"when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nix"}}],["522",{"pageContent":"Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/nix"}}],["523",{"pageContent":"Ocaml Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our OCaml template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the OCaml template.\nName it e.g. my-ocaml-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-ocaml-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ocaml"}}],["524",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ocaml"}}],["525",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ocaml"}}],["526",{"pageContent":"Perl Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Perl template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Perl template.\nName it e.g. my-perl-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for CPAN downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-perl-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later, when you","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/perl"}}],["527",{"pageContent":"create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual Studio Code","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/perl"}}],["528",{"pageContent":"extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/perl"}}],["529",{"pageContent":"PlanetScale Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our PlanetScale template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the PlanetScale template.\nName it e.g. my-planetscale-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-planetscale-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/planetscale"}}],["530",{"pageContent":".gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/planetscale"}}],["531",{"pageContent":"Code themes and extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/planetscale"}}],["532",{"pageContent":"Python Django Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Python template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Python template.\nName it e.g. my-python-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-python-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/python"}}],["533",{"pageContent":"start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/python"}}],["534",{"pageContent":"access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/python"}}],["535",{"pageContent":"React Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our React template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the React template.\nName it e.g. my-react-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-react-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/react"}}],["536",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/react"}}],["537",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/react"}}],["538",{"pageContent":"Ruby on Rails Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Ruby on Rails template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Ruby on Rails template.\nName it e.g. my-ruby-on-rails-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-ruby-on-rails-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails"}}],["539",{"pageContent":".gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails"}}],["540",{"pageContent":"Code themes and extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails"}}],["541",{"pageContent":"Rust Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Rust template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Rust template.\nName it e.g. my-rust-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-rust-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later, when","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/rust"}}],["542",{"pageContent":"you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all Visual Studio","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/rust"}}],["543",{"pageContent":"Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/rust"}}],["544",{"pageContent":"Scala Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Scala template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Scala template.\nName it e.g. my-scala-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-scala-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/scala"}}],["545",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/scala"}}],["546",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/scala"}}],["547",{"pageContent":"Svelte Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our SvelteJS template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the SvelteJS template.\nName it e.g. my-svelte-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-svelte-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/svelte"}}],["548",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/svelte"}}],["549",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/svelte"}}],["550",{"pageContent":"SvelteKit Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our SvelteKit template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the SvelteKit template.\nName it e.g. my-sveltekit-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-svelte-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/sveltekit"}}],["551",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/sveltekit"}}],["552",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/sveltekit"}}],["553",{"pageContent":"TLA+ Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our TLA+ template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the TLA+ template.\nName it e.g. my-tlaplus-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-nextjs-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/tlaplus"}}],["554",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/tlaplus"}}],["555",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/tlaplus"}}],["556",{"pageContent":"Node/TypeScript/Express Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Node/TypeScript/Express template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Node/TypeScript template.\nName it e.g. my-typescript-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-typescript-template\nGitpod displays the prebuild progress status by running the init","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/typescript"}}],["557",{"pageContent":"commands in the .gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/typescript"}}],["558",{"pageContent":"favorite VS Code themes and extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/typescript"}}],["559",{"pageContent":"Wasp Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Wasp template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Wasp template.\nName it e.g. my-wasp-template.\nStep 2: Install the Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for Maven or NPM downloading the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/&lt;my-wasp-template&gt;\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wasp"}}],["560",{"pageContent":"Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wasp"}}],["561",{"pageContent":"Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wasp"}}],["562",{"pageContent":"Wordpress Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Wordpress template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the Wordpress template.\nName it e.g. my-wordpress-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-wordpress-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wordpress"}}],["563",{"pageContent":"you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wordpress"}}],["564",{"pageContent":"extensions\nYou have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/wordpress"}}],["565",{"pageContent":"X11 VNC Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our X11 VNC template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral developer environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the X11 VNC template.\nName it e.g. my-x11-vnc-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-x11-vnc-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc"}}],["566",{"pageContent":"workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc"}}],["567",{"pageContent":"to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc"}}],["568",{"pageContent":"Yasm Quickstart\nLearn how to set-up and understand the benefits of Gitpod in less than 5 min with our Yasm template.\nThe following guide will:\nWalk you through a real world example with an existing Gitpod config\nIntroduce you to prebuilds\nDemonstrate the benefits of ephemeral development environments\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\nStep 1: Clone Git repository\nCreate a new repository based on the C template.\nName it e.g. my-yasm-template.\nStep 2: Install Gitpod app\nInstall the Gitpod App.\nGitpod&#39;s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don&#39;t have to wait for installation of dependencies from the internet when you want to start coding.\n\nStep 3: First prebuild\nStart your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.\nThe revised URL is: https://gitpod.io/#prebuild/https://github.com/&lt;github_username&gt;/my-yasm-template\nGitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace.","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/yasm"}}],["569",{"pageContent":"Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.\nStep 4: Enjoy being ready-to-code 🤙\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\nInstalling the browser extension\nYou can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.\nBrowser Extension\nIf you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.\nFor our partner GitLab we have a native integration into their UI that you can enable here.\nAdd your favorite VS Code themes and extensions\nYou have access to all","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/yasm"}}],["570",{"pageContent":"Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\nStart throwing away workspaces like paper towels\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.\nYou even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓\nNext Steps\nYou&#39;ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\nGetting started with your own project\nGit Integrations","metadata":{"source":"https://gitpod.io/docs/introduction/getting-started/quickstart/yasm"}}],["571",{"pageContent":"Configure the authentication used by your Gitpod Self-Hosted installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod does not implement user authentication itself, but integrates with other auth provider using OAuth2.\nUsually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at\nthe same time making sure every user has proper access to their Git repository.\nGitpod supports the following authentication providers:\ngithub.com\nGitHub Enterprise in version 2.16.x and higher\ngitlab.com\nGitLab Community Edition in version 11.7.x and higher\nGitLab Enterprise Edition in version 11.7.x and higher\nBitbucket — coming soon\nCustom Auth Provider – Inquiry TypeFox for a quote\nGitHub\nTo authenticate your users with GitHub you need to create a GitHub OAuth App.\nFollow the guide linked above and:\nset &quot;Authentication callback URL&quot; to after replacing example.com with your domain name:\nhttps://example.com/auth/github/callback\n\ncopy the following values and configure them in","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication"}}],["572",{"pageContent":"values.yaml:\nclientId\nclientSecret\n\nGitLab\nTo authenticate your users with GitLab you need to create an GitLab OAuth application.\nFollow the guide linked above and:\nset &quot;Authentication callback URL&quot; to:\nhttps://&lt;your-domain.com&gt;/auth/&lt;gitlab.com-OR-your-gitlab.com&gt;/callback\n\nset &quot;Scopes&quot; to api, read_user and read_repository.\n\ncopy the following values and configure them in values.yaml:\nclientId is the &quot;Application ID&quot; from the GitLab OAuth application\nclientSecret is the &quot;Secret&quot; from the GitLab OAuth application","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication"}}],["573",{"pageContent":"Configure the database used by your Gitpod installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we&#39;d recommend in a production setting) you can use that one. You have the following options:\nIntegrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod’s Helm chart.\nThe database uses a Kubernetes PersistentVolume. We do not recommend using this option for a production setting.\n\nOwn MySQL database: Gitpod requires MySQL in version 5.7 or newer.\n\nThis chart installs a MySQL database that gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:\nCopy the DB init scripts into your local folder:\nmkdir -p gpinstall\necho exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash\nmkdir -p ./db-init\ncp","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database"}}],["574",{"pageContent":"gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/\nrm -Rf gpinstall\nInitialize your MySQL database using the SQL files in config/db/init/. E.g. in a mysql session connected to your database server run:\nSET @gitpodDbPassword = IFNULL(@gitpodDbPassword, 'your-password-goes-here');\nsource db-init/00-testdb-user.sql;\nsource db-init/01-create-user.sql;\nsource db-init/02-create-and-init-sessions-db.sql;\nsource db-init/03-recreate-gitpod-db.sql;\nMerge the following into your values.custom.yaml:\ndb:\n  host: db\n  port: 3306\n  password: your-password-goes-here\n\n# Disable built-in MySQL instance\nmysql:\n  enabled: false\nDo a helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database"}}],["575",{"pageContent":"Configure the Docker registry used by your Gitpod Self-Hosted installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.\nTo this end, Gitpod requires a container registry where it can push the images it builds.\nBy default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we&#39;d recommend in a production setting) you can use that one. You have the following options:\nIntegrated Docker registry: If not disabled, this Docker registry is installed in a Kubernetes Pod as a dependency of Gitpod’s Helm chart.\nThe Docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.\nOwn Docker registry: Gitpod can connect to your own Docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.\nThis helm chart can either deploy its own registry (default but requires HTTPS certs) or","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry"}}],["576",{"pageContent":"use an existing one.\nConfiguration\nTo connect to an existing Docker registry, perform the following steps:\nMerge the following into your values.custom.yaml:\ncomponents:\n  imageBuilder:\n    registryCerts: []\n    registry:\n      # name must not end with a \"/\"\n      name: your.registry.com/gitpod\n      secretName: image-builder-registry-secret\n      path: secrets/registry-auth.json\n\n  workspace:\n    pullSecret:\n      secretName: image-builder-registry-secret\n\ndocker-registry:\n  enabled: falseReplace your.registry.com/gitpod with the domain your registry is available at.\n“Note that Helm does not merge hierarchies in a single file. Please make sure there is only ever one components hierarchy or the last one overwrites all previous values.”\n\nPersist your registry authentication token to the secrets/ folder.\nmkdir -p secrets\ndocker login your.registry.com/gitpod\ncp ~/.docker/config.json secrets/registry-auth.json“This does not work for Google Cloud Registries because their login tokens are short-lived. See the example below on how to configure it.”\n\nDo a helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.\n\nMake sure the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry"}}],["577",{"pageContent":"resulting JSON file contains the credentials (there should be an auths section containing them as base64 encoded string).\nIf that&#39;s not the case you might have a credential store/helper set up (e.g. on macOS the Securely store Docker logins in macOS keychain setting).\nExample Google Cloud Registry Credentials\nPrerequisites:\ngcloud installed and authenticated\nHow to use Google Cloud Registry as Docker registry for Gitpod:\nGo to https://console.cloud.google.com/gcr/images/&lt;your-project-id&gt;?project=&lt;your-project-id&gt; and hit &quot;Enable Registry API&quot; (if not already enabled).\n\nExecute the following commands:\nexport PROJECT_ID=\"<your-project-id>\"\n\ngcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID\ngcloud projects add-iam-policy-binding $PROJECT_ID --member=\"serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\" --role=roles/storage.admin\ngcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\n\necho \"{\\\"auths\\\":{\\\"gcr.io\\\": {\\\"auth\\\": \\\"$(echo -n \"$(echo -n","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry"}}],["578",{"pageContent":"\"_json_key:\"; cat gitpod-registry-full-key.json)\" | base64 -w 0)\\\"}}}\" > secrets/registry-auth.jsonThis should result in a secrets/registry-auth.json like this:\n{\n  \"auths\": {\n    \"gcr.io\": {\n      \"auth\": \"<long-base64-string>\"\n    }\n  }\n}“If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry"}}],["579",{"pageContent":"Configuring Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nConfigure the database used by your Gitpod Self-Hosted installation\nConfigure the Docker registry used by your Gitpod Self-Hosted installation\nConfigure the ingress to your Gitpod Self-Hosted installation\nConfigure the Kubernetes nodes in your Gitpod Self-Hosted installation\nConfigure the storage used by your Gitpod installation\nConfigure the Gitpod Workspaces in your Gitpod Self-Hosted installation\nConfigure the authentication used by your Gitpod Self-Hosted installation\nConfigure the VSX registry used by your Gitpod Self-Hosted installation","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/index"}}],["580",{"pageContent":"Configure the ingress to your Gitpod installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nConfiguring ingress into your Gitpod installation requires two things:\nthree DNS entries pointing at the IP of Gitpod&#39;s proxy service, and\nHTTPS certificates.\n1. DNS Entries\nGitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. your-domain.com).\nAs Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\nFor example:\nyour-domain.com\n*.your-domain.com\n*.ws.your-domain.comInstalling Gitpod on a subdomain works as well. For example:\ngitpod.your-domain.com\n*.gitpod.your-domain.com\n*.ws.gitpod.your-domain.comSetup A records for all three (sub)domains. To learn your installation&#39;s IP run:\nkubectl describe svc proxy | grep -i ingress\nMerge the following into your values.custom.yaml file:\nhostname: your-domain.com\ncomponents:\n  proxy:\n    loadBalancerIP: <your-IP>Specifying the loadBalancerIP make sure it stays the same across all redeploys.\n\n2. HTTPS\nGitpod requires HTTPS","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress"}}],["581",{"pageContent":"certificates to function properly. We recommend using Let&#39;s Encrypt for retrieving certificates as we do for gitpod.io.\n“Important: The HTTPS certificates for your domain must include your-domain.com, *.your-domain.com and *.ws.your-domain.com. Beware that wildcard certificates are valid for one level only (i.e. *.a.com is not valid for c.b.a.com).”\nTo configure the HTTPS certificates for your domain\nGenerate certificates and put your certificate files under secrets/https-certificates/:secrets/https-certificates:\n  |- tls.crt\n  |- tls.key\nGenerate the dhparams.pem file using:openssl dhparam -out secrets/https-certificates/dhparams.pem 2048\nCreate a kubernetes secret using:kubectl create secret generic https-certificates --from-file=secrets/https-certificates\nAfterwards, do an helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.\nUsing Let&#39;s Encrypt to generate HTTPS certificates\nThe most accessible means of obtaining HTTPS certificates is using Let&#39;s Encrypt. It provides free certificates to anybody who can prove ownership of a domain.\nLet&#39;s Encrypt offers a program","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress"}}],["582",{"pageContent":"called certbot to make acquiring certificates as straightforward as possible.\nAssuming you have certbot installed, the following script will generate and configure the required certificates (notice the placeholders):\nexport DOMAIN=your-domain.com\nexport EMAIL=your@email.here\nexport WORKDIR=$PWD/letsencrypt\n\ncertbot certonly \\\n    --config-dir $WORKDIR/config \\\n    --work-dir $WORKDIR/work \\\n    --logs-dir $WORKDIR/logs \\\n    --manual \\\n    --preferred-challenges=dns \\\n    --email $EMAIL \\\n    --server https://acme-v02.api.letsencrypt.org/directory \\\n    --agree-tos \\\n    -d *.ws.$DOMAIN \\\n    -d *.$DOMAIN \\\n    -d $DOMAIN\n\n# move them into place\nmkdir -p secrets/https-certificates\ncp $WORKDIR/config/live/fullchain.pem secrets/https-certificates/tls.crt\ncp $WORKDIR/config/live/privkey.pem secrets/https-certificates/tls.key“Note: Do not refrain if certbot fails on first execution: Depending on the challenge used you might have to restart it once.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress"}}],["583",{"pageContent":"Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nConfigure the nodes (computers or virtual machines) that Kubernetes runs Gitpod&#39;s workspace pods on.\nAssign workload to Nodes\nGitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as meta) and the workspaces. Ideally both types of workloads run on separate nodes to make makes scaling easier.\nDepending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:\ngitpod.io/workload_meta=true which marks the &quot;meta&quot; nodes and\ngitpod.io/workload_workspace=true  which marks the workspace nodes.\nIf you want to &quot;mix &#39;n match&quot;, i.e., don&#39;t separate the nodes, you can simply run:\nkubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=trueNode Filesystem Layout\nGitpod relies on the node&#39;s filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in /data and Theia is","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes"}}],["584",{"pageContent":"copied to /theia. Depending on your node setup the root filesystem maybe read-only or slow.\nWe recommend you change those two paths so that they&#39;re located on an SSD or some other form of fast local storage.\nTo do this:\nMerge the following into your values.custom.yaml:\ncomponents:\n  imageBuilder:\n    # The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.\n    # Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon\n    # fast storage on the node, e.g. an SSD.\n    hostDindData: /mnt/disks/ssd0/docker\n  wsDaemon:\n    # Workspace data is stored on the nodes. This setting configures where on the node the workspace data lives.\n    # The faster this location is (in terms of IO) the faster workspaces will initialize.\n    hostWorkspaceArea: /mnt/disks/ssd0/workspaces\nDo a helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.\n“Note that Helm does not merge hierarchies in a single file. Please make sure there is only ever one components hierarchy or the last one overwrites all previous values.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes"}}],["585",{"pageContent":"Configure the storage used by your Gitpod installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.\nBy default Gitpod installs MinIO as built-in bucket storage which uses a persistent volume to store workspace content.\nFor more complex use case we recommend configuring more permanent means of persistence by either:\nConfigure the contained MinIO-instance to serve as a gateway OR configure one of a wide range of storage backends.\nBring your own storage bucket: Configure Gitpod to either connect to:your own installation of MinIO\na Google Cloud Storage compatible storage solution\n\na) Configure custom MinIO instance\nCreate a file values.custom.yaml with this content:\ncomponents:\n  contentService:\n    remoteStorage:\n      kind: minio\n      minio:\n        endpoint: your-minio-installation.somewhere-else.com:8080\n        accessKey: enterKeyHere\n        secretKey: superSecretKeyGoesHere\n        tmpdir: /tmp\n\n# Disable built-in minio instance\nminio:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage"}}],["586",{"pageContent":"enabled: false\nRedeploy Gitpod using helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes\n“Note that Helm does not merge hierarchies in a single file. Please make sure there is only ever one components hierarchy or the last one overwrites all previous values.”\n\nb) Configure the built-in MinIO instance\nConsult the chart&#39;s documentation at https://helm.min.io/\nCreate a file values.custom.yaml with this content:minio:\n  accessKey: add-a-radom-access-key-here\n  secretKey: add-a-radom-secret-key-here\n  # insert custom config here\nRedeploy Gitpod using helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage"}}],["587",{"pageContent":"Configure the VSX registry used by your Gitpod Self-Hosted installation\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nGitpod uses the public OpenVSX registry as only products produced by Microsoft may access the Visual Studio Code Marketplace. This document explains how Gitpod Self-Hosted can be configured in air-gapped scenarios to connect to a private OpenVSX registry.\nConfiguration\nTo connect to private OpenVSX registry, perform the following steps:\nMerge the following into your values.custom.yaml:\ncomponents:\n  openVsxProxy:\n    vsxRegistryUrl: open-vsx.orgReplace open-vsx.org with the domain your registry is available at.\n\nDo a helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.\n\nAdditional resources\nhttps://github.com/gitpod-io/gitpod/blob/cfb528c5daf5115b666ec7404bfe25d9fc9598d6/chart/values.yaml#L137","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/vsx-registry"}}],["588",{"pageContent":"Workspaces\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nSizing\nGitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.\nIf you want to change the default sizing (~ 8GiB per workspace) you should\nMerge the following into your values.custom.yaml:\n# workspaceSizing configures the resources available to each workspace. These settings directly impact how\n# desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.\n#\n# Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which\n# results in a broken user experience.\nworkspaceSizing:\n  requests:\n    cpu: \"1m\"\n    memory: \"2.25Gi\"\n    storage: \"5Gi\"\n  limits:\n    cpu: \"5\"\n    memory: \"12Gi\"\n  dynamic:\n    # Gitpod supports dynamic CPU limiting. We express those limits in \"buckets of CPU time\" (jiffies where 1 jiffie is 1% of a vCPU).\n    # Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).\n    #\n    # For example:\n    #   # three minutes of 5","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces"}}],["589",{"pageContent":"CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000\n    #   - budget: 90000\n    #     limit: 500\n    #   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000\n    #   - budget: 120000\n    #     limit: 400\n    #   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:\n    #   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000\n    #   - budget: 54000\n    #     limit: 200\n    #\n    # if there are no buckets configured, the dynamic CPU limiting is disabled.\n    cpu:\n      buckets: []\n      samplingPeriod: \"10s\"\n      controlPeriod: \"15m\"\nDo a helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces"}}],["590",{"pageContent":"Install Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nInstall Gitpod Self-Hosted on Kubernetes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/index"}}],["591",{"pageContent":"Install Gitpod Self-Hosted on Kubernetes\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nThis section describes how to install Gitpod on any Kubernetes cluster using Helm. This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository charts.gitpod.io, charts for branch-builds can be found here, and the source of the charts is in our public git repository.\nFor some platforms we offer Terraform scripts that ease the infrastructure setup. Once the script has created the necessary infrastructure it will output a values.terraform.yaml that contains infrastructure-specific configuration for the helm deployment.\nPrerequisites\nSee Installation requirements for Gitpod Self-Hosted.\nInstallation\nTo install Gitpod in your Kubernetes cluster, follow these steps:\nCreate a file values.custom.yaml with the following content (please replace the keys/secrets, for instance with openssl rand -hex 20):\ndocker-registry:\n  authentication:\n    username: gitpod\n    password: your-registry-password\nrabbitmq:\n  auth:\n    username:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes"}}],["592",{"pageContent":"your-rabbitmq-user\n    password: your-secret-rabbitmq-password\nminio:\n  accessKey: your-random-access-key\n  secretKey: your-random-secret-keyYou should replace the keys with 2 different random strings unique for your installation.\n\nRun the following commands in your local terminal:\nhelm repo add gitpod.io https://charts.gitpod.io\n\nhelm repo update\n\nhelm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\nConfigure domain and https.\n\nRun kubectl get pods and verify that all pods are in state RUNNING. If some are not, please see the Troubleshooting Guide.\n\nGo to https://&lt;your-domain.com&gt; and follow the steps to complete the installation.\n\nUpgrade\nCheck the Upgrade Guide and follow the steps outlined there.\n\nRun the update\nhelm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\nRun kubectl get pods and verify that all pods are in state RUNNING. If some are not, please see the Troubleshooting Guide.\n\nRecommended Configuration\nBy default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes"}}],["593",{"pageContent":"and/or a bigger audience:\nDatabase: Configure where Gitpod stores all internal runtime data.\nStorage: Configure where Gitpod persists workspace content.\nDocker Registry: Configure where Gitpod stores workspace images.\nCustomization\nFurther customizations:\nKubernetes Nodes: Configure file system layout and the workspace&#39;s node associativity.\nWorkspaces: Configure workspace sizing.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes"}}],["594",{"pageContent":"Updating Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nUpgrading Gitpod from v0.9.0 to v0.10.0\ndefault registry now requires password and username\nGitpod by default ships with an in-cluster docker-registry. If you use that one (instead of an external one), add the following to your values.custom.yaml:\ndocker-registry:\n  authentication:\n    username: gitpod\n    password: your-registry-passwordAfterwards, a full redeploy is required (your DB and workspace state is kept in a PV):\nhelm del gitpod\nhelm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0Certificate file names changed\nThe file names we expect in a secret has changed. Before we&#39;d require the default names Let&#39;s Encrypt would use. Since 0.10.0 we require a tls.key and a tls.crt.\nTo adjust this in your existing installation:\nexecute the following inside your config folder:\nmv secrets/https-certificates/fullchain.pem secrets/https-certificates/tls.crt\nmv secrets/https-certificates/privkey.pem secrets/https-certificates/tls.keyUpgrade your","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/updating/index"}}],["595",{"pageContent":"installation again:\nhelm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0Upgrading Gitpod from v0.8.0 to v0.10.0\nWith version 0.10.0 there is one change that requires user action regarding the RabbitMQ messagebus:\nRabbitMQ now requires explicitly set password and username\nGitpod uses a RabbitMQ installation for distributing messages between components. So far that has been using default credentials if not configured otherwise. With v0.10.0 this is now explicitly required.\nTo do so add the following to your values.custom.yaml:\nrabbitmq:\n  auth:\n    username: your-rabbitmq-user\n    password: your-secret-rabbitmq-passwordIf this is not present, helm will fail with the following message:\n“RabbitMQ username is required, please add a value to your values.yaml or with the helm flag --set rabbitmq.auth.username=xxxxx”\nUpgrading Gitpod from v0.6.0 to v0.7.0\nWith version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.\nBuilt-in MinIO is now accessible at minio.your-gitpod-domain.com\nWhen you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/updating/index"}}],["596",{"pageContent":"disabled). As of v0.7.0, the built-in MinIO instance is accessible at https://minio.your-gitpod-domain.com. That&#39;s the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:\nminio:\n  accessKey: add-a-radom-access-key-here\n  secretKey: add-a-radom-secret-key-hereIf you don&#39;t do this, helm will fail with the following message:\n“minio access key is required, please add a value to your values.yaml”\nRemote storage config has been moved to a new component\nIf you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component wsDaemon to the new component contentService. See the Storage Guide for an example.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/updating/index"}}],["597",{"pageContent":"Installation requirements for Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nThis page details the software and hardware requirements for installing Gitpod Self-Hosted on your own infrastructure.\nSupported Kubernetes distributions\nGitpod Self-Hosted runs well on:\nAmazon Elastic Kubernetes Service\nGoogle Kubernetes Engine\nK3s\nMicrosoft Azure Kubernetes Service\nIncompatible Kubernetes distributions\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\nRed Hat® OpenShift®\nRancher Kubernetes Engine (RKE)\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please contact us to start discussions about making support for them happen sooner.\nMinimum Kubernetes requirements\nWe strongly recommend deploying a dedicated kubernetes cluster just for Gitpod Self-Hosted.\nHere are the minimum requirements:\nEither Ubuntu 18.04","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements/index"}}],["598",{"pageContent":"with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel.\nCalico for the networking overlay and network policy.\nKubernetes ≥ 1.18.\ncontainerd ≥ 1.2.\nhelm ≥ 3.6.\nMinimum compute resources\nIf you want to run Gitpod Self-Hosted at home we recommend at minimum 2vCPU&#39;s and 8GB of memory. For a better experience we recommend at least 4vCPUs and 16GB RAM for workspace nodes. For cost efficiency, we recommend enabling cluster-autoscaling when running on a commercial cloud provider.\nRuntime requirements\nDNS\nGitpod requires a domain (or sub-domain on a domain) that is resolvable by your name servers. As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\nFor example:\nyour-domain.com\n*.your-domain.com\n*.ws.your-domain.comor\ngitpod.your-domain.com\n*.gitpod.your-domain.com\n*.ws.gitpod.your-domain.comIngress\nGitpod is designed to serve traffic directly to your local network or internet.\nWrapping Gitpod Self-Hosted behind proxies such as nginx or configurations where URLs are rewritten are not supported.\nSSL\nGitpod requires trusted HTTPS certificates. While there is no hard requirement on any certificate authority,","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements/index"}}],["599",{"pageContent":"we recommend using an ACME certificate issuer (such as ZeroSSL or LetsEncrypt) to automatically renew and install certificates as we do for gitpod.io.\nInstallation of Gitpod with SSL certificates signed with your own CA are not currently supported. This scenario is desired and we would welcome help getting this community pull-request merged.\nThe HTTPS certificates for your domain must include your-domain.com, *.your-domain.com and *.ws.your-domain.com. Beware that wildcard certificates are valid for one level only (i.e. *.a.com is not valid for c.b.a.com)\nStorage\nEither Google Cloud Storage or Amazon S3 or MinIO Storage.\nDatabase\nGitpod uses a MySQL database to store user data.\nBy default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume.\nFor production settings, we recommend operating your own MySQL database (version v5.7 or newer).\nSupported web browsers\nGitpod Self-Hosted works with the following browsers:\nMozilla Firefox\nGoogle Chrome\nApple Safari (iPad OS and Desktop)\nMicrosoft Edge (Chromium)","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements/index"}}],["600",{"pageContent":"Troubleshooting Gitpod Self-Hosted\n“⚠️ Deprecated Content\nThe content of this page assumes you are using Helm, which is now deprecated. Please use the Installer instead.”\nThis section should solve all errors that might come up during installation of Gitpod.\n1. ws-daemon is stuck in Init: 0/1\nkubectl describe pod ws-daemon-... gives:\nMountVolume.SetUp failed for volume &quot;node-fs1&quot; : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory\nSolution\nssh onto the node, mount | grep rootfs and find the directory where your containers are stored. Common paths are:\n/run/containerd/io.containerd.runtime.v1.linux/k8s.io\n/run/containerd/io.containerd.runtime.v1.linux/moby\n/run/containerd/io.containerd.runtime.v2.task/k8s.io\n\nMerge the following into your values.custom.yaml:\ncomponents:\n  wsDaemon:\n    containerRuntime:\n      nodeRoots:\n      - <your path here>\nDo an helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0 to apply the changes.\n\n“Example: For k3s a common configuration looks like this:”\ncomponents:\n  wsDaemon:\n    containerRuntime:\n      containerd:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting/index"}}],["601",{"pageContent":"socket: /var/run/k3s/containerd/containerd.sock\n      nodeRoots:\n        - /var/run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io2. helm install fails with: &quot;minio access key is required, please add a value to your values.yaml&quot;\nSince 0.7.0 minio requires custom credentials to be configured.\nSolution\nFollow the Upgrade Guide.\n3. After upgrade, the minio Pod is stuck in ContainerCreating\nThis is caused by a bug in the minio Helm chart which blocks itself on updates.\nSolution\nkubectl scale deployments/minio --replicas=0\n\nkubectl scale deployments/minio --replicas=1\n\nWait until the pod comes up.\n\n3. agent-smith daemonset fails in deployment\nIn the v0.10.0 release agent-smith is incorrectly enabled in Gitpod Self-Hosted.\nSolution\nAdd the following to your values.yaml file to disable agent-smith:\ncomponents:\n  agentSmith:\n    disabled: true4. Workspaces stopping once container image downloaded\nThis may be caused by your host operating system not supporting shiftfs. Check the ws-daemon logs for an error message like &quot;error&quot;,&quot;message&quot;:&quot;cannot mount shiftfs mark&quot; to confirm.\nFurther proof can be found by checking if","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting/index"}}],["602",{"pageContent":"the shiftfs kernel module is present on your host operating system:\nfind /lib/modules/ -name '*shiftfs*'If this returns nothing, shiftfs is not supported by your instance and you will need to use fuse instead.\nSolution\nAdd the following to your values.yaml file to use fuse-overlayfs:\ncomponents:\n  wsDaemon:\n    userNamespaces:\n      fsShift: fuse5. Create workspace results in 7 PERMISSION_DENIED: cannot resolve workspace image error\nRequest createWorkspace failed with message: 7 PERMISSION_DENIED: cannot resolve workspace image: not authorized Unknown Error\nIf you are using the internal Docker registry, you will need to specify the username and password so your Gitpod instance can access it.\nSolution\nAdd the following to your values.yaml file to authorize the Docker registry:\ncomponents:\n  docker-registry:\n    authentication:\n      username: gitpod\n      password: gitpod“Replace these with your own values.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting/index"}}],["603",{"pageContent":"Install Gitpod in an Air Gapped Network\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n“Note: Installing Gitpod in an air gapped network is a feature limited to our Professional Plan. We support air-gap mode for paying customers only.”\nIn this guide, we expect you to have a cluster up and running that meets the requirements and have the required components installed and configured (at least cert-manager is needed).\nPreparation\nBefore you can start with the installation, you need to prepare the following:\nYou need to have a Docker registry available in your network where you can push images to and where your Kubernetes cluster can pull images from.\nYou need to download installation bundles.\nWe provide you with a URL and","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap"}}],["604",{"pageContent":"password to a download portal. There you will find the following bundles that you need to download:\nKOTS CLI package kots_linux_amd64.tar.gz  (provides you with the kubectl kots CLI binary)\nKOTS Airgap Bundle kotsadm.tar.gz  (provides you with the Docker images you need for the Gitpod KOTS installer)\nGitpod Airgap Bundle gitpod-&lt;version&gt;.airgap  (provides you with the Gitpod Docker images)\nkots-airgap-download\nCopy the KOTS CLI package as well as the KOTS Airgap Bundle to the machine where you are able to run kubectl.\nInstall KOTS CLI\nUnpack the KOTS CLI package kots_linux_amd64.tar.gz, rename the binary kots to kubectl-kots, and copy it to /usr/local/bin/ (or to any other folder that is in your PATH).\nNow, you should be able to run the following command:\n$ kubectl kots helpInstall Gitpod\nAt first, you need to push the images that are needed for the installation admin console to your registry.\n$ kubectl kots admin-console push-images \\\n    ./kotsadm.tar.gz \\\n    <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>Replace the following placeholder:\n\nPlaceholder\n\n\n&lt;registry&gt;The registry URI in the form","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap"}}],["605",{"pageContent":"&lt;host&gt;:&lt;port&gt;/&lt;namespace&gt;, e.g. my-registry.example.com:443/gitpod.\n\n&lt;username&gt;The username for the registry that has write access (is allowed to push).\n\n&lt;password&gt;The password to the username.\n\nNext, you can start installing Gitpod like this:\n$ kubectl kots install gitpod \\\n    --kotsadm-namespace <namespace> \\\n    --kotsadm-registry <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>Replace the following placeholder:\n\nPlaceholder\n\n\n&lt;namespace&gt;Namespace that is used in the registry URI above.\n\n&lt;registry&gt;The hostname of your registry, e.g. my-registry.example.com:443.\n\n&lt;username&gt;The username for the registry that has read access (is allowed to pull).\n\n&lt;password&gt;The password to the username.\n\nYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin ConsoleOpen your favorite browser and go to http://localhost:8800 (port 8800 is opened on your node on localhost only--you may want to forward the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap"}}],["606",{"pageContent":"port to your workstation in order to access the admin console).\nNow, you will be asked for the password and the license. On the next page, you have to set:\nthe hostname of your registry (e.g. my-registry.example.com:443),\nusername and password (read access), as well as\nthe namespace that you used in the registry URI above (e.g. gitpod).\nClick on “choose a bundle to upload” and select your gitpod-&lt;version&gt;.airgap file on your local computer. Then hit the “Upload airgap bundle” button.\nkots-airgap-upload\nUploading this file and pushing the images to your registry will take a while (could take several hours depending on your internet connection). Grab a cup of coffee or tea and wait for it to be ready. ☕\nOnce the images has been pushed to your registry, you can continue to install Gitpod as described in the installation guide. Happy coding!","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap"}}],["607",{"pageContent":"Component Customization\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nIn this guide, we expect you to have a cluster up and running that meets the requirements and has the required components installed and configured (at least cert-manager is needed).\nThis guide assumes that you are using our default installation method from our installation guide.\nRationale\nGitpod self-hosted is built to work by default, but it also has to be incredibly flexible. Our installation defaults will work for the vast majority of users, but there will be occassions when it does not. In order to add more flexibility, you have the ability to customise some of Gitpod&#39;s components.\nIn your KOTS dashboard, you will need to enable advanced options.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/components"}}],["608",{"pageContent":"This will enable the &quot;Components&quot; section.\nkots-advanced\nProxy service type\nAll web traffic enters the application through the Proxy component. By default, this is a LoadBalancer type which will expose the application through the cloud provider&#39;s load balancer.\nUnder certain circumstances, this may be undesirable. Under the &quot;Advanced&quot; section, you may select a different service type - all Kubernetes service types are supported, except ExternalName. If you are using anything other than LoadBalancer, you are responsible for configuring your network to route traffic through to the proxy service.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/components"}}],["609",{"pageContent":"Applying custom annotations, labels and environment variables\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nIn this guide, we expect you to have a cluster up and running that meets the requirements and has the required components installed and configured (at least cert-manager is needed).\nThis guide assumes that you are using our default installation method from our installation guide.\nRationale\nThere are times when it is necessary to add custom annotations, environment variables and labels to your installation in order to add it to your environment. For example, one may need to support specific monitoring and observability software or want to target a specific load balancer type.\nConfiguration\nBefore you start, you","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["610",{"pageContent":"will need to create a YAML file that is subsequently used to describe your customizations. The structure is based upon the standard Kubernetes resource definition.\nOnce created, this file can be uploaded to the Installation Admin UI during installation under the advanced features section (bottom).\nkots-advanced-customization\nAnnotations and labels\nFor these to be applied to a resource, these must match the apiVersion, kind and metadata.name properties of the target resource. These accept any value that is valid as per the Kubernetes specifications and also an * as a wildcard.\nAny properties in metadata.annotations and metadata.labels are then applied to the matching resource(s). These are key/value maps, where both key and value are strings.\nIMPORTANT You cannot directly customize the properties on a Pod. Instead, these will inherit the annotation/label customization from its parent (Deployment, DaemonSet, StatefulSet, Job etc).\nEnvironment variables\nFor environment variables, these must match metadata.name. apiVersion and kind are ignored as these are only implemented on resources with containers.\nAny properties in spec.env are then applied. These should have a name","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["611",{"pageContent":"and value as per the Kubernetes specification.\nExample Configuration\ncustomization:\n  - apiVersion: \"*\"\n    kind: \"*\"\n    metadata:\n      name: \"*\"\n      annotations:\n        appliedToAll: value\n        hello: world\n      labels:\n        appliedToAll: value\n        hello: world\n  - apiVersion: \"apps/v1\"\n    kind: \"Deployment\"\n    metadata:\n      name: \"ws-manager\"\n      annotations:\n        hello: ws-manager\n      labels:\n        hello: ws-manager\n    spec:\n      env:\n        - name: HELLO\n          value: worldThis example would generate the following spec (these are simplified for readability reasons):\n---\n# apps/v1/DaemonSet ws-daemon\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: gitpod # system-value\n    component: ws-daemon # system-value\n    appliedToAll: value\n    hello: world\n  annotations:\n    appliedToAll: value\n    hello: world\n  name: ws-daemon\n---\n# apps/v1/Deployment ws-manager\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: gitpod\n    component: ws-manager\n    appliedToAll: value\n    hello: ws-manager\n  annotations:\n    appliedToAll: value\n    hello: ws-manager\n  name: ws-manager\nspec:\n  template:\n    # The custom annotations/labels are inherited from the Deployment spec\n    metadata:\n      annotations:\n        appliedToAll: value","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["612",{"pageContent":"gitpod.io/checksum_config: xxxx\n        hello: ws-manager\n      labels:\n        app: gitpod\n        component: ws-manager\n        appliedToAll: value\n        hello: ws-manager\n      name: ws-manager\n    spec:\n      containers:\n        - env:\n            - name: HELLO\n              value: worldIn the event of multiple matches, the final matching customization is applied. Therefore, it is a good idea to structure your customization from least to most specific.\n“Important: System-generated values will never be overridden.”\nAWS Proxy Service Example\nThis is an example configuration for working with AWS Load Balancer Controllers of the Network Load Balancer variety, when deployed in AWS EKS. This example creates a load balancer with a public IP, references two subnets: [subnet-012e8ff1de0654321,subnet-0a6d28629bc123456], tunes timeouts, and ensures the tags project:gitpod-docs and team:cs are applied to the AWS resources it creates.\n---\ncustomization:\n  - apiVersion: \"*\"\n    kind: \"Service\"\n    metadata:\n      name: \"proxy\"\n      annotations:\n        service.beta.kubernetes.io/aws-load-balancer-scheme: \"internet-facing\"\n        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: \"instance\"","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["613",{"pageContent":"service.beta.kubernetes.io/aws-load-balancer-subnets: \"subnet-012e8ff1de0654321,subnet-0a6d28629bc123456\"\n        alb.ingress.kubernetes.io/load-balancer-attributes: \"idle_timeout.timeout_seconds=3600\"\n        service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: \"project=gitpod-docs,team=cs\"Limitations\n“This limitation has been removed as of 2022.08.0.”\nLabels are immutable on some Kubernetes resources, such as Deployments, DaemonSets and StatefulSets.\nIf you wish to change a label on one of these resources, you must destroy that resource first. This can be achieved by running kubectl delete &lt;resource&gt; --namespace &lt;namespace&gt; &lt;name&gt; prior to running the KOTS deployment.\nIn the event of there being multiple resources that need to be amended, you can run helm uninstall --namespace &lt;namespace&gt; gitpod. If you are using an in-cluster database or object storage, you should not run this command without taking a backup of your persistent volumes first.\n“WARNING: If deleting Kubernetes resources, your Gitpod instance is likely to become inaccessible and unstable. This should not be attempted while it is being used","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["614",{"pageContent":"for normal development as data loss is likely.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/customization"}}],["615",{"pageContent":"Setting an installation-wide default workspace image\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis guide describes how to set a default workspace image that will apply to your entire Gitpod Self-Hosted installation. Please refer to the Docker image documentation for more information about workspace images.\n“Note: there are two ways of setting an image for a workspace: via the installation-wide default workspaceImage (mentioned here) and the .gitpod.yml file. The .gitpod.yml file will take precedence if both are set.”\nSetting a default workspace image\n“Note: this will apply to your entire installation. If you are using a private registry for your image, please ensure you add it to the allow list and provide","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image"}}],["616",{"pageContent":"credentials for it - for guidance, see using private registries.”\nCurrently, the default workspace image can only be set via the config patch. In the future, we plan to also allow you to set this via the installation UI.\nworkspace:\n  workspaceImage: string","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image"}}],["617",{"pageContent":"Setting up your EKS cluster with dual ALB + NLB load balancers\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nIf you are unable to use an AWS classic load balancer (CLB) (e.g. because you want to use SSL Certificates generated by AWS) you need to set up an Application Load Balancer (ALB) for HTTPS traffic (e.g. when using VS Code in the browser). If you wish to use Desktop IDEs together with Gitpod Self-Hosted, which use SSH for networking, and thus require a Level 4 load balancer, you also need to create a Network Load balancer (NLB) (which is a Level 4 load balancer that can handle ssh traffic). AWS&#39; ALB is a level 7 load balancer and can only handle HTTPS traffic.\nThis guide shows how to install both an ALB and an NLB into an EKS cluster. It","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["618",{"pageContent":"is meant to be used as a supplement to the Single Cluster Reference Architecture (AWS) which only installs a CLB by default. You will configure your DNS to point ssh traffic to the NLB and HTTPS traffic to the ALB.\n“Note: This guide assumes that you will be using AWS to manage your SSL certificates.”\nSetting up an ALB and NLB\n0. Node configuration\nBecause we need to use an internal CA for communication that has to be distributed to the nodes, we need to ensure all managed nodes have /etc/containerd/certs.d in their /etc/containerd/config.toml to load the self-signed certificate used for internal communication.\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  config_path = \"/etc/containerd/certs.d\"These are two examples to enforce this:\nUse python to insert the values into the toml file respecting the formatting:\napt-get update && apt-get install -y python3-pip\npip3 install toml mergedeep\n/usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1\nimport toml\nfrom mergedeep import merge\nc = toml.load('/etc/containerd/config.toml')\nmerge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path':","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["619",{"pageContent":"'/etc/containerd/certs.d'}}}})\nwith open('/etc/containerd/config.toml', 'w') as f:\n  toml.dump(c, f)\nEOF\nservice containerd restartBruteforce method that will just append the lines to /etc/containerd/config.toml which will work if there are no other registry settings present in your config.toml file\ncat << CONFIG >> /etc/containerd/config.toml\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\nconfig_path = \"/etc/containerd/certs.d\"\n\nCONFIG\n\nservice containerd restartoverrideBootstrapCommand: |\n  #!/bin/bash\n  set -x\n  export CLUSTERNAME=gitpod\n  export NODEGROUP=services\n  export CONTAINER_RUNTIME=containerd\n  declare -a LABELS=(\n  eks.amazonaws.com/nodegroup=\"${NODEGROUP}\"\n      gitpod.io/workload_meta=true\n      gitpod.io/workload_ide=true\n    )\n    export USE_MAX_PODS=false\n    export KUBELET_EXTRA_ARGS=\"$(printf -- \"--node-labels=%s\" $(IFS=$','; echo \"${LABELS[*]}\"))\"\n  /etc/eks/bootstrap.sh ${CLUSTERNAME} --use-max-pods false\n\n  # Update containerd config while waiting on https://github.com/gitpod-io/gitpod/issues/11005\n\n  apt-get update && apt-get install -y python3-pip\n  pip3 install toml mergedeep\n  /usr/bin/env python3 - <<","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["620",{"pageContent":"EOF > /var/log/update-containerd-config-out.txt 2>&1\n  import toml\n  from mergedeep import merge\n  c = toml.load('/etc/containerd/config.toml')\n  merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})\n  with open('/etc/containerd/config.toml', 'w') as f:\n    toml.dump(c, f)\n  EOF\n  service containerd restart1. Install AWS load balancer controller\nInstall the AWS load balancer controller. The below example assumes you have created the user aws-load-balancer-controller with the correct IAM permissions already. --set hostNetwork=true is required by Calico.\nhelm repo add eks https://aws.github.io/eks-charts\nhelm repo update\nhelm upgrade aws-load-balancer-controller \\\n    eks/aws-load-balancer-controller \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --reset-values \\\n    --namespace kube-system \\\n    --set clusterName=<insert cluster name> \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set hostNetwork=true2. Install Gitpod\nEnsure that you&#39;ve created all the required components as per the reference architecture guide: Object","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["621",{"pageContent":"Storage, OCI Image Registry, Database. Then install Gitpod. While configuring your Gitpod installation, make sure to check &#39;use self-signed certificate&#39;. Make sure that you select node port as the service type for the proxy service in the components section of the installation UI (this assumes you are using version 2022.07 or later):\nproxy service type\nYou will also need to make sure that the &quot;allow login via SSH&quot; box is ticked:\nssh gateway\n3. Create alb-ingresss.yaml\nUpdate the alb-ingress.yaml below with your site-specific options (you need to customize anything tagged with &lt;..&gt;):\nalb-ingress.yaml\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: alb\n    alb.ingress.kubernetes.io/actions.ssl-redirect: |-\n      {\n        \"Type\": \"redirect\",\n        \"RedirectConfig\": {\n          \"Protocol\": \"HTTPS\",\n          \"Port\": \"443\",\n          \"StatusCode\": \"HTTP_301\"\n        }\n      }\n    alb.ingress.kubernetes.io/backend-protocol: HTTPS\n    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS\n    alb.ingress.kubernetes.io/listen-ports: |-\n      [{\n        \"HTTP\": 80\n      }, {\n        \"HTTPS\": 443\n      }]","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["622",{"pageContent":"alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=3600\n    alb.ingress.kubernetes.io/tags: Purpose=Gitpod,Service=proxy\n    alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30\n    alb.ingress.kubernetes.io/target-node-labels: gitpod.io/workload_meta=true\n    alb.ingress.kubernetes.io/target-type: instance\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10\n    alb.ingress.kubernetes.io/certificate-arn: <YOUR-AWS-SSL-PROVIDED_CERTIFICATE>\n    alb.ingress.kubernetes.io/scheme: <SET THIS -> internet-facing or internal>\n    alb.ingress.kubernetes.io/load-balancer-name: <GITPOD-LOAD-BALANCER-NAME>\n  name: gitpod\nspec:\n  defaultBackend:\n    service:\n      name: proxy\n      port:\n        number: 80\n  rules:\n    - http:\n        paths:\n          - backend:\n              service:\n                name: proxy\n                port:\n                  number: 443\n            path: /\n            pathType: Prefix4. Install ALB and NLB\nInstall the ALB (for HTTPS traffic) and NLB (for SSH traffic) using the .yaml file customized above as well as this one:\nnlb-ssh-service.yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gitpod-ssh\n  labels:\n    app:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["623",{"pageContent":"gitpod\n    component: ws-proxy-ssh\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-name: gitpod-ssh-gateway\n    service.beta.kubernetes.io/aws-load-balancer-type: external\n    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: \"instance\"\n    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp\n    service.beta.kubernetes.io/aws-load-balancer-target-node-labels: gitpod.io/workload_workspace_services=true\n    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true\n    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Project=gitpod-alb\nspec:\n  ports:\n    - name: ssh\n      protocol: TCP\n      port: 22\n      targetPort: 2200\n  selector:\n    app: gitpod\n    component: ws-proxy\n  type: LoadBalancerkubectl apply -f alb-ingress.yaml\nkubectl apply -f nlb-ssh-service.yaml5. Check if installed properly\nIf installed properly, then this should be the shell output given the command below:\n> kubectl get ingress","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["624",{"pageContent":"gitpod -n gitpod\nNAME     CLASS    HOSTS   ADDRESS                                                   PORTS   AGE\ngitpod   <none>   *       gitpod-airgap-alb-339697413.eu-west-1.elb.amazonaws.com   80      41s\n\n> kubectl get service gitpod-ssh -n gitpod\nNAME         TYPE           CLUSTER-IP       EXTERNAL-IP                                                       PORT(S)        AGE\ngitpod-ssh   LoadBalancer   172.20.162.102   gitpod-ssh-gateway-6588d186387780e5.elb.eu-west-1.amazonaws.com   22:30003/TCP   76s6. Update DNS records\nUpdate DNS as follows to point to your newly created loadbalancers depending on the type of traffic:\ngitpod.domain.com           --> ALB ADDRESS\n*.gitpod.domain.com         --> ALB ADDRESS\n*.ssh.ws.gitpod.domain.com  --> NLB ADDRESS","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb"}}],["625",{"pageContent":"Advanced Installation of Gitpod Self-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nHere you can find advanced topics related to installing Gitpod:\nTLS configuration for Gitpod Self-Hosted\nInstall Gitpod on an Air Gapped Network\nConfiguring popular container registries\nSetting a default workspace image\nUsing private image registries with Gitpod Self-Hosted\nSetting up your EKS cluster with dual ALB + NLB load balancers\nApplying custom annotations, labels and environment variables\nComponent Customization","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/index"}}],["626",{"pageContent":"Using private image registries with Gitpod Self-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nThis guide outlines the considerations to take when using images for workspaces that originate from private image registries that are not stored in the image registry already configured in the KOTS Installation UI. This is useful when, for example, you want to pull private base images from one registry and then store the built images in another.\nPlease refer to the Docker image documentation for more information about workspace images.\n“Note: there are two ways of setting an image for a workspace: via the installation-wide default workspaceImage and the .gitpod.yml file. The .gitpod.yml file will take precedence if both","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries"}}],["627",{"pageContent":"are set.”\nCredentials\nTo access private registries, Gitpod needs to have the corresponding access credentials. These can be supplied in the KOTS installation UI:\nregistry credentials UI\nAllowlist\nGitpod also has an allow list for private base image registries. Any private image registry that is used throughout an installation needs to be on this allowlist.\n“Important: Any registry for which credentials are supplied is automatically added to this allowlist!”\nRegistries can be added to the allowlist via the config patch in the following format:\ncontainerRegistry:\n  privateBaseImageAllowList:\n    - <your_registry-url.com>\n    - <another_registry-url.com>","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries"}}],["628",{"pageContent":"How To Configure Gitpod To Work With Certain External Components\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nGitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.\nContainer Registry\nAmazon Elastic Container Registry (ECR)\nAmazon ECR does not fully implement the Docker v2 API, namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\nWhen using AWS, you should","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration"}}],["629",{"pageContent":"select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\nIf using a region other than us-east-1, you will need to change the endpoint to be s3.&lt;region&gt;.amazonaws.com.\nGoogle Container Registry (GCR)\n“This example uses the format gcr.io, which is the global hostnames. This can be swapped with any of the regional hostnames and it will work in the same way.”\nGoogle Container Registry authentication requires specific configuration. The &quot;Container registry URL&quot; will be in a format similar to gcr.io/&lt;project-name&gt;/gitpod. In order for the authentication to work, you must also enter the &quot;Container registry server&quot;. This will always be your GCR hostname, eg gcr.io.\nGoogle Artifact Registry (GAR)\nAs with GCR, Google Artifact Registry requires both the &quot;Container registry URL&quot; and &quot;Container registry server&quot; to be completed. The URL will be in the format &lt;region&gt;-docker.pkg.dev/&lt;project-name&gt;/gitpod and the server address will be &lt;region&gt;-docker.pkg.dev.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration"}}],["630",{"pageContent":"TLS configuration for Gitpod Self-Hosted\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nTo run your own Gitpod instance, you need a TLS certificate for your Gitpod domain. There are three options to provide these TLS certificates.\nOption 1: Cert-Manager\nConfigure cert-manager to issue these certificates (usually with a DNS-01 challenge and services like Let&#39;s encrypt). See the installation guide) for more information.\nkots-tls-cert-manager\nOption 2: Self-signed by Gitpod\nWe usually do not recommend this option for production usage.\nLet Gitpod generate self-signed certificates for your installation. This option can be used in case your load balancer does the TLS termination or for testing settings. For the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/tls"}}],["631",{"pageContent":"latter case, you need to add the custom CA to your browser to let it accept the self-signed certificate. Use this command to export the CA:\n$ kubectl get secrets -n <namespace> ca-issuer-ca -o jsonpath='{.data.ca\\.crt}' | base64 -d > ~/ca.crtkots-tls-self-signed\nOption 3: Bring your own certificate\n“⚠️ Limitation\nAdding custom CA certificates is currently not supported on Google Kubernetes Engine (GKE) because on GKE containerd does not support custom certificates.”\nUpload your own TLS certificate, key, and (optionally) CA certificate. When your TLS certificate is signed by a publicly accepted TLS authority, you just need to upload your certificate and key. In case it is a self-signed certificate (e.g. signed by a corporate CA), you also need to upload your CA.\nkots-tls-bring-own","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/advanced/tls"}}],["632",{"pageContent":"How to Create a Cluster on Amazon Elastic Kubernetes Service (EKS)\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n“This guide has been deprecated. Please use the Single Cluster Reference Architecture instead.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-amazon-eks"}}],["633",{"pageContent":"How to Create a Cluster on Google Kubernetes Engine (GKE)\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n“This guide has been deprecated. Please use the Single Cluster Reference Architecture instead.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-gke"}}],["634",{"pageContent":"How to Create a Cluster with K3s\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nIn this guide, we show you how to set up a Kubernetes cluster with K3s that is ready to install Gitpod. In this example we expect to have at least 2 nodes with Ubuntu 20.04 (a single node setup would work as well, see hint below):\nnode0: main node where the Gitpod service pods will be deployed to\nnode1: worker node where the Gitpod workspace pods will be deployed to\noptional: one or more additional worker nodes node2 … nodeN\nOn each node, we install K3s. We configure K3s by setting the following environment variables on the nodes.\nK3s config for main node node0:\nexport INSTALL_K3S_EXEC=\"server --disable traefik --flannel-backend=none --node-label","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s"}}],["635",{"pageContent":"gitpod.io/workload_meta=true --node-label gitpod.io/workload_ide=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"K3s config for all other nodes:\nexport INSTALL_K3S_EXEC=\"agent --node-label gitpod.io/workload_workspace_services=true --node-label gitpod.io/workload_workspace_regular=true --node-label gitpod.io/workload_workspace_headless=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"\nexport K3S_URL=\"https://node0:6443\"Hint: In case you would like to set up a single node cluster (only the main node) add the --node-label arguments of the bottom &quot;other&quot; nodes config to the INSTALL_K3S_EXEC variable of the main node config.\nAfter setting the environment variables, install K3s on every node like this:\n$ curl -sfL https://get.k3s.io | sh -Now, you have to install Calico. Download the Calico manifest and add the following line to the plugins section of the cni_network_config:\n\"container_settings\": { \"allow_ip_forwarding\": true }The section in the calico-vxlan.yaml file should look like this:\n[...]\n  cni_network_config: |-\n    {\n      \"name\":","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s"}}],["636",{"pageContent":"\"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          },\n          \"container_settings\": { \"allow_ip_forwarding\": true }\n        },\n[...]Copy that file to node0 in the following folder (create folder if missing):\n/var/lib/rancher/k3s/server/manifests/That&#39;s it. Your K3s cluster is ready to install Gitpod. The next step is to install cert-manager. Just follow the instructions of the installation guide to install !","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s"}}],["637",{"pageContent":"How to Create a Cluster on Microsoft Azure Kubernetes Service (AKS)\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nInstructions on how to create a Microsoft AKS environment that is ready to install Gitpod are located in the gitpod-io/gitpod-microsoft-aks-guide repository on GitHub. The installation process takes around twenty minutes. In the end, the following resources are created:\nAn Microsoft AKS cluster running Kubernetes v1.21.\nAn Microsoft Azure load balancer.\nAn Microsoft Azure DNS zone.\nAn Microsoft Azure container registry.\nMySQL will be provided by Helm under #5508 solved.\nMinio will be used until Microsoft Azure storage gateway is configured.\nInstallation of calico as CNI and NetworkPolicy","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks"}}],["638",{"pageContent":"implementation\nInstallation of cert-manager for self-signed SSL certificates\nUpon completion, this script will print the config for the resources created (including passwords) and what is the next relevant step in the installation process. Note that you will be able to skip steps 2 and 3 in the getting started guide because the script can do these steps for you.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks"}}],["639",{"pageContent":"Reference Architectures\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nBelow you will find reference architectures supported and recommended by Gitpod for different situations and all major cloud providers. They help you create the infrastructure needed to run Gitpod Self-Hosted and come in the form of a guide and terraform configuration. These are used to create the infrastructure for our nightly testing and fulfil the requirements Gitpod has on a cluster.\n“Note: You should see these reference architectures as a starting point for creating infrastructure that works with both Gitpod and your own infrastructure requirements and policies. However, the further you deviate from these recommended architectures, the higher","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/index"}}],["640",{"pageContent":"the potential for Gitpod to not behave as expected.”\n\n\n\n\nProof-of-Value Reference ArchitectureAimed at creating a minimal set of infrastructure for evaluation and testing purposes\n\nSingle-Cluster Reference Architecture for Production Purposes Aimed at creating hardened infrastructure for a continuous operation of Gitpod\n\n Multi-Cluster High-Availiability Reference Architecture","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/index"}}],["641",{"pageContent":"Proof-of-Value Reference Architecture\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n\n\n\n\nStatus:\n\nIntended for:Trying out Gitpod in a representative way but with only the minimum of infrastructure required\n\nLimitations:- Not intended for long-term, production usage  - Higher risk of data loss due to in-cluster dependencies - if you lose your cluster, you may lose your data  - Data is not carried over when moving to the Single Cluster Reference Architecture for production purposes\n\nOverview\nThis reference architecture provides you with a setup where all components that are needed to operate Gitpod are deployed within the Kubernetes cluster. In contrast to a production-oriented setup, this means that the required","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["642",{"pageContent":"database, object storage, well as a registry are deployed for you within the cluster. All cluster services and workspaces are deployed on a single autoscaling node group.\n“If you are looking for a scalable and reliable way to run Gitpod, please take a look at our Single Cluster Reference Architecture.”\nCloud Provider Preparations\n\nKubernetes Cluster\nThe heart of this reference architecture is a Kubernetes cluster where all components are deployed to. This cluster has a single node pool that needs to have all of the following labels:\ngitpod.io/workload_meta=true\ngitpod.io/workload_ide=true\ngitpod.io/workload_workspace_services=true\ngitpod.io/workload_workspace_regular=true\ngitpod.io/workload_workspace_headless=true\nThe following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\nGCPAWS\n\n\nGitpod Node Pooln2d-standard-16m6i.4xlarge\n\nFirst, we create a service account for the cluster. The service account needs to have the following roles:\n\nRoles\n\n\nroles/logging.logWriter\n\nroles/monitoring.metricWriter\n\nroles/container.admin\n\nRun the following commands to create the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["643",{"pageContent":"service account:\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"After that, we create a Kubernetes cluster.\n\n\n\n\nImage TypeUBUNTU_CONTAINERD\n\nMachine Typen2d-standard-16\n\nCluster VersionChoose latest from regular channel\n\nEnableAutoscaling,Autorepair,IP Alias,Network Policy\n\nDisableAutoupgrademetadata=disable-legacy-endpoints=true\n\nCreate Subnetworkgitpod-${CLUSTER_NAME}\n\nNumber of nodes1\n\nMin Nodes1\n\nMax Nodes50\n\nMax Pods per","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["644",{"pageContent":"Node110\n\nAddonsHorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy\n\nScopesgke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\n\nRegionChoose your region and zones\n\nNode Labelsgitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true,gitpod.io/workload_workspace_regular=true,gitpod.io/workload_workspace_headless=true\n\nCLUSTER_NAME=gitpod\nREGION=us-central1-b\nGKE_VERSION=1.21.12\n\ngcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --cluster-version=\"${GKE_VERSION}\" \\\n    --zone=\"${ZONE}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["645",{"pageContent":"--node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true,gitpod.io/workload_workspace_regular=true,gitpod.io/workload_workspace_headless=true\" \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicyNow, you can connect kubectl to your newly created cluster.\ngcloud container clusters get-credentials --zone=\"${ZONE}\" \"${CLUSTER_NAME}\"After that, you need to create cluster role bindings to allow the current user to create new RBAC rules.\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"For eksctl, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\nThe example eksctl config file includes services accounts that might not be relevant to a particular deployment, but are included for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["646",{"pageContent":"reference.\ncert-manager provided for the required cert-manager tooling. If using DNS-01 challenges for Let&#39;s Encrypt with a Route53 zone, then enable the cert-manager wellKnownPolicies or ensure one exists with permissions to modify records in the zone\naws-load-balancer-controller enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\ncluster-autoscaler connects to the AWS autoscaler\nebs-csi-controller-sa enables provisioning of the EBS volumes for PVC storage\nexternal-dns creates DNS records for external-facing Gitpod services\nProvided below is a complete eksctl configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a gitpod-cluster.yaml file refer to this reference.\ngitpod-cluster.yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: gitpod-pov\n  region: eu-west-1\n  version: \"1.22\"\n  # Update tags on your other Gitpod AWS resources (such as securitygroup rules)\n  # to match these tags.\n  tags:\n    department: eng\n    team: selfhosted\n    owner: alt\n    project: gitpod-pov\n\niam:\n  withOIDC: true\n\n  serviceAccounts:\n    -","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["647",{"pageContent":"metadata:\n        name: aws-load-balancer-controller\n        namespace: kube-system\n      wellKnownPolicies:\n        awsLoadBalancerController: true\n    - metadata:\n        name: ebs-csi-controller-sa\n        namespace: kube-system\n      wellKnownPolicies:\n        ebsCSIController: true\n    - metadata:\n        name: cluster-autoscaler\n        namespace: kube-system\n      wellKnownPolicies:\n        autoScaler: true\n    - metadata:\n        name: cert-manager\n        namespace: cert-manager\n      wellKnownPolicies:\n        certManager: true\n    - metadata:\n        name: external-dns\n        namespace: external-dns\n      wellKnownPolicies:\n        externalDNS: true\n\n# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n  autoAllocateIPv6: false\n  nat:\n    # For production environments use HighlyAvailable, for an initial deployment Single adequate\n    # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n    #","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["648",{"pageContent":"https://eksctl.io/usage/vpc-networking/#nat-gateway\n    gateway: Single\n\n  # Cluster endpoints and public access\n  # Private access ensures that nodes can communicate internally in case of NAT failure\n  # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n  clusterEndpoints:\n    privateAccess: true\n    publicAccess: true\n  publicAccessCIDRs: [\"0.0.0.0/0\"]\n\n# Logging settings\ncloudWatch:\n  clusterLogging:\n    enableTypes: [\"*\"]\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n  - name: default\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 1\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true\n\n    iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        -","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["649",{"pageContent":"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod-pov\"), update this tag to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp-pov: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod-pov: \"owned\"\n\n    labels:\n      gitpod.io/workload_meta: \"true\"\n      gitpod.io/workload_ide: \"true\"\n      gitpod.io/workload_workspace_regular: \"true\"\n      gitpod.io/workload_workspace_services: \"true\"\n      gitpod.io/workload_workspace_headless: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.shTo ensure there are enough IPs and networking policy enforcement is in place, this proof of value reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["650",{"pageContent":"provisioned and before the nodegroups have been created.\nFirst: Run eksctl with the --without-nodegroup flag to provision just the control plane defined in the gitpod-cluster.yaml:\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yamlThis should result in the following output:\n2022-08-11 22:10:23 [ℹ]  eksctl version 0.107.0\n2022-08-11 22:10:23 [ℹ]  using region eu-west-1\n2022-08-11 22:10:23 [ℹ]  setting availability zones to [eu-west-1b eu-west-1a eu-west-1c]\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1b - public:192.168.0.0/19 private:192.168.96.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19\n2022-08-11 22:10:23 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-08-11 22:27:06 [✔]  EKS cluster \"gitpod-pov\" in \"eu-west-1\" region is readyAfter this command finishes, check that eksctl also created the kubeconfig properly by running the command kubectl get pods -n kube-system. If deployed correctly one should see the list of pods in a pending state.\nkubectl get pods -n","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["651",{"pageContent":"kube-systemThis should result in:\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-79vqv   0/1     Pending   0          22m\ncoredns-5947f47f5f-97f8m   0/1     Pending   0          22mCalico Installation\nThis is following the instructions provided by Tigera.\nTo install Calico, first remove the default AWS-provided networking component:\nkubectl delete daemonset -n kube-system aws-nodeInstall the Calico manifest:\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yamlNow configure Calico for EKS-specific support with the following command:\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=DisableSSH Access to nodegroups\neksctl allows for ssh keys to be added to your nodegroups for troubleshooting. By default, the gitpod-cluster.yaml does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity through multiple methods to each instance in your nodegroup.\nCreate the gitpod nodegroup\nOnce the Calico CNI has been provisioned the gitpod nodegroup can be created.\nCreate the Gitpod nodegroup:\neksctl create nodegroup --include=default --config-file gitpod-cluster.yamlThis should result","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["652",{"pageContent":"in:\n2022-08-11 22:52:10 [ℹ]  nodegroup \"default\" will use \"ami-0733d755ed2c97a4d\" [Ubuntu2004/1.22]\n2022-08-11 22:52:13 [ℹ]  combined include rules: default\n2022-08-11 22:52:13 [ℹ]  1 nodegroup (default) was included (based on the include/exclude rules)\n2022-08-11 22:52:13 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod-pov\"\n[...]\n2022-08-11 22:56:53 [ℹ]  node \"ip-192-168-104-44.eu-west-1.compute.internal\" is ready\n2022-08-11 22:56:53 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod-pov\"\n2022-08-11 22:56:57 [ℹ]  checking security group configuration for all nodegroups\n2022-08-11 22:56:57 [ℹ]  all nodegroups have up-to-date cloudformation templatesYou can verify that your installation was deployed properly with the custom kubectl command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting our minimum requirements as intended.\nkubectl get nodes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["653",{"pageContent":"-o=custom-columns=\"NAME:.metadata.name,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"Enable cluster autoscaling\nGitpod&#39;s resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to provision and remove EKS nodes on demand.\nCLUSTER_NAME=\"gitpod-pov\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\\n    --set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["654",{"pageContent":"--set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscalerDeleting the cluster\nWhen deleting this cluster following your proof of value evaluation, any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working with existing VPCs in eksctl.\nFull removal of the installed components would look something like this (commands are grouped for brevity):\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait\n\n#### The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force\n\n#### delete iam resources\naws iam detach-user-policy","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["655",{"pageContent":"--user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'Networking\nInstall Gitpod\nCongratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions of the installation guide.\nIf you followed the steps to create your infrastructure of this guide, you need to use the following config settings for your Gitpod installation:\n\nGeneral settings\n\n\nDomain namevalue of $DOMAIN\n\nKeep cert-manager selected for the TLS certificates options.\n\nTLS certificates&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["656",{"pageContent":"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n\nSelf-signed TLS certificateno\n\ncert-manageryes\n\nIssuer namegitpod-issuer\n\nIssuer typeSelect “cluster issuer”\n\n\nAdditional features&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n\nAllow login to your workspace via SSH (if you wish to use desktop IDEs)✅","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value"}}],["657",{"pageContent":"Single-Cluster Reference Architecture for Production Purposes\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\n\n\n\n\nStatus:\n\nIntended for:Continous usage of Gitpod at a company-wide scale in a reliable way by leveraging popular cloud provider services such as S3 and RDS.\n\nLimitations:- This is bound to a single cluster. Deploying in several regions currently requires setting up several Gitpod installations  - Creates external dependencies for Gitpod componenents (object storage, registry, database)  - This is not highly available and requires downtime to upgrade (high availability requires a governed workspace cluster, which is beyond the scope of this reference architecture)\n\nTerraform: - Example Terraform","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch"}}],["658",{"pageContent":"configuration for GCP  - Example Terraform configuration for AWS\n\nCost Estimates: High-level cost estimates*:  - GCP  - AWS\n\nThis guide describes a single-cluster reference architecture for Gitpod aimed at production environments: continuous deployments of Gitpod used in anger by your engineers. It consists of a Kubernetes cluster, cert-manager, external MySQL database, external OCI image registry, and external object storage. It includes instructions on how to set up this reference architecture on the officially supported cloud providers.\nThis reference architecture can be used as a blueprint for your Gitpod installation: Start with this reference architecture and adapt it to your needs. The reference architecture as described in this guide is what Gitpod supports, and is used to test against every self-hosted Gitpod release.\nTo use Gitpod, you also need a Git source code management system (SCM) like GitLab, GitHub, or Bitbucket. You will find the supported SCMs in the product compatibility matrix your own SCM is beyond the scope of this guide. However, you can simply use the cloud versions of GitLab, GitHub, or Bitbucket as well as the possible existing installation in your corporate","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch"}}],["659",{"pageContent":"network.\nOverview\nCloud Provider Preparations\n\nKubernetes Cluster\nNetworking\nObject Storage\nOCI Image Registry\nDatabase\nInstall Gitpod","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch"}}],["660",{"pageContent":"Self-Hosted Gitpod Releases and Versioning\n“⚠️ Self-hosted as a product is no longer supported\nThe last official update of this product is the November 2022 self-hosted release. We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our free community license. However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at Gitpod Dedicated.\nRead our blog on Gitpod Dedicated to learn why we made the decision to discontinue self-hosted.”\nRelease Policy\nGitpod Self-Hosted is released once a month, usually at the end of each month. The versioning schema is: YYYY.MM.V. Each new version of self-hosted Gitpod includes all of the changes made to Gitpod up to the release date. This means that the self-hosted version of Gitpod is at most one month behind the SaaS version. Outside of the regular monthly releases, hot-fix releases are possible to add functionality or fix bugs. Hot fix releases increment the V in the aforementioned versioning schema.\nSupport Policy\nGitpod is committed to supporting the last 2 versions of self-hosted Gitpod with patches and security updates.\nRoll","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/releases/index"}}],["661",{"pageContent":"out Policy\nNew versions are first rolled out to all users that are on the community license, i.e. are on the stable branch. Customers with a paid license receive the newest version one week later.\nTesting Policy\nFor each release, we validate that core Gitpod workflows function as expected via a series of automated and manual tests. These tests are performed on different Gitpod installations running on our reference architectures. This should help ensure that Gitpod works for you, assuming your architecture is close to the reference architecture.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/releases/index"}}],["662",{"pageContent":"The heart of this reference architecture is a Kubernetes cluster where all Gitpod components are deployed to. This cluster consists of three node pools:\nServices Node Pool: The Gitpod “app” with all its services is deployed to these nodes. These services provide the users with the dashboard and manage the provisioning of workspaces.\nRegular Workspaces Node Pool: Gitpod deploys the actual workspaces (where the actual developer work is happening) to these nodes.\nHeadless Workspace Node Pool: Gitpod deploys the imagebuild and prebuild workspaces (where build work generally demands more CPU and disk) to these needs.\nGitpod services, headless, and regular workspaces have vastly differing resource and isolation requirements. These workloads are separated onto different node pools to provide a better quality of service and security guarantees.\nYou need to assign the following labels to the node pools to enforce that the Gitpod components are scheduled to the proper node pools:\n\nNode PoolLabels\n\n\nServices Node Poolgitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true\n\nRegular Workspace Node","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["663",{"pageContent":"Poolgitpod.io/workload_workspace_regular=true\n\nHeadless Workspace Node Poolgitpod.io/workload_workspace_headless=true\n\nThe following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\nGCPAWSAzure\n\n\nServices Node Pooln2d-standard-4m6i.xlargeStandard_D4_v4\n\nRegular Workspace Node Pooln2d-standard-16m6i.4xlargeStandard_D16_v4\n\nHeadless Workspace Node Pooln2d-standard-16m6i.4xlargeStandard_D16_v4\n\nFirst, we create a service account for the cluster. The service account needs to have the following roles:\n\nRoles\n\n\nroles/storage.admin\n\nroles/logging.logWriter\n\nroles/monitoring.metricWriter\n\nroles/container.admin\n\nRun the following commands to create the service account:\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["664",{"pageContent":"serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"After that, we create a Kubernetes cluster.\n\n\n\n\nImage TypeUBUNTU_CONTAINERD\n\nMachine Typee2-standard-2\n\nCluster VersionChoose latest from regular channel\n\nEnableAutoscaling,Autorepair,IP Alias,Network Policy\n\nDisableAutoupgrademetadata=disable-legacy-endpoints=true\n\nCreate Subnetworkgitpod-${CLUSTER_NAME}\n\nMax Pods per Node10\n\nDefault Max Pods per Node110\n\nMin Nodes0\n\nMax Nodes1\n\nAddonsHorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy\n\nRegionChoose your region and zones\n\nCLUSTER_NAME=gitpod\nREGION=us-central1\nGKE_VERSION=1.22.12-gke.1200\n\ngcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" --disk-size=\"50GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"e2-standard-2\" \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["665",{"pageContent":"--cluster-version=\"${GKE_VERSION}\" \\\n    --region=\"${REGION}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --max-pods-per-node=110 \\\n    --default-max-pods-per-node=110 \\\n    --min-nodes=0 \\\n    --max-nodes=1 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicyUnfortunately, you cannot create a cluster without the default node pool. Since we need a custom node pool, you need to remove the default one.\ngcloud --quiet container node-pools delete default-pool \\\n    --cluster=\"${CLUSTER_NAME}\" --region=\"${REGION}\"Now, we are creating a node pool for the Gitpod services.\n\n\n\n\nImage TypeUBUNTU_CONTAINERD\n\nMachine Typen2d-standard-4\n\nEnableAutoscalingAutorepairIP AliasNetwork Policy\n\nDisableAutoupgrademetadata=disable-legacy-endpoints=true\n\nCreate Subnetworkgitpod-${CLUSTER_NAME}\n\nNumber of nodes1\n\nMin Nodes1\n\nMax Nodes50\n\nMax Pods per","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["666",{"pageContent":"Node110\n\nScopesgke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\n\nRegionChoose your region and zones\n\nNode Labelsgitpod.io/workload_meta=true,gitpod.io/workload_ide=true\n\ngcloud container node-pools \\\n    create \"workload-services\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-4\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=4 \\\n    --region=\"${REGION}\"We are also creating a node pool for the Gitpod regular workspaces.\n\n\n\n\nImage TypeUBUNTU_CONTAINERD\n\nMachine Typen2d-standard-16\n\nEnableAutoscaling,Autorepair,IP Alias,Network Policy\n\nDisableAutoupgrademetadata=disable-legacy-endpoints=true\n\nCreate","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["667",{"pageContent":"Subnetworkgitpod-${CLUSTER_NAME}\n\nNumber of nodes1\n\nMin Nodes1\n\nMax Nodes50\n\nMax Pods per Node110\n\nScopesgke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\n\nRegionChoose your region and zones\n\nNode Labelsgitpod.io/workload_workspace_regular=true\n\ngcloud container node-pools \\\n    create \"workload-regular-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_regular=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"We are also creating a node pool for the Gitpod headless workspaces.\n\n\n\n\nImage TypeUBUNTU_CONTAINERD\n\nMachine Typen2d-standard-16\n\nEnableAutoscaling,Autorepair,IP Alias,Network","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["668",{"pageContent":"Policy\n\nDisableAutoupgrademetadata=disable-legacy-endpoints=true\n\nCreate Subnetworkgitpod-${CLUSTER_NAME}\n\nNumber of nodes1\n\nMin Nodes1\n\nMax Nodes50\n\nMax Pods per Node110\n\nScopesgke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\n\nRegionChoose your region and zones\n\nNode Labelsgitpod.io/workload_workspace_headless=true\n\ngcloud container node-pools \\\n    create \"workload-headless-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_headless=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"Now, you can connect kubectl to your newly created cluster.\ngcloud container clusters get-credentials --region=\"${REGION}\" \"${CLUSTER_NAME}\"After that, you need to create","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["669",{"pageContent":"cluster role bindings to allow the current user to create new RBAC rules.\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"“Note: By default, when Gitpod is being installed using the instructions here, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow the Setting up your EKS cluster with dual ALB + NLB load balancers guide alongside this reference architecture guide.”\nFor eksctl, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\nThe example eksctl config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.\ncert-manager provided for the required cert-manager tooling. If using DNS-01 challenges for Let&#39;s Encrypt","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["670",{"pageContent":"with a Route53 zone, then enable the cert-manager wellKnownPolicies or ensure one exists with permissions to modify records in the zone\naws-load-balancer-controller enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\ncluster-autoscaler connects to the AWS autoscaler\nebs-csi-controller-sa enables provisioning of the EBS volumes for PVC storage\nProvided below is a complete eksctl configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a gitpod-cluster.yaml file refer to this reference.\neksctl will be configuring the VPC and networking along with creating the EKS cluster itself, if you need to use pre-existing networking provisioned by another team or department, refer to the custom VPC documentation.\nIn this reference example, the Ubuntu2004 AMI family is used instead of listing a specific AMI ID. This simplifies portability and allows for the use of the built-in bootstrap command instead of having to create a custom one. If you want to do more customization of your bootstrap command or use a static AMI, first, replace amiFamily: Ubuntu2004 with ami: ami-customid","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["671",{"pageContent":"where ami-customid is from Ubuntu&#39;s EKS AMI list or the output from the below command. You will then replace preBootstrapCommands with your bootstrap script under a new section labeled overrideBootstrapCommand.\naws ec2 describe-images --owners 099720109477 \\\n    --filters 'Name=name,Values=ubuntu-eks/k8s_1.22/images/*' \\\n    --query 'sort_by(Images,&CreationDate)[-1].ImageId' \\\n    --executable-users all \\\n    --output text --region us-west-2Refer to eksctl&#39;s documentation on AMI Family for more information on its behavior.\ngitpod-cluster.yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: gitpod\n  region: eu-west-1\n  version: \"1.22\"\n  # update tags to ensure all generated resources have atleast these tags applied\n  tags:\n    department: demo\n    project: gitpod\n\niam:\n  withOIDC: true\n\n  serviceAccounts:\n    - metadata:\n        name: aws-load-balancer-controller\n        namespace: kube-system\n      wellKnownPolicies:\n        awsLoadBalancerController: true\n    - metadata:\n        name: ebs-csi-controller-sa\n        namespace: kube-system\n      wellKnownPolicies:\n        ebsCSIController: true\n    - metadata:\n        name: cluster-autoscaler\n        namespace: kube-system","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["672",{"pageContent":"wellKnownPolicies:\n        autoScaler: true\n    - metadata:\n        name: cert-manager\n        namespace: cert-manager\n      wellKnownPolicies:\n        certManager: true\n    - metadata:\n        name: external-dns\n        namespace: external-dns\n      wellKnownPolicies:\n        externalDNS: true\n\n# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n  autoAllocateIPv6: false\n  nat:\n    # For production environments use HighlyAvailable, for an initial deployment Single adequate\n    # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n    # https://eksctl.io/usage/vpc-networking/#nat-gateway\n    gateway: Single\n\n  # Cluster endpoints and public access\n  # Private access ensures that nodes can communicate internally in case of NAT failure\n  # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n  clusterEndpoints:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["673",{"pageContent":"privateAccess: true\n    publicAccess: true\n  publicAccessCIDRs: [\"0.0.0.0/0\"]\n\n# Logging settings\ncloudWatch:\n  clusterLogging:\n    enableTypes: [\"*\"]\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n  - name: services\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 4\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 300\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true\n\n    iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update this tag to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["674",{"pageContent":"`k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_meta: \"true\"\n      gitpod.io/workload_ide: \"true\"\n      gitpod.io/workload_workspace_services: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n\n  - name: regular-workspaces\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true\n\n    iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        -","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["675",{"pageContent":"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update the tag below to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_workspace_regular: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n  - name: headless-workspaces\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true\n\n    iam:\n      attachPolicyARNs:\n        -","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["676",{"pageContent":"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update the tag below to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_workspace_headless: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.shTo ensure there are enough IPs and networking policy enforcement is in place, this reference architecture uses Calico for networking. To enable Calico in an EKS","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["677",{"pageContent":"installation it must be done after the control plane has been provisioned and before the nodegroups have been created.\nFirst: Run eksctl with the --without-nodegroup flag to provision just the control plane defined in the gitpod-cluster.yaml:\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yamlThis should result in the following output:\n2022-06-24 09:54:59 [ℹ]  eksctl version 0.102.0-dev+3229f126.2022-06-17T12:44:20Z\n2022-06-24 09:54:59 [ℹ]  using region eu-west-1\n2022-06-24 09:54:59 [ℹ]  setting availability zones to [eu-west-1c eu-west-1a eu-west-1b]\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1c - public:192.168.0.0/19 private:192.168.96.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1b - public:192.168.64.0/19 private:192.168.160.0/19\n2022-06-24 09:54:59 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-06-24 10:11:30 [✔]  EKS cluster \"gitpod\" in \"eu-west-1\" region is readyAfter this command finishes, check that eksctl also created the kubeconfig properly by running the command kubectl get pods -n kube-system. If","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["678",{"pageContent":"deployed correctly one should see the list of pods in a pending state.\nkubectl get pods -n kube-systemThis should result in:\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-69lvv   0/1     Pending   0          26m\ncoredns-5947f47f5f-srm5t   0/1     Pending   0          26mCalico Installation\nThis is following the instructions provided by Tigera.\nTo install Calico, first remove the default AWS-provided networking component:\nkubectl delete daemonset -n kube-system aws-nodeInstall the Calico manifest:\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yamlNow configure Calico for EKS-specific support with the following command:\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=DisableAdditional Network configuration\nTo use RDS in the VPC you will need security groups created and associated with the Services nodegroup before it is launched. RDS does not have to be deployed yet but an additional security group for the Services nodegroup needs to be created and added to your gitpod-cluster.yaml before continuing.\nGet the ID of the cluster eksctl just created. If you kept the tag project=gitpod in the gitpod-cluster.yaml file, retrieve the","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["679",{"pageContent":"id and cidr block with:\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'This should result in:\n[\n    [\n        \"<VPC ID similar to: vpc-09a109f23dad0a298>\",\n        \"192.168.0.0/16\"\n    ]\n]Create the new security group (we do not need to have rules added to it yet) using the vpc-id from above, note how tags are auto-populated to the security group as well:\naws ec2 create-security-group --description 'Gitpod Services Nodegroup' --group-name 'gitpod-services' \\\n--vpc-id <!add VPC ID from above here!> --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-services-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'This should return something similar to:\n{\n    \"GroupId\": \"<GroupID, similar to: sg-04b9a5f403307efe5>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}Update your gitpod-cluster.yaml to add the GroupId from the previous command to the securityGroups.attachIDs list in the services managedNodeGroups:\nsecurityGroups:\n  attachIDs: [\"<Add your GroupId here, similar to: sg-04b9a5f403307efe5\"]Store the GroupID","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["680",{"pageContent":"for easier reuse when creating the RDS instance later in this guide:\nexport SERVICES_SECURITYGROUP_ID=\"<add GroupID from above here, similar to: sg-04b9a5f403307efe5>\"If you destroy this cluster and recreate it, you will need to redo the above step as the old security group would have been deleted along with the VPC.\nSSH Access to nodegroups\neksctl allows for ssh keys to be added to your nodegroups for troubleshooting. By default, the gitpod-cluster.yaml does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity through multiple methods to each instance in your nodegroup.\nCreate nodegroups\nTo ensure that if there are problems deploying the services nodegroup (you provided an incorrect security group ID for example) it can be deleted easily and not require having to delete a partially deployed workspaces nodegroup, create it before the workspaces nodegroup.\nCreate the services nodegroups with eksctl create nodegroup --include=services --config-file gitpod-cluster.yaml:\neksctl create nodegroup --include=services --config-file gitpod-cluster.yamlThis should result in:\n2022-06-24 13:42:01 [ℹ]  nodegroup \"services\" will use","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["681",{"pageContent":"\"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:03 [ℹ]  combined include rules: services\n2022-06-24 13:42:03 [ℹ]  1 nodegroup (services) was included (based on the include/exclude rules)\n2022-06-24 13:42:03 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:46:22 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:46:24 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:46:24 [ℹ]  all nodegroups have up-to-date cloudformation templatesCreate the workspaces nodegroups second if the services are deployed correctly.\neksctl create nodegroup --include=regular-workspaces,headless-workspaces --config-file gitpod-cluster.yaml2022-06-24 13:55:08 [ℹ]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"regular-workspaces\" will use","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["682",{"pageContent":"\"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:13 [ℹ]  1 existing nodegroup(s) (services) will be excluded\n2022-06-24 13:55:13 [ℹ]  combined include rules: regular-workspaces,headless-workspaces\n2022-06-24 13:55:13 [ℹ]  2 nodegroups (headless-workspaces, regular-workspaces) were included (based on the include/exclude rules)\n2022-06-24 13:55:13 [ℹ]  will create a CloudFormation stack for each of 2 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:59:10 [✔]  created 2 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:59:13 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:59:13 [ℹ]  all nodegroups have up-to-date cloudformation templatesYou can verify that your installation was deployed properly with the custom kubectl command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting our minimum requirements as intended.\nkubectl get nodes","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["683",{"pageContent":"-o=custom-columns=\"NAME:.metadata.name,\\\nNODEGROUP:.metadata.labels.eks\\.amazonaws\\.com/nodegroup,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"Because of how EKS launches instances, coredns may end up running on a single node, which is against best practices. Before continuing to the next steps, restart coredns to ensure it is running on two nodes.\nkubectl rollout restart deployment.apps/coredns -n kube-systemEnable cluster autoscaling\nGitpod&#39;s resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to scale EKS nodes on demand and thus minimize the cost you pay.\nCLUSTER_NAME=\"gitpod\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["684",{"pageContent":"--set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\\n    --set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscalerDeleting the cluster\nIn the future to delete this cluster any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working with existing VPCs in eksctl.\nThe order resources to delete if created:\nRDS First\nRDS security group\nServices Nodegroup\nServices security group\neksctl delete cluster\nFull removal of these installed components would look something like this (commands are grouped for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["685",{"pageContent":"brevity):\n#### delete RDS resources\naws rds delete-db-instance --db-instance-identifier gitpod-instance --skip-final-snapshot --delete-automated-backups\naws ec2 delete-security-group --group-id sg-0e538ccac25bb1387\naws rds delete-db-subnet-group --db-subnet-group-name gitpod-rds\n\n#### delete the services node group\neksctl delete nodegroup --name services --cluster gitpod --disable-eviction --parallel 4 --max-grace-period 0s --wait\n\n#### delete the security group added for rds\naws ec2 delete-security-group --group-id sg-04b9a5f403307efe5\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait\n\n#### The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force\n\n#### delete iam resources\naws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["686",{"pageContent":"gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'This section will create a Kubernetes cluster based on the latest supported version of AKS, create node pools for Gitpod services, regular workspaces, and headless workspaces, and will fetch cluster credentials.\nFirst, determine the latest version of AKS suitable for Gitpod.\n“Gitpod supports Kubernetes 1.21 or later, but using the latest supported version of AKS is recommended.”\nAKS_VERSION=$(az aks get-versions \\\n    --location $LOCATION \\\n    --query \"orchestrators[?contains(orchestratorVersion, '1.24.')].orchestratorVersion | [-1]\" -o tsv)Create the AKS cluster and a default node pool. Gitpod services and other supporting components will run on this node pool.\naz aks create \\\n    --name \"${CLUSTER_NAME}\" \\\n    --nodepool-name \"services\" \\\n    --location","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["687",{"pageContent":"\"${LOCATION}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --network-plugin kubenet \\\n    --network-policy calico \\\n    --enable-cluster-autoscaler \\\n    --enable-managed-identity \\\n    --min-count \"1\" \\\n    --max-count \"4\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"100\" \\\n    --node-vm-size \"Standard_D4_v4\" \\\n    --nodepool-labels \\\n        gitpod.io/workload_meta=true \\\n        gitpod.io/workload_ide=true \\\n        gitpod.io/workload_workspace_services=true \\\n    --no-ssh-key \\\n    --vm-set-type \"VirtualMachineScaleSets\"Create a node pool for regular workspaces.\naz aks nodepool add \\\n    --name \"regularws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_regular=true \\\n    --enable-cluster-autoscaler \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"Create a node pool for headless workspaces.\naz aks nodepool add \\\n    --name \"headlessws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["688",{"pageContent":"\"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_headless=true \\\n    --enable-cluster-autoscaler \\\n    --node-count \"1\" \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"After the cluster and node pools have been created, fetch the AKS credentials. These credentials will be used to install external-dns, cert-manager, and install Gitpod itself.\naz aks get-credentials \\\n    --name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --overwrite-existing","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster"}}],["689",{"pageContent":"Gitpod uses a relational database management system to store structural data. Gitpod supports MySQL. The database is a central component in Gitpod where all metadata about users and workspaces as well as settings of the Gitpod instance (such as auth providers) are stored. That makes the database a critical component. In case of a database outage, you will not be able to log in, use the Gitpod dashboard, or start workspaces.\nIn this reference architecture, we use managed MYSQL databases provided by cloud providers.\n“Gitpod requires your database instance to have a database named gitpod in it.”\nAs a relational database, we create a Google Cloud SQL instance with MySQL 5.7. Use the following commands to create the database instance:\nMYSQL_INSTANCE_NAME=gitpod-mysql\ngcloud sql instances create \"${MYSQL_INSTANCE_NAME}\" \\\n    --database-version=MYSQL_5_7 \\\n    --storage-size=20 \\\n    --storage-auto-increase \\\n    --tier=db-n1-standard-2 \\\n    --region=\"${REGION}\" \\\n    --replica-type=FAILOVER \\\n    --enable-bin-log\n\ngcloud sql instances patch \"${MYSQL_INSTANCE_NAME}\" --database-flags \\\n            explicit_defaults_for_timestamp=offAfter that, we create the database named gitpod as well as a","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["690",{"pageContent":"dedicated Gitpod database user with a random password.\ngcloud sql databases create gitpod --instance=\"${MYSQL_INSTANCE_NAME}\"\n\nMYSQL_GITPOD_USERNAME=gitpod\nMYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\ngcloud sql users create \"${MYSQL_GITPOD_USERNAME}\" \\\n    --instance=\"${MYSQL_INSTANCE_NAME}\" \\\n    --password=\"${MYSQL_GITPOD_PASSWORD}\"Finally, you need to create a service account that has the roles/cloudsql.client role:\nMYSQL_SA=gitpod-mysql\nMYSQL_SA_EMAIL=\"${MYSQL_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${MYSQL_SA}\" --display-name \"${MYSQL_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${MYSQL_SA_EMAIL}\" --role=\"roles/cloudsql.client\"Save the service account key to the file ./mysql-credentials.json:\ngcloud iam service-accounts keys create --iam-account \"${MYSQL_SA_EMAIL}\" \\\n    ./mysql-credentials.jsonWe will create an RDS MySQL db.m5g.large instance running MySQL 5.7. Before deploying an RDS instance, additional configuration has to be done to the VPC created by the eksctl command:\nCreate an RDS security group\nFirst, find","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["691",{"pageContent":"the subnet IDs for the public subnets in your environment. For deploying RDS in private subnets replace true with false in the below command:\naws ec2 describe-subnets \\\n    --filters \"Name=tag:project,Values=gitpod\" \\\n    --query 'Subnets[?MapPublicIpOnLaunch==`true`] | [*].[SubnetId, AvailabilityZone, CidrBlock, MapPublicIpOnLaunch]'This should give you an output similar to the following:\n[\n    [\n        \"<SubnetID, similar to: subnet-0686443f3f2782453>\",\n        \"eu-west-1a\",\n        \"192.168.64.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-010ea25d0e398f6df>\",\n        \"eu-west-1c\",\n        \"192.168.0.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-0f0370a5697d85df2>\",\n        \"eu-west-1b\",\n        \"192.168.32.0/19\",\n        true\n    ]\n]Using the three subnet IDs, create an RDS subnet group, with the name gitpod-rds:\naws rds create-db-subnet-group \\\n    --db-subnet-group-name gitpod-rds \\\n    --db-subnet-group-description \"Subnet for the Gitpod RDS deployment in VPC\" \\\n    --subnet-ids '[ \"<SubnetID 1 from above, similar to: subnet-0686443f3f2782453>\", \"SubnetID 2 from above, similar to: subnet-010ea25d0e398f6df>\", \"SubnetID 3 from above, similar to: subnet-0f0370a5697d85df2>\" ]' \\\n    --tags","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["692",{"pageContent":"Key=project,Value=gitpodNow you will need to create a security group for the RDS instance, running a similar command as before. Note you can get your vpc-id via:\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'Create the security group for the RDS instance:\naws ec2 create-security-group --description 'Gitpod RDS' --group-name 'gitpod-rds' \\\n    --vpc-id <your VPC ID, similar to: vpc-09a109f23dad0a298> \\\n    --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-rds-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'This should return an output that is similar to:\n{\n    \"GroupId\": \"<GroupID similar to: sg-0e538ccac25bb1387>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}You can now update the ingress policy for the RDS group to allow for incoming connections from the Services nodegroup on port 3306, the MySQL port. This uses the services security group ID stored in an environment variable in the cluster section above:\naws ec2 authorize-security-group-ingress \\\n    --group-id <RDS securitygroup ID from above> \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["693",{"pageContent":"--protocol tcp --port 3306 \\\n    --source-group ${SERVICES_SECURITYGROUP_ID}\\\n    --tag-specifications 'ResourceType=security-group-rule,Tags=[{Key=Name,Value=rds-access},{Key=project,Value=gitpod},{Key=department,Value=demo}]'Now you can create a password to use for MySQL. This will be required for the creation of the RDS instance and later for use by the Gitpod installer:\nexport MYSQL_GITPOD_PW=$(openssl rand -hex 18)\necho $MYSQL_GITPOD_PWNow you can create the Multi-AZ RDS instance using the MySQL password, the security group, and RDS subnet you created in the previous steps:\naws rds create-db-instance \\\n    --db-name gitpod \\\n    --db-instance-identifier gitpod-instance \\\n    --db-instance-class db.m5.large \\\n    --db-subnet-group-name gitpod-rds \\\n    --vpc-security-group-ids sg-0e538ccac25bb1387 \\\n    --multi-az \\\n    --engine mysql \\\n    --allocated-storage 20 \\\n    --max-allocated-storage 120 \\\n    --master-username gitpod \\\n    --master-user-password $MYSQL_GITPOD_PW \\\n    --engine-version 5.7 \\\n    --tags Key=project,Value=gitpod Key=Name,Value=Gitpod-MySQLDB,Key=department,Value=demoThis should return an output similar to the following:\n{\n    \"DBInstance\":","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["694",{"pageContent":"{\n        \"DBInstanceIdentifier\": \"gitpod-instance\",\n        \"DBInstanceClass\": \"db.m5.large\",\n        \"Engine\": \"mysql\",\n        \"DBInstanceStatus\": \"creating\",\n        \"MasterUsername\": \"gitpod\",\n        \"DBName\": \"gitpod\",\n        \"AllocatedStorage\": 20,\n        \"PreferredBackupWindow\": \"22:11-22:41\",\n        \"BackupRetentionPeriod\": 1,\n        \"DBSecurityGroups\": [],\n        \"VpcSecurityGroups\": [\n[...]To check whether instance creation has compeleted, and to retrieve the URL to use, run this command:\naws rds describe-db-instances \\\n    --db-instance-identifier gitpod-instance \\\n    --query 'DBInstances[0].[DBInstanceStatus,Endpoint.Address]'Returning:\n[\n    \"modifying\",\n    \"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"\n]Store the MySQL instance endpoint for later use in the Gitpod installer:\nexport MYSQL_RDS_ENDPOINT=\"$(aws rds describe-db-instances --db-instance-identifier gitpod-instance --query 'DBInstances[0].Endpoint.Address' --output text)\"This section will create an Azure MySQL server instance and database for Gitpod. This external database is required to run a Gitpod cluster for production purposes. Using a dedicated MySQL instance for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["695",{"pageContent":"Gitpod is recommended but a pre-existing MySQL instance may be used if it can host databases named gitpod and gitpod-sessions.\nFirst, set a MySQL server name. Azure MySQL server names must be universally unique; we recommend using a random value to avoid conflicts. Note this value for later use.\nexport MYSQL_INSTANCE_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$MYSQL_INSTANCE_NAME\"Set the gitpod MySQL username and password. The username of gitpod is recommended but is not required.\nexport MYSQL_GITPOD_USERNAME=\"gitpod\"\nexport MYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\necho \"$MYSQL_GITPOD_PASSWORD\"With the generated instance name and password, create the Azure MySQL server.\n az mysql server create \\\n    --name \"${MYSQL_INSTANCE_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --location \"${LOCATION}\" \\\n    --admin-user \"${MYSQL_USERNAME}\" \\\n    --admin-password \"${MYSQL_GITPOD_PASSWORD}\" \\\n    --auto-grow Enabled \\\n    --public Enabled \\\n    --sku-name GP_Gen5_2 \\\n    --ssl-enforcement Disabled \\\n    --storage-size 20480 \\\n    --version \"5.7\"After creating the MySQL server create a database called gitpod. When Gitpod is installed it will create an additional database","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["696",{"pageContent":"called gitpod-sessions.\naz mysql db create \\\n  --name gitpod \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --server-name \"${MYSQL_INSTANCE_NAME}\"Create a MySQL firewall rule allowing access from your AKS cluster to the MySQL database.\n“💡 MySQL firewall rules with a start IP address of 0.0.0.0 and an end IP address of 0.0.0.0 restrict access to Azure resources. This is necessary to allow your Kubernetes cluster to connect to the database.\nSee the Azure MySQL firewall API documentation for more information.”\naz mysql server firewall-rule create \\\n --name \"Azure_Resources\" \\\n --server-name \"${MYSQL_INSTANCE_NAME}\" \\\n --resource-group \"${RESOURCE_GROUP}\" \\\n --start-ip-address \"0.0.0.0\" \\\n --end-ip-address \"0.0.0.0\"","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database"}}],["697",{"pageContent":"Congratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions in the installation guide.\nIf you followed the steps to create your infrastructure on GCP of this guide, you need to use the following config settings for your Gitpod installation:\n\nGeneral settings\n\n\nDomain namevalue of $DOMAIN_NAME\n\nUn-select the in-cluster container registry checkbox.\n\nContainer registry\n\n\nIn-clusterno\n\nContainer registry URLgcr.io/${PROJECT_NAME}/gitpod(replace ${PROJECT_NAME} with your GCP project name)\n\nContainer registry servergcr.io\n\nContainer registry username_json_key\n\nContainer registry passwordContent of file ./gs-credentials.jsonRemove linebreaks, e.g. with jq -c . ./gs-credentials.json\n\nUn-select the in-cluster MySQL checkbox.\n\nDatabase\n\n\nIn-clusterno\n\nGoogle Cloud SQL Proxyyes\n\nCloudSQL connection name${PROJECT_NAME}:${REGION}:${MYSQL_INSTANCE_NAME}Replace variables with actual values!\n\nUsernamevalue of ${MYSQL_GITPOD_USERNAME}\n\nPasswordvalue of ${MYSQL_GITPOD_PASSWORD}\n\nGCP service account keyUpload file ./mysql-credentials.json\n\nSelect GCP as object storage","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install"}}],["698",{"pageContent":"provider.\n\nObject storage\n\n\nStorage providerGCP\n\nStorage regionvalue of ${REGION}\n\nProject IDvalue of ${PROJECT_NAME}\n\nService account keyUpload file ./gs-credentials.json\n\nKeep cert-manager selected for the TLS certificates options.\n\nTLS certificates\n\n\nSelf-signed TLS certificateno\n\ncert-manageryes\n\nIssuer namegitpod-issuer\n\nIssuer typeSelect “cluster issuer”\n\nIf you followed the steps to create your infrastructure on the AWS portion of this guide, you need to use the following config settings for your Gitpod installation:\n\nGeneral Settings\n\n\nDomain namevalue of $DOMAIN_NAME\n\nSelect the in-cluster registry checkbox, and select the S3 storage provider.\n\nContainer registry\n\n\nStorage regionThe S3 bucket region (such as eu-west-1)\n\nStorage endpoints3.${S3_BUCKET_REGION}.amazonaws.com(Replace ${S3_BUCKET_REGION} with the s3 bucket region)\n\nS3 bucket namevalue of ${S3_BUCKET_NAME}\n\nS3 access keyvalue of AccessKeyId\n\nS3 secret keyvalue of SecretAccessKey\n\nUnselect the Use MySQL in-cluster checkbox and also make sure that the Use Google Cloud SQL Proxy checkbox is not selected.\n\nDatabase\n\n\nHostnamevalue of","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install"}}],["699",{"pageContent":"${MYSQL_RDS_ENDPOINT}\n\nUsernamegitpod\n\nPasswordvalue of ${MYSQL_GITPOD_PW}\n\nSelect S3 as the object storage provider.\n\nObject storage\n\n\nStorage regionThe S3 bucket region (such as eu-west-1)\n\nStorage endpoints3.${S3_BUCKET_REGION}.amazonaws.com(Replace ${S3_BUCKET_REGION} with the s3 bucket region)\n\nS3 bucket namevalue of ${S3_BUCKET_NAME}\n\nS3 access keyvalue of AccessKeyId\n\nS3 secret keyvalue of SecretAccessKey\n\nKeep cert-manager selected for the TLS certificates options.\n\nTLS certificates\n\n\nSelf-signed TLS certificateno\n\ncert-manageryes\n\nIssuer namegitpod-issuer\n\nIssuer typeSelect “cluster issuer”\n\nIf you followed the steps to create your infrastructure on the Azure portion of this guide, use the following config settings for your Gitpod installation:\n\nGeneral Settings\n\n\nDomain namevalue of $DOMAIN_NAME\n\nUn-select the in-cluster container registry checkbox.\n\nContainer registry\n\n\nIn-clusterno\n\nContainer registry URLValue of ${AZURE_REGISTRY_URL}\n\nContainer registry serverLeave empty\n\nContainer registry usernameValue of ${AZURE_REGISTRY_USERNAME}\n\nContainer registry passwordValue of","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install"}}],["700",{"pageContent":"${AZURE_REGISTRY_PASSWORD}\n\nUn-select the in-cluster MySQL checkbox.\n\nDatabase\n\n\nIn-clusterno\n\nGoogle Cloud SQL Proxyunchecked\n\nHost${MYSQL_INSTANCE_NAME}.mysql.database.azure.com (Replace ${MYSQL_INSTANCE_NAME} with the Azure database name)\n\nUsernameValue of ${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}\n\nPasswordvalue of ${MYSQL_GITPOD_PASSWORD}\n\nPasswordUse default value (3306)\n\nSelect Azure as the object storage provider.\n\nObject storage\n\n\nStorage regionvalue of ${LOCATION}\n\nAccount namevalue of ${STORAGE_ACCOUNT_NAME}\n\nAccess keyvalue of ${STORAGE_ACCOUNT_KEY}\n\nKeep cert-manager selected for the TLS certificates options.\n\nTLS certificates\n\n\nSelf-signed TLS certificateno\n\ncert-manageryes\n\nIssuer namegitpod-issuer\n\nIssuer typeSelect “cluster issuer”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install"}}],["701",{"pageContent":"For each Gitpod installation, you need a domain. In this guide, we use gitpod.example.com as a placeholder for your domain. Gitpod also uses different subdomains for some components as well as dynamically for the running workspaces. That&#39;s why you need to configure your DNS server and your TLS certificates for your Gitpod domain with the following wildcards:\ngitpod.example.com\n*.gitpod.example.com\n*.ws.gitpod.example.comCluster ports\nThe entry point for all traffic is the proxy component which has a service of type LoadBalancer that allows inbound traffic on ports 80 (HTTP) and 443 (HTTPS) as well as port 22 (SSH access to the workspaces).\nSSH access is required to work with desktop IDEs, such as VS Code Desktop and JetBrains via JetBrains Gateway. To enable SSH, your load balancer needs to be capable of working with L4 protocols.\nIn this guide, we use load balancing through a standalone network endpoint group (NEG). For this, the Gitpod proxy service will get the following annotation by default:\ncloud.google.com/neg: '{\"exposed_ports\": {\"80\":{},\"443\": {}}}'For Gitpod, we support Calico as CNI only. You need to make sure that you DO NOT use GKE Dataplan V2. That means, do not add","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["702",{"pageContent":"the --enable-dataplane-v2 flag during the cluster creation.\nIt is suggested to create a dedicated VPC (and EKS instance) for Gitpod. eksctl can do this for you, but if VPCs have to be configured separately, follow eksctl’s suggestions.\n“Note: You can also customize eksctl’s vpc creation to suit your existing configurations.”\nThe VPC needs public and private subnets. All managed node groups and Gitpod services should run in the private subnet. Inbound access to the services should be through ALB/ELB services auto-provisioned by AWS based on the configuration used (standard LoadBalancer roles or creation of an Ingress). If running a jump host or VPN endpoint, it should be deployed in the public subnet.\n“By default, when Gitpod is being installed, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow the Setting up your EKS cluster with dual ALB + NLB load balancers guide alongside this reference architecture guide.”\nIf installing Calico, follow their installation steps and ensure you modify the hostNetwork: True option on the cert-manager","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["703",{"pageContent":"installation options later.\nAzure automatically provisions Azure public load balancers that load balance public Gitpod services and provide public Internet connectivity for Gitpod&#39;s workloads. No additional configuration is required.\nExternal DNS\nYou also need to configure your DNS server. If you have your own DNS server for your domain, make sure the domain with all wildcards points to your load balancer.\nCreating a dedicated DNS zone is recommended when using cert-manager or external-dns but is not required. A pre-existing DNS zone may be used as long as the cert-manager and/or external-dns services are authorized to manage DNS records within that zone. If you are providing your own TLS certificates and will manually create A records pointing to Gitpod&#39;s public load balancer IP addresses then creating a zone is unnecessary.\nIn this reference architecture, we use Google Cloud DNS for domain name resolution. To automatically configure Cloud DNS, we use External DNS for Kubernetes.\nFirst, we need a service account with role roles/dns.admin. This service account is needed by cert-manager to alter the DNS settings for the DNS-01","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["704",{"pageContent":"resolution.\nDNS_SA=gitpod-dns01-solver\nDNS_SA_EMAIL=\"${DNS_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${DNS_SA}\" --display-name \"${DNS_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${DNS_SA_EMAIL}\" --role=\"roles/dns.admin\"Save the service account key to the file ./dns-credentials.json:\ngcloud iam service-accounts keys create --iam-account \"${DNS_SA_EMAIL}\" \\\n    ./dns-credentials.jsonAfter that, we create a managed zone.\nDOMAIN=gitpod.example.com\ngcloud dns managed-zones create \"${CLUSTER_NAME}\" \\\n    --dns-name \"${DOMAIN}.\" \\\n    --description \"Automatically managed zone by kubernetes.io/external-dns\"Now we are ready to install External DNS. Please refer to the External DNS GKE docs.\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=google \\\n    --set google.project=\"${PROJECT_NAME}\" \\\n    --set logFormat=json \\\n    --set","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["705",{"pageContent":"google.serviceAccountSecretKey=dns-credentials.json \\\n    --wait \\\n    external-dns \\\n    bitnami/external-dnsDepending on what your DNS setup for your domain looks like, you most probably want to configure the nameservers for your domain. Run the following command to get a list of nameservers used by your Cloud DNS setup:\ngcloud dns managed-zones describe ${CLUSTER_NAME} --format json | jq '.nameServers'If a Route53 zone has not yet been created, you can do so with the following command (replace gitpod.example.com. with the intended zone):\nDOMAIN_NAME=\"gitpod.example.com\"\nexport ROUTE53_CALLER=$(cat /proc/sys/kernel/random/uuid)\naws route53 create-hosted-zone \\\n    --name \"${DOMAIN_NAME}.\" \\\n    --caller-reference $ROUTE53_CALLER \\\n    --hosted-zone-config Comment=\"gitpod-zone\"Once the domain has been provisioned, you can get the details with the following command and record the Id for later usage:\naws route53 list-hosted-zones --query \"HostedZones[?Name==\\`$DOMAIN_NAME.\\`]\"Which should return something like:\n[\n    {\n        \"Id\": \"/hostedzone/Z1230498123094\",\n        \"Name\": \"gitpod.example.com.\",\n        \"CallerReference\": \"c43f5dfd-87d9-45fc-bb1f-33bf35d8244b\",","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["706",{"pageContent":"\"Config\": {\n            \"Comment\": \"\",\n            \"PrivateZone\": false\n        },\n        \"ResourceRecordSetCount\": 10\n    }\n]Store this hosted zone in a variable for later use by external-dns and cert-manager:\nHOSTED_ZONE_ID=\"$(aws route53 list-hosted-zones-by-name \\\n    --dns-name \"$DOMAIN_NAME.\" \\\n    --query \"HostedZones[0].Id\" \\\n    --output json \\\n    --out text)\"Then install external-dns so that DNS records will be automatically created for Gitpod services. This can be ignored if you are managing DNS records yourself.\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --wait \\\n    --set provider=aws \\\n    --set aws.zoneType=public \\\n    --set txtOwnerId=\"$HOSTED_ZONE_ID\" \\\n    --set \"domainFilters[0]=$DOMAIN_NAME\" \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=external-dns \\\n    --set podSecurityContext.fsGroup=65534 \\\n    external-dns \\\n    bitnami/external-dnsWith Route53 created, you can now proceed to install cert-manager. Cert-manager is needed for Gitpod&#39;s internal networking even if you are managing DNS yourself.\nThis","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["707",{"pageContent":"section will create an Azure managed zone, grant the AKS cluster permission to manage records in that zone, and install external-dns.\nBegin by creating a new Azure managed zone. For example, if you plan on hosting Gitpod at gitpod.svcs.example.com then create a managed zone called svcs.example.com.\nDOMAIN_NAME=\"svcs.example.com\"\naz network dns zone create --name $DOMAIN_NAME --resource-group $RESOURCE_GROUPAuthorize the AKS cluster to control DNS records in the zone:\nZONE_ID=$(az network dns zone show --name \"${DOMAIN_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"id\" -o tsv)\nKUBELET_OBJECT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\naz role assignment create \\\n    --assignee \"${KUBELET_OBJECT_ID}\" \\\n    --role \"DNS Zone Contributor\" \\\n    --scope \"${ZONE_ID}\"“This role assignment uses AKS Kubelet Identity\nto authorizes the entire AKS cluster to manage DNS records in the given zone, including cert-manager and external-dns.”\nLook up the AKS kubelet client identity; external-dns will use this identity when authenticating to the Azure","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["708",{"pageContent":"API.\nKUBELET_CLIENT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.clientId\" -o tsv)Then install the external-dns Helm chart:\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=azure \\\n    --set azure.resourceGroup=\"${RESOURCE_GROUP}\" \\\n    --set azure.subscriptionId=\"${AZURE_SUBSCRIPTION_ID}\" \\\n    --set azure.tenantId=\"${AZURE_TENANT_ID}\" \\\n    --set azure.useManagedIdentityExtension=true \\\n    --set azure.userAssignedIdentityID=\"${KUBELET_CLIENT_ID}\" \\\n    --set logFormat=json \\\n    external-dns \\\n    bitnami/external-dnscert-manager\nGitpod uses TLS secure external traffic bound for Gitpod as well as identifying, authorizing, and securing internal traffic between Gitpod&#39;s internal components. While you can provide your own TLS certificate for securing external connections to Gitpod, cert-manager is required to generate internal TLS certificates.\nRefer to the cert-manager DNS01 docs for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["709",{"pageContent":"more information.\nExample on how to install cert-manager on GCP:\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --wait \\\n    cert-manager \\\n    jetstack/cert-managerDue to the networking behavior and service accounts in EKS, cert-manager needs a different installation procedure. First, install cert-manager with the following command:\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --set webhook.hostNetwork=true \\\n    --set webhook.securePort=10260 \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=cert-manager \\\n    --wait \\","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["710",{"pageContent":"cert-manager \\\n    jetstack/cert-managerOnce the installation has completed, you will need to update the cert-manager security context setting for the service account provisioned for cert-manager by eksctl:\nkubectl patch deployment cert-manager -n cert-manager -p \\\n  '{\"spec\":{\"template\":{\"spec\":{\"securityContext\":{\"fsGroup\":1001,\"runAsNonRoot\": true}}}}}'\nInstall cert-manager with the following command:\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace='cert-manager' \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    cert-manager \\\n    jetstack/cert-managerTLS certificate\nIn this reference architecture, we use cert-manager to also create TLS certificates for the Gitpod domain. Since we need wildcard certificates for the subdomains, you must use the DNS-01 challenge.\nUsing a certificate issued by Let&#39;s Encrypt is recommended as it minimizes overhead involving TLS certificates and managing CA","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["711",{"pageContent":"certificate trust, but is not required. If you already have TLS certificates for your Gitpod installation with suitable DNS names you can skip this step and use your own certificates during the installation.\nNow, we are configuring Google Cloud DNS for the DNS-01 challenge. For this, we need to create a secret that contains the key for the DNS service account:\nCLOUD_DNS_SECRET=clouddns-dns01-solver\nkubectl create secret generic \"${CLOUD_DNS_SECRET}\" \\\n    --namespace=cert-manager \\\n    --from-file=key.json=\"./dns-credentials.json\"After that, we are telling cert-manager which service account it should use:\nkubectl annotate serviceaccount --namespace=cert-manager cert-manager \\\n    --overwrite \"iam.gke.io/gcp-service-account=${DNS_SA_EMAIL}\"The next step is to create an issuer. In this guide, we create a cluster issuer. Create a file issuer.yaml like this:\n# Replace $LETSENCRYPT_EMAIL with your email and $PROJECT_NAME with your GCP project name\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    email: $LETSENCRYPT_EMAIL\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["712",{"pageContent":"name: issuer-account-key\n    solvers:\n      - dns01:\n          cloudDNS:\n            project: $PROJECT_NAME… and run:\nkubectl apply -f issuer.yamlIf using eksctl and the cert-manager service account along with well-known policies AND you have your intended zone hosted in Route53, then follow the cert-manager configuration steps. An example cluster issuer using the hosted zone and cert-manager service account created by eksctl is below:\n# Replace $LETSENCRYPT_EMAIL with your email and $DOMAIN_NAME with your gitpod domain name (eg.`gitpod.$DOMAIN_NAME`)\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: $LETSENCRYPT_EMAIL\n    privateKeySecretRef:\n      name: letsencrypt\n    solvers:\n      - selector:\n          dnsZones:\n            - $DOMAIN_NAME\n        dns01:\n          route53:\n            region: us-east-1“⚠️ In contrast to most AWS services, Route53 does not support regional endpoints. When creating your ClusterIssuer\nbe careful to use the us-east-1 region for all regions other than the Beijing and Ningxia Regions, and cn-northwest-1\nregion for the Beijing and Ningxia regions.\nSee the AWS Route53 endpoints and quotas","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["713",{"pageContent":"documentation for more information.”\nThis section will create a cert-manager ClusterIssuer that will generate publicly trusted certificates using Let&#39;s Encrypt.\nFirst, determine your Azure subscription ID. You can typically determine your subscription ID from your Azure CLI credentials.\nAZURE_SUBSCRIPTION_ID=\"$(az account subscription list --query '[0].subscriptionId' --output tsv)\"Then create a file named issuer.yaml containing the following content, expanding the $AZURE_SUBSCRIPTION_ID, $RESOURCE_GROUP, and $DOMAIN_NAME variables:\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: issuer-account-key\n    solvers:\n      - dns01:\n          azureDNS:\n            subscriptionID: $AZURE_SUBSCRIPTION_ID\n            resourceGroupName: $RESOURCE_GROUP\n            hostedZoneName: $DOMAIN_NAMEThen apply the ClusterIssuer resource:\nkubectl apply -f issuer.yaml“This example ClusterIssuer depends on Azure Managed Identity to authorize requests from cert-manager to the AzureDNS API.\nRefer to the cert-manager AzureDNS DNS01 documentation for more","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["714",{"pageContent":"information on cert-manager API authorization.”","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking"}}],["715",{"pageContent":"Reference Architecture Overview\nThe diagram above gives an overview of the reference architecture. Starting from the user’s workstation, access is provided using a layer 4 (L4) load balancer. An internal proxy distributes this traffic within Gitpod.\nThe cluster-external components are accessed by a specific set of components as shown in the diagram. The external components are:\nMySQL database\nSource Control Management (SCM), e.g. GitLab, GitHub, GitHub Enterprise, BitBucket, or BitBucket Server\nObject Storage, e.g. Google Cloud Storage or Amazon S3\nOCI Image Registry, e.g. Google Artifact Registry.\nNote: This registry is used by Gitpod to cache images, and store images it builds on behalf of users. This is not the registry that contains the images of Gitpod’s services.\nIn addition, the diagram indicates the different node pools within the cluster. Notice that we separate any user workloads from Gitpod’s services (except for ws-daemon). In this reference architecture, we create two node pools: the services node pool (upper half in the diagram) and the workspaces node pool (lower half in the diagram).","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/overview"}}],["716",{"pageContent":"You need to prepare your workstation and your cloud provider (e.g. creating a project and preparing service accounts) to be able to replicate this reference architecture.\nIndependent of the cloud provider you are using, you need to have kubectl installed on your workstation and configured to access your cluster after creation.\nIn order to deploy Gitpod on the Google Kubernetes Engine (GKE) of the Google Cloud Platform (GCP), you need to create and configure a project for your installation. In this guide, we give you examples of how to create the needed resources by using the command line tool gcloud. To follow these examples make sure you have installed the gcloud CLI and logged in to your Google Cloud account. You can also use the GCP Console or the API instead. In that case, please refer to the linked Google docs.\nFirst, create a GCP project and enable billing (you have to enable billing to enable GKE). You can freely choose a name for your project (hereinafter referred to as environment variable PROJECT_NAME). You also need the billing account ID (referred to as BILLING_ACCOUNT). To see available lDs, run gcloud alpha billing accounts list.\nPROJECT_NAME=gitpod\ngcloud projects create","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["717",{"pageContent":"\"${PROJECT_NAME}\" --set-as-default\n\nBILLING_ACCOUNT=0X0X0X-0X0X0X-0X0X0X\ngcloud alpha billing projects link \"${PROJECT_NAME}\" \\\n    --billing-account \"${BILLING_ACCOUNT}\"You can verify that the proper project has been set as default with this command:\ngcloud config get-value projectAfter you created your project, you need to enable the following services in this project:\n\nServices\n\n\ncloudbilling.googleapis.comGoogle Billing APIBilling is required to set up a GKE cluster.\n\ncontainerregistry.googleapis.comDocker container images registryEnable this service such that Gitpod can push workspace images to that repository.\n\niam.googleapis.comIdentity and Access Management (IAM) APITo create and use service accounts for the setup.\n\ncompute.googleapis.comGoogle Compute Engine APIThe Google Compute Engine empowers to run virtual machines (VMs) for the Kubernetes cluster.\n\ncontainer.googleapis.comKubernetes Engine APIThe Kubernetes engine is where we will deploy Gitpod to.\n\ndns.googleapis.comCloud DNSCloud DNS is used in this reference architecture so set up the domain name resolution.\n\nsqladmin.googleapis.comCloud SQL Admin APICloud SQL for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["718",{"pageContent":"MySQL is used as database service in this reference architecture.\n\nRun these commands to enable the services:\ngcloud services enable cloudbilling.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable iam.googleapis.com\ngcloud services enable compute.googleapis.com\ngcloud services enable container.googleapis.com\ngcloud services enable dns.googleapis.com\ngcloud services enable sqladmin.googleapis.comNow, you are prepared to create your Kubernetes cluster.\nTo deploy Gitpod on Amazon Elastic Kubernetes Service (Amazon EKS), you must have an Amazon account that has permissions to deploy EKS and the underlying component services, which can include:\nVPCs\nSubnets\nInternet Gateways\nEC2 Instances\nAutoscaling Groups\nElastic Load Balancers\nSpecifically for Gitpod&#39;s use, you will also need permissions to create these additional components:\nRoute53 DNS Zone for the intended Gitpod domain name (for use with Let&#39;s Encrypt certificate generation)\nRDS Instance running MySQL 5.7 for Gitpod&#39;s database\nS3 Bucket: Hosting Gitpod&#39;s workspace images and object storage\nAWS IAM Service account: To","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["719",{"pageContent":"enable access to the S3 bucket\nThis guide uses the following tools:\nAWS CLI for creating none EKS specific services\nEKS CLI eksctl for creating the EKS cluster and nodegroups themselves\nAmazon has a brief run-through on how to deploy a basic cluster using the eksctl tooling if you&#39;d like to familiarize yourself before deploying the Gitpod reference architecture.\nMake sure you are logged in and are connected to the proper AWS account. Ensure AWS is configured and working with the command aws sts get-caller-identity. For later steps you will need to ensure that kubectl is properly configured to authenticate to the newly provisioned EKS environment.\nAWS Region Setting\nAll commands that follow assume you have set an environment variable of AWS_REGION to your appropriate region or have it configured in your profile already and so will not include --region or --profile when running the aws command. Refer to the AWS CLI documentation for more information.\nTo deploy Gitpod on Azure Kubernetes Service, you must have an Azure subscription and account with permission deploy AKS clusters and associated component services, including the following:\nAKS Clusters\nVirtual networks\nMySQL","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["720",{"pageContent":"Databases\nStorage accounts\nAzure Container Registries\nLoad balancers\nAzure DNS managed domains (and rights to assign roles on managed zones)\nRights to make role assignments in Azure Active Directory\nThis guide uses the Azure CLI to create resources for your Gitpod installation and requires active Azure credentials. Credentials can be fetched by one of the following options:\nSign in interactively\nSign in with a Service Principal (recommended for production installations)\nTools\nThis guide uses the following tools:\nAzure CLI\nIf kubectl is not present the Azure CLI can be used to install kubectl:\nsudo az aks install-cliLocation and Resource Group\nAzure uses resource groups to logically group related resources. This guide uses a dedicated resource group for the Gitpod AKS cluster and all component resources. Creating a new resource group for Gitpod resources is recommended but a pre-existing resource group may be used if necessary.\nSet environment variables indicating the resource group and location where Gitpod resources will be created:\nexport RESOURCE_GROUP=\"gitpod\"\nexport LOCATION=\"centralus\"Then create a new resource group:\naz group create --location $LOCATION","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["721",{"pageContent":"--name \"$RESOURCE_GROUP\"","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations"}}],["722",{"pageContent":"Kubernetes clusters pull their components from an image registry. In Gitpod, image registries are used for three different purposes:\nPulling the actual Gitpod software (components like server, image-builder, etc.).\nPulling base images for workspaces. This is either a default workspace-full image or the image that is configured in the .gitpod.yml resp. .gitpod.Dockerfile in the repo.\nPushing individual workspace images that are built for workspaces during image start. That are for example custom images that are defined in a .gitpod.Dockerfile in the repo. These images are pulled by Kubernetes after image building to provision the workspace. This is the only case where Gitpod needs write access to push images.\nWe use a different registry for each of the three items in this reference architecture. The Gitpod images (1) are pulled from a public Google Container Registry we provide. The workspace base image (2) is pulled from Docker Hub (or from the location that is set in the Dockerfile of the corresponding repo). For the individual workspace images (3), we create an image registry that is provided by the used cloud provider. You could also configure Gitpod to use the same registry for all cases.","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry"}}],["723",{"pageContent":"That is particularly useful for air-gap installations where you have access to an internal image registry only.\nBy enabling the service containerregistry.googleapis.com (see above), your project provides you with an OCI Image Registry. As credentials, we need the object storage service account key that we will create below. Therefore, there is no further action needed to use the registry in Gitpod.\nECR is currently not supported, so configuring the registry will require using an S3 bucket. You can reuse the same S3 bucket used for object storage or a separate one. The steps would be identical in creation, just use different names for both the bucket and the IAM user account.\n“Please refer to the Object Storage section for instructions on how to create an S3 bucket. You can re-use the bucket created there as your registry storage backe-end.”\nTo configure Gitpod to use the bucket created, ensure you select In-cluster Registry, and S3 storage in the installation UI. Then input the values of the bucket you&#39;ve created. When setting the endpoint, please include the region such that s3.amazonaws.com becomes s3.eu-west-1.amazonaws.com.\nThis section will create an Amazon Container Registry for","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry"}}],["724",{"pageContent":"workspace images.\nFirst, generate a name for the ACR instance. ACR instance names must be unique; using a random suffix is recommended but any unique registry name is sufficient.\nREGISTRY_NAME=\"gitpod$(openssl rand -hex 4)\"Note the value of $REGISTRY_NAME for later use.\nCreate the container registry:\naz acr create \\\n  --admin-enabled true \\\n  --location \"${LOCATION}\" \\\n  --name \"${REGISTRY_NAME}\" \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --sku PremiumThe registry server, username, and password will be needed when Gitpod is installed; note these values for later.\nAZURE_REGISTRY_URL=$(az acr show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query loginServer \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_USERNAME=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query username \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_PASSWORD=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query \"passwords[0].value\" \\\n    --resource-group \"${RESOURCE_GROUP}\")","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry"}}],["725",{"pageContent":"Gitpod uses object storage to store blob data. This includes workspace backups that are created when a workspace stops and are used to restore state upon restart. Different user settings like IDE preferences are also stored this way.\nThis reference architecture uses managed object storage commonly offered by all cloud providers.\nFor each Gitpod user, their own bucket will be created at runtime. For this reason, Gitpod needs proper rights to create buckets in the object storage. Create a service account that has the following roles:\n\nRoles\n\n\nroles/storage.admin\n\nroles/storage.objectAdmin\n\nOBJECT_STORAGE_SA=gitpod-storage\nOBJECT_STORAGE_SA_EMAIL=\"${OBJECT_STORAGE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${OBJECT_STORAGE_SA}\" --display-name \"${OBJECT_STORAGE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.objectAdmin\"Save the service account key","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}],["726",{"pageContent":"to the file ./gs-credentials.json:\ngcloud iam service-accounts keys create --iam-account \"${OBJECT_STORAGE_SA_EMAIL}\" \\\n    ./gs-credentials.jsonBelow, we create one S3 bucket and one IAM User service account to access it. These credentials and the bucket are used for both object storage and storing the workspace images via a Registry frontend deployed in Gitpod (and when Gitpod is installed). The bucket has to have a globally unique name.\nexport S3_BUCKET_NAME=\"suitably-tired-puma-registry\"\necho ${S3_BUCKET_NAME}Create the S3 Bucket and ensure it is private\nCreate an S3 bucket using the following command:\naws s3api create-bucket \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1 \\\n    --object-ownership BucketOwnerEnforced\naws s3api put-public-access-block \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"Create an IAM user for credentials with access just to this bucket\naws iam create-user \\\n  --user-name gitpod-s3-access \\\n  --tags Key=project,Value=gitpodSave","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}],["727",{"pageContent":"the following file as S3_policy.json, replacing ${S3_BUCKET_NAME} with the S3 bucket you created:\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}>\"],\n      \"Sid\": \"\"\n    },\n    {\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}/*\"],\n      \"Sid\": \"\"\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}Create the policy, taking note of the ARN in the output:\naws iam create-policy \\\n    --policy-name gitpod_s3_access_policy \\\n    --policy-document <file://S3_policy.json> \\\n    --tags Key=project,Value=gitpodThis should result in the following output:\n{\n    \"Policy\": {\n        \"PolicyName\": \"gitpod_s3_access_policy\",\n        \"PolicyId\": \"ANPA2B3JAS5KQGN6MQRMW\",\n        \"Arn\": \"arn:aws:iam::691173103445:policy/gitpod_s3_access_policy\",\n        \"Path\": \"/\",\n        \"DefaultVersionId\": \"v1\",\n        \"AttachmentCount\": 0,\n        \"PermissionsBoundaryUsageCount\": 0,\n        \"IsAttachable\": true,\n        \"CreateDate\":","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}],["728",{"pageContent":"\"2022-06-24T14:31:30+00:00\",\n        \"UpdateDate\": \"2022-06-24T14:31:30+00:00\",\n        \"Tags\": [\n            {\n                \"Key\": \"project\",\n                \"Value\": \"gitpod\"\n            }\n        ]\n    }\n}Attach the policy to the IAM user you just created:\naws iam attach-user-policy \\\n    --user-name gitpod-s3-access \\\n    --policy-arn '<arn from above, similar to: arn:aws:iam::691173103445:policy/gitpod_s3_access_policy>'Create and store a user access token\nCreate an access key with the following command, and securely record the resulting AccessKeyId and SecretAccessKey fields:\naws iam create-access-key --user-name gitpod-s3-accessThis should result in an output similar to the following:\n{\n    \"AccessKey\": {\n        \"UserName\": \"gitpod-s3-access\",\n        \"AccessKeyId\": \"<accessKeyId>\",\n        \"Status\": \"Active\",\n        \"SecretAccessKey\": \"<SecretAccessKey>\",\n        \"CreateDate\": \"2022-06-24T14:37:40+00:00\"\n    }\n}To test that these credentials provide write access to the S3 bucket, open a new shell session and configure it to use the AccessKeyId and SecretAccessKey you&#39;ve just retrieved, and attempt to upload a file and then delete it:\nexport AWS_ACCESS_KEY_ID=<accessKeyId>\nexport AWS_SECRET_ACCESS_KEY=<SecretAccessKey>\naws s3 ls","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}],["729",{"pageContent":"s3://${S3_BUCKET_NAME}\necho \"hello world\" > gitpod_test.txt\naws s3 cp gitpod_test.txt s3://${S3_BUCKET_NAME}\n# => upload: ./gitpod_test.txt to s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => 2022-06-24 15:50:20         12 gitpod_test.txt\naws s3 rm s3://${S3_BUCKET_NAME}/gitpod_test.txt\n# => delete: s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => *nothing returns if empty*To avoid impacting any further calls to AWS, unset the environment variables created:\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEYThis section will create an Azure storage account for Gitpod object storage and backups.\nGenerate a name for the Azure storage account. The Azure storage account name must be globally unique; using a random suffix is recommended but any unique value can be used.\nexport STORAGE_ACCOUNT_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$STORAGE_ACCOUNT_NAME\"Note the value of $STORAGE_ACCOUNT_NAME for later use.\nCreate the storage account:\naz storage account create \\\n  --access-tier Hot \\\n  --kind StorageV2 \\\n  --location \"${LOCATION}\" \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --resource-group","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}],["730",{"pageContent":"\"${RESOURCE_GROUP}\" \\\n  --sku Standard_LRSAfter creating the storage account, grant access to Gitpod cluster to that storage account.\nKUBELET_PRINCIPAL_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\nSTORAGE_ACCOUNT_ID=$(az storage account show \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --output tsv \\\n  --query id \\\n  --resource-group \"${RESOURCE_GROUP}\")\n\naz role assignment create \\\n    --assignee \"${KUBELET_PRINCIPAL_ID}\" \\\n    --role \"Storage Blob Data Contributor\" \\\n    --scope \"${STORAGE_ACCOUNT_ID}\"Note the storage account key for later use.\nSTORAGE_ACCOUNT_KEY=$(az storage account keys list \\\n    --account-name \"${STORAGE_ACCOUNT_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --query '[?keyName==`key1`].value' \\\n    --output tsv\n)","metadata":{"source":"https://gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage"}}]]